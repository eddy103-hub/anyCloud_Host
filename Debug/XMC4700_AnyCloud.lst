
XMC4700_AnyCloud.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006b60  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  08006b60  0c006b60  0000eb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  3 .data         00000200  1ffe8800  0c006b60  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001878  1ffe8a00  0c006d60  00010a00  2**2
                  ALLOC
  5 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  6 .debug_aranges 00000d30  00000000  00000000  00010a00  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000119af  00000000  00000000  00011730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ec0  00000000  00000000  000230df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000067bf  00000000  00000000  00025f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00003d70  00000000  00000000  0002c760  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00008233  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006ade  00000000  00000000  00038703  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b50  00000000  00000000  0003f1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000c44  00000000  00000000  0003fd31  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	81 26 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .&..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 d9 2b 00 08 99 02 00 08     .........+......
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	19 20 00 08 99 02 00 08 29 20 00 08 99 02 00 08     . ......) ......
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006b60 	.word	0x0c006b60
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000200 	.word	0x00000200
 8000254:	0c006b60 	.word	0x0c006b60
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8a00 	.word	0x1ffe8a00
 8000264:	00001878 	.word	0x00001878
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800384d 	.word	0x0800384d
    blx  r0
#endif

    ldr  r0, =main
 8000294:	080034b5 	.word	0x080034b5

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f002 fb71 	bl	8002994 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f002 fbd9 	bl	8002a68 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f002 fbb8 	bl	8002a54 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <XMC_GPIO_Init+0x144>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <XMC_GPIO_Init+0x148>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e042      	b.n	8000494 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	da3c      	bge.n	8000494 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	409a      	lsls	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3210      	adds	r2, #16
 800043a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4619      	mov	r1, r3
 8000448:	2307      	movs	r3, #7
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	ea02 0103 	and.w	r1, r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f100 0210 	add.w	r2, r0, #16
 8000458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	7afb      	ldrb	r3, [r7, #11]
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3210      	adds	r2, #16
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	ea42 0103 	orr.w	r1, r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f100 0210 	add.w	r2, r0, #16
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3204      	adds	r2, #4
 80004a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	ea42 0103 	orr.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d02      	adds	r2, r0, #4
 80004c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	48028e00 	.word	0x48028e00
 80004d8:	48028f00 	.word	0x48028f00

080004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	2003ffc0 	.word	0x2003ffc0

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fed2 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2003ffc0 	.word	0x2003ffc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f8c5 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 fac7 	bl	8000b24 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 faff 	bl	8000ba0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 faea 	bl	8000b7c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f929 	bl	8000810 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa82 	bl	8000ad8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f937 	bl	800084c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f95a 	bl	800089c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f941 	bl	8000874 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f964 	bl	80008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 fb04 	bl	8000c10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fb29 	bl	8000c60 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d109      	bne.n	8000636 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	799b      	ldrb	r3, [r3, #6]
 8000626:	f083 0301 	eor.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d017      	beq.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000630:	f000 fb3a 	bl	8000ca8 <XMC_SCU_CLOCK_DisableSystemPll>
 8000634:	e014      	b.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000636:	f000 fb27 	bl	8000c88 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8899      	ldrh	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000646:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800064c:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4608      	mov	r0, r1
 8000656:	4611      	mov	r1, r2
 8000658:	462a      	mov	r2, r5
 800065a:	4623      	mov	r3, r4
 800065c:	f000 fb34 	bl	8000cc8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000668:	d103      	bne.n	8000672 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800066a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800066e:	f000 f855 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000672:	f7ff fe23 	bl	80002bc <SystemCoreClockUpdate>
}
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bdb0      	pop	{r4, r5, r7, pc}

0800067c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0f1b      	lsrs	r3, r3, #28
 8000688:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000690:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	461a      	mov	r2, r3
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006a0:	4413      	add	r3, r2
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	50004414 	.word	0x50004414

080006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	0f1b      	lsrs	r3, r3, #28
 80006c0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006c8:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006d8:	4413      	add	r3, r2
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	5000440c 	.word	0x5000440c

080006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000700:	f7ff feec 	bl	80004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000704:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000708:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	50004600 	.word	0x50004600

0800071c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000724:	4906      	ldr	r1, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4313      	orrs	r3, r2
 8000732:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	50004600 	.word	0x50004600

08000744 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 800074c:	4906      	ldr	r1, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	50004600 	.word	0x50004600

0800076c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000774:	4906      	ldr	r1, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	50004600 	.word	0x50004600

08000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	60d3      	str	r3, [r2, #12]
 80007b4:	e007      	b.n	80007c6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	60d3      	str	r3, [r2, #12]
  }
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004710 	.word	0x50004710

080007d4 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007de:	bf00      	nop
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f8      	bne.n	80007e0 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	50004000 	.word	0x50004000
 800080c:	50004300 	.word	0x50004300

08000810 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800081a:	bf00      	nop
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800081e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f8      	bne.n	800081c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800082a:	4907      	ldr	r1, [pc, #28]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000834:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004000 	.word	0x50004000
 8000848:	50004300 	.word	0x50004300

0800084c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004600 	.word	0x50004600

08000874 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000880:	6a1b      	ldr	r3, [r3, #32]
 8000882:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004600 	.word	0x50004600

0800089c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008b2:	4313      	orrs	r3, r2
 80008b4:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	50004600 	.word	0x50004600

080008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008da:	4313      	orrs	r3, r2
 80008dc:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	50004600 	.word	0x50004600

080008ec <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000902:	4313      	orrs	r3, r2
 8000904:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	50004600 	.word	0x50004600

08000914 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800092a:	4313      	orrs	r3, r2
 800092c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	50004600 	.word	0x50004600

0800093c <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000952:	4313      	orrs	r3, r2
 8000954:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	50004600 	.word	0x50004600

08000964 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	6053      	str	r3, [r2, #4]
}
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	50004600 	.word	0x50004600

08000984 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	0f1b      	lsrs	r3, r3, #28
 8000990:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000998:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	4613      	mov	r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 80009a8:	4413      	add	r3, r2
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	601a      	str	r2, [r3, #0]
}
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	50004648 	.word	0x50004648

080009bc <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	0f1b      	lsrs	r3, r3, #28
 80009c8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009d0:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4613      	mov	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4413      	add	r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	461a      	mov	r2, r3
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80009e0:	4413      	add	r3, r2
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	4013      	ands	r3, r2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf14      	ite	ne
 80009ec:	2301      	movne	r3, #1
 80009ee:	2300      	moveq	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	50004640 	.word	0x50004640

08000a04 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a12:	f023 0302 	bic.w	r3, r3, #2
 8000a16:	6153      	str	r3, [r2, #20]
}
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	50004710 	.word	0x50004710

08000a24 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a2e:	4a28      	ldr	r2, [pc, #160]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a3a:	bf00      	nop
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f9      	beq.n	8000a3c <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a54:	491e      	ldr	r1, [pc, #120]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a62:	4313      	orrs	r3, r2
 8000a64:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a66:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a70:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	f023 0310 	bic.w	r3, r3, #16
 8000a7c:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a88:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a8a:	bf00      	nop
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0f9      	beq.n	8000a8c <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000aa4:	bf00      	nop
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1f9      	bne.n	8000aa6 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000abc:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000ac0:	2208      	movs	r2, #8
 8000ac2:	60da      	str	r2, [r3, #12]
}
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	50004710 	.word	0x50004710
 8000ad4:	50004160 	.word	0x50004160

08000ad8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000aec:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d10e      	bne.n	8000b12 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000afe:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000b00:	2064      	movs	r0, #100	; 0x64
 8000b02:	f7ff fd03 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b06:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b10:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f7ff fcfa 	bl	800050c <XMC_SCU_lDelay>
}
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	50004710 	.word	0x50004710

08000b24 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d109      	bne.n	8000b48 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b3a:	bf00      	nop
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0f9      	beq.n	8000b3c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00a      	beq.n	8000b6a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5a:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b5c:	bf00      	nop
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1f9      	bne.n	8000b5e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	50004200 	.word	0x50004200
 8000b78:	50004400 	.word	0x50004400

08000b7c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bf0c      	ite	eq
 8000b8c:	2301      	moveq	r3, #1
 8000b8e:	2300      	movne	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	50004300 	.word	0x50004300

08000ba0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000ba4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ba8:	f7ff fcde 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000bac:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bb6:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000bb8:	bf00      	nop
 8000bba:	f7ff fcc9 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f8      	beq.n	8000bba <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000bc8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bcc:	f7ff fccc 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bd6:	bf00      	nop
 8000bd8:	f7ff fcba 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f8      	beq.n	8000bd8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000be6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bea:	f7ff fcbd 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000bee:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000bfa:	bf00      	nop
 8000bfc:	f7ff fca8 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f8      	beq.n	8000bfc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	50004300 	.word	0x50004300

08000c10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c14:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c20:	4d0d      	ldr	r5, [pc, #52]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c2a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c2e:	f001 ff11 	bl	8002a54 <OSCHP_GetFrequency>
 8000c32:	4602      	mov	r2, r0
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c36:	fba3 2302 	umull	r2, r3, r3, r2
 8000c3a:	0d1b      	lsrs	r3, r3, #20
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c40:	4323      	orrs	r3, r4
 8000c42:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c46:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c4e:	6053      	str	r3, [r2, #4]
}
 8000c50:	bdb0      	pop	{r4, r5, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	50004710 	.word	0x50004710
 8000c58:	50004700 	.word	0x50004700
 8000c5c:	6b5fca6b 	.word	0x6b5fca6b

08000c60 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c6c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c70:	bf0c      	ite	eq
 8000c72:	2301      	moveq	r3, #1
 8000c74:	2300      	movne	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	50004710 	.word	0x50004710

08000c88 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c96:	f023 0302 	bic.w	r3, r3, #2
 8000c9a:	6053      	str	r3, [r2, #4]
}
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	50004710 	.word	0x50004710

08000ca8 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	6053      	str	r3, [r2, #4]
}
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	50004710 	.word	0x50004710

08000cc8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60ba      	str	r2, [r7, #8]
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	81fb      	strh	r3, [r7, #14]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fd59 	bl	8000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000ce2:	7b7b      	ldrb	r3, [r7, #13]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	f040 808b 	bne.w	8000e00 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000cea:	89fb      	ldrh	r3, [r7, #14]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d109      	bne.n	8000d04 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000cf0:	f001 feb0 	bl	8002a54 <OSCHP_GetFrequency>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	4b54      	ldr	r3, [pc, #336]	; (8000e48 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8000cfc:	0c9b      	lsrs	r3, r3, #18
 8000cfe:	059b      	lsls	r3, r3, #22
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e002      	b.n	8000d0a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d04:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d08:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	fb02 f203 	mul.w	r2, r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	4a4b      	ldr	r2, [pc, #300]	; (8000e4c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	0d9b      	lsrs	r3, r3, #22
 8000d26:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d28:	4a49      	ldr	r2, [pc, #292]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2a:	4b49      	ldr	r3, [pc, #292]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d34:	bf00      	nop
 8000d36:	4b46      	ldr	r3, [pc, #280]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f9      	beq.n	8000d36 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d42:	4a43      	ldr	r2, [pc, #268]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d4e:	4940      	ldr	r1, [pc, #256]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	4b3f      	ldr	r3, [pc, #252]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d56:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	3a01      	subs	r2, #1
 8000d5c:	0212      	lsls	r2, r2, #8
 8000d5e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d66:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d72:	4a37      	ldr	r2, [pc, #220]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7c:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d7e:	4a34      	ldr	r2, [pc, #208]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d80:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f023 0310 	bic.w	r3, r3, #16
 8000d88:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d8a:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d96:	bf00      	nop
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f9      	beq.n	8000d98 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000da4:	4a2a      	ldr	r2, [pc, #168]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f023 0301 	bic.w	r3, r3, #1
 8000dae:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000db0:	bf00      	nop
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f9      	bne.n	8000db2 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	0d9b      	lsrs	r3, r3, #22
 8000dca:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dcc:	6a3a      	ldr	r2, [r7, #32]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d202      	bcs.n	8000dda <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dd4:	6938      	ldr	r0, [r7, #16]
 8000dd6:	f000 f845 	bl	8000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	085b      	lsrs	r3, r3, #1
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	095b      	lsrs	r3, r3, #5
 8000de6:	0d9b      	lsrs	r3, r3, #22
 8000de8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dea:	6a3a      	ldr	r2, [r7, #32]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d202      	bcs.n	8000df8 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000df2:	6938      	ldr	r0, [r7, #16]
 8000df4:	f000 f836 	bl	8000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000df8:	6a38      	ldr	r0, [r7, #32]
 8000dfa:	f000 f833 	bl	8000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000dfe:	e01c      	b.n	8000e3a <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e00:	4913      	ldr	r1, [pc, #76]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000e12:	bf00      	nop
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0f9      	beq.n	8000e14 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e2c:	bf00      	nop
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f9      	beq.n	8000e2e <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e3c:	2205      	movs	r2, #5
 8000e3e:	60da      	str	r2, [r3, #12]
}
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	aaaaaaab 	.word	0xaaaaaaab
 8000e50:	50004710 	.word	0x50004710
 8000e54:	f08080ff 	.word	0xf08080ff
 8000e58:	88888889 	.word	0x88888889
 8000e5c:	b60b60b7 	.word	0xb60b60b7
 8000e60:	50004160 	.word	0x50004160

08000e64 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e6c:	490b      	ldr	r1, [pc, #44]	; (8000e9c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000e80:	bf00      	nop
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0320 	and.w	r3, r3, #32
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f9      	beq.n	8000e82 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000e8e:	2032      	movs	r0, #50	; 0x32
 8000e90:	f7ff fb3c 	bl	800050c <XMC_SCU_lDelay>
}
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	50004710 	.word	0x50004710

08000ea0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eae:	60da      	str	r2, [r3, #12]
}
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <XMC_CCU4_lDeassertReset+0x4c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d103      	bne.n	8000ed4 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000ecc:	2004      	movs	r0, #4
 8000ece:	f7ff fbd5 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000ed2:	e016      	b.n	8000f02 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <XMC_CCU4_lDeassertReset+0x50>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d103      	bne.n	8000ee4 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000edc:	2008      	movs	r0, #8
 8000ede:	f7ff fbcd 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000ee2:	e00e      	b.n	8000f02 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <XMC_CCU4_lDeassertReset+0x54>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d103      	bne.n	8000ef4 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000eec:	2010      	movs	r0, #16
 8000eee:	f7ff fbc5 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000ef2:	e006      	b.n	8000f02 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <XMC_CCU4_lDeassertReset+0x58>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d102      	bne.n	8000f02 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <XMC_CCU4_lDeassertReset+0x5c>)
 8000efe:	f7ff fbbd 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	4000c000 	.word	0x4000c000
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	40014000 	.word	0x40014000
 8000f14:	48004000 	.word	0x48004000
 8000f18:	10000001 	.word	0x10000001

08000f1c <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <XMC_CCU4_lUngateClock+0x4c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d103      	bne.n	8000f34 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000f2c:	2004      	movs	r0, #4
 8000f2e:	f7ff fd29 	bl	8000984 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000f32:	e016      	b.n	8000f62 <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <XMC_CCU4_lUngateClock+0x50>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d103      	bne.n	8000f44 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000f3c:	2008      	movs	r0, #8
 8000f3e:	f7ff fd21 	bl	8000984 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000f42:	e00e      	b.n	8000f62 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <XMC_CCU4_lUngateClock+0x54>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d103      	bne.n	8000f54 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000f4c:	2010      	movs	r0, #16
 8000f4e:	f7ff fd19 	bl	8000984 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000f52:	e006      	b.n	8000f62 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <XMC_CCU4_lUngateClock+0x58>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d102      	bne.n	8000f62 <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <XMC_CCU4_lUngateClock+0x5c>)
 8000f5e:	f7ff fd11 	bl	8000984 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	4000c000 	.word	0x4000c000
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	40014000 	.word	0x40014000
 8000f74:	48004000 	.word	0x48004000
 8000f78:	10000001 	.word	0x10000001

08000f7c <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000f84:	2010      	movs	r0, #16
 8000f86:	f7ff fced 	bl	8000964 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffc6 	bl	8000f1c <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff93 	bl	8000ebc <XMC_CCU4_lDeassertReset>
#endif
}
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffe7 	bl	8000f7c <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff76 	bl	8000ea0 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fc0:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	039b      	lsls	r3, r3, #14
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	601a      	str	r2, [r3, #0]
}
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	795b      	ldrb	r3, [r3, #5]
 8000fee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	051a      	lsls	r2, r3, #20
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	791b      	ldrb	r3, [r3, #4]
 8000ffe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	795b      	ldrb	r3, [r3, #5]
 800100e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001012:	b2db      	uxtb	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	795b      	ldrb	r3, [r3, #5]
 800101e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	791b      	ldrb	r3, [r3, #4]
 800102e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
 8001050:	4613      	mov	r3, r2
 8001052:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	2b0b      	cmp	r3, #11
 8001058:	d836      	bhi.n	80010c8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 800105a:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	08001091 	.word	0x08001091
 8001064:	08001091 	.word	0x08001091
 8001068:	0800109b 	.word	0x0800109b
 800106c:	0800109b 	.word	0x0800109b
 8001070:	080010c9 	.word	0x080010c9
 8001074:	080010c9 	.word	0x080010c9
 8001078:	080010c9 	.word	0x080010c9
 800107c:	080010c9 	.word	0x080010c9
 8001080:	080010a5 	.word	0x080010a5
 8001084:	080010b1 	.word	0x080010b1
 8001088:	080010bd 	.word	0x080010bd
 800108c:	080010bd 	.word	0x080010bd
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001090:	2303      	movs	r3, #3
 8001092:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
      break;
 8001098:	e01b      	b.n	80010d2 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 800109a:	230c      	movs	r3, #12
 800109c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 800109e:	2302      	movs	r3, #2
 80010a0:	617b      	str	r3, [r7, #20]
      break;
 80010a2:	e016      	b.n	80010d2 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80010a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80010aa:	2308      	movs	r3, #8
 80010ac:	617b      	str	r3, [r7, #20]
      break;
 80010ae:	e010      	b.n	80010d2 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80010b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010b4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80010b6:	230a      	movs	r3, #10
 80010b8:	617b      	str	r3, [r7, #20]
      break;
 80010ba:	e00a      	b.n	80010d2 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80010bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010c0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80010c2:	230c      	movs	r3, #12
 80010c4:	617b      	str	r3, [r7, #20]
      break;
 80010c6:	e004      	b.n	80010d2 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
	  pos = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
	  break;
 80010d0:	bf00      	nop
  }

  if (mask != 0)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d013      	beq.n	8001100 <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80010de:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4013      	ands	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 80010ea:	78ba      	ldrb	r2, [r7, #2]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4619      	mov	r1, r3
 8001126:	2303      	movs	r3, #3
 8001128:	408b      	lsls	r3, r1
 800112a:	43db      	mvns	r3, r3
 800112c:	401a      	ands	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001136:	78bb      	ldrb	r3, [r7, #2]
 8001138:	78f9      	ldrb	r1, [r7, #3]
 800113a:	0049      	lsls	r1, r1, #1
 800113c:	408b      	lsls	r3, r1
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001162:	b2db      	uxtb	r3, r3
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4613      	mov	r3, r2
 8001198:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 800119a:	2310      	movs	r3, #16
 800119c:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 f8ba 	bl	8001318 <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	7a1b      	ldrb	r3, [r3, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	7a1b      	ldrb	r3, [r3, #8]
 80011b0:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d014      	beq.n	80011e2 <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d009      	beq.n	80011d4 <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	f000 f961 	bl	8001494 <XMC_USIC_CH_SetBaudrateEx>
 80011d2:	e006      	b.n	80011e2 <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	4619      	mov	r1, r3
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	f000 f8e7 	bl	80013b0 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	79db      	ldrb	r3, [r3, #7]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	085b      	lsrs	r3, r3, #1
 80011ee:	3301      	adds	r3, #1
 80011f0:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80011f2:	4313      	orrs	r3, r2
 80011f4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	795b      	ldrb	r3, [r3, #5]
 8001204:	3b01      	subs	r3, #1
 8001206:	061b      	lsls	r3, r3, #24
 8001208:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	799b      	ldrb	r3, [r3, #6]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d009      	beq.n	800122c <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	799b      	ldrb	r3, [r3, #6]
 8001220:	3b01      	subs	r3, #1
 8001222:	041b      	lsls	r3, r3, #16
 8001224:	431a      	orrs	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	635a      	str	r2, [r3, #52]	; 0x34
 800122a:	e008      	b.n	800123e <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	795b      	ldrb	r3, [r3, #5]
 8001234:	3b01      	subs	r3, #1
 8001236:	041b      	lsls	r3, r3, #16
 8001238:	431a      	orrs	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001244:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	895b      	ldrh	r3, [r3, #10]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop

08001260 <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001272:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d110      	bne.n	800129c <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800127a:	bf00      	nop
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff67 	bl	8001150 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001282:	4603      	mov	r3, r0
 8001284:	2b80      	cmp	r3, #128	; 0x80
 8001286:	d0f9      	beq.n	800127c <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128e:	f7ff ff6f 	bl	8001170 <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800129a:	e003      	b.n	80012a4 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 800129c:	887a      	ldrh	r2, [r7, #2]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop

080012ac <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80012ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c6:	81fb      	strh	r3, [r7, #14]
 80012c8:	e003      	b.n	80012d2 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80012d0:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80012d2:	89fb      	ldrh	r3, [r7, #14]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <XMC_UART_CH_DisableEvent>:
  channel->CCR |= (event & 0x1fc00U);
  channel->PCR_ASCMode |= (event & 0xf8U);
}

void XMC_UART_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80012f4:	43db      	mvns	r3, r3
 80012f6:	401a      	ands	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_ASCMode &= (uint32_t)~(event & 0xf8U);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001306:	43db      	mvns	r3, r3
 8001308:	401a      	ands	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a1a      	ldr	r2, [pc, #104]	; (800138c <XMC_USIC_CH_Enable+0x74>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d003      	beq.n	8001330 <XMC_USIC_CH_Enable+0x18>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a19      	ldr	r2, [pc, #100]	; (8001390 <XMC_USIC_CH_Enable+0x78>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d103      	bne.n	8001338 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001330:	4818      	ldr	r0, [pc, #96]	; (8001394 <XMC_USIC_CH_Enable+0x7c>)
 8001332:	f000 f963 	bl	80015fc <XMC_USIC_Enable>
 8001336:	e016      	b.n	8001366 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <XMC_USIC_CH_Enable+0x80>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d003      	beq.n	8001348 <XMC_USIC_CH_Enable+0x30>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a16      	ldr	r2, [pc, #88]	; (800139c <XMC_USIC_CH_Enable+0x84>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d103      	bne.n	8001350 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001348:	4815      	ldr	r0, [pc, #84]	; (80013a0 <XMC_USIC_CH_Enable+0x88>)
 800134a:	f000 f957 	bl	80015fc <XMC_USIC_Enable>
 800134e:	e00a      	b.n	8001366 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <XMC_USIC_CH_Enable+0x8c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d003      	beq.n	8001360 <XMC_USIC_CH_Enable+0x48>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <XMC_USIC_CH_Enable+0x90>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d102      	bne.n	8001366 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001360:	4812      	ldr	r0, [pc, #72]	; (80013ac <XMC_USIC_CH_Enable+0x94>)
 8001362:	f000 f94b 	bl	80015fc <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2203      	movs	r2, #3
 800136a:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 800136c:	bf00      	nop
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f9      	beq.n	800136e <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f023 020f 	bic.w	r2, r3, #15
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40030000 	.word	0x40030000
 8001390:	40030200 	.word	0x40030200
 8001394:	40030008 	.word	0x40030008
 8001398:	48020000 	.word	0x48020000
 800139c:	48020200 	.word	0x48020200
 80013a0:	48020008 	.word	0x48020008
 80013a4:	48024000 	.word	0x48024000
 80013a8:	48024200 	.word	0x48024200
 80013ac:	48024008 	.word	0x48024008

080013b0 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b63      	cmp	r3, #99	; 0x63
 80013c0:	d95a      	bls.n	8001478 <XMC_USIC_CH_SetBaudrate+0xc8>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d057      	beq.n	8001478 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80013c8:	f7ff f998 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80013cc:	4602      	mov	r2, r0
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <XMC_USIC_CH_SetBaudrate+0xdc>)
 80013d0:	fba3 2302 	umull	r2, r3, r3, r2
 80013d4:	095b      	lsrs	r3, r3, #5
 80013d6:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4a2c      	ldr	r2, [pc, #176]	; (800148c <XMC_USIC_CH_SetBaudrate+0xdc>)
 80013dc:	fba2 2303 	umull	r2, r3, r2, r3
 80013e0:	095b      	lsrs	r3, r3, #5
 80013e2:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 80013e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80013ee:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 80013f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
 80013fa:	e022      	b.n	8001442 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001400:	fb02 f203 	mul.w	r2, r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	fb01 f303 	mul.w	r3, r1, r3
 800140c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001410:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	0a9b      	lsrs	r3, r3, #10
 8001416:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800141e:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001426:	d809      	bhi.n	800143c <XMC_USIC_CH_SetBaudrate+0x8c>
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	429a      	cmp	r2, r3
 800142e:	d205      	bcs.n	800143c <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 800143c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143e:	3b01      	subs	r3, #1
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
 8001442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1d9      	bne.n	80013fc <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8001448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144a:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 800144c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <XMC_USIC_CH_SetBaudrate+0xe0>)
 800145a:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	3a01      	subs	r2, #1
 8001460:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001462:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001466:	3b01      	subs	r3, #1
 8001468:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800146a:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001476:	e002      	b.n	800147e <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 800147e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001482:	4618      	mov	r0, r3
 8001484:	3738      	adds	r7, #56	; 0x38
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	51eb851f 	.word	0x51eb851f
 8001490:	fc0080ef 	.word	0xfc0080ef

08001494 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	; 0x30
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 80014a0:	f7ff f92c 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80014a4:	4603      	mov	r3, r0
 80014a6:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 80014b2:	2301      	movs	r3, #1
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 80014b6:	6a3a      	ldr	r2, [r7, #32]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dd5f      	ble.n	800157e <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80014be:	6a3a      	ldr	r2, [r7, #32]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 80014c8:	e010      	b.n	80014ec <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 80014ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014cc:	3301      	adds	r3, #1
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014dc:	fb03 f302 	mul.w	r3, r3, r2
 80014e0:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80014e2:	6a3a      	ldr	r2, [r7, #32]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 80014ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ee:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d8e9      	bhi.n	80014ca <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 80014f6:	6a3a      	ldr	r2, [r7, #32]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 800150c:	6a3a      	ldr	r2, [r7, #32]
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001510:	3301      	adds	r3, #1
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800151a:	fb01 f303 	mul.w	r3, r1, r3
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800152e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	1acb      	subs	r3, r1, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	bfb8      	it	lt
 800153c:	425b      	neglt	r3, r3
 800153e:	429a      	cmp	r2, r3
 8001540:	da02      	bge.n	8001548 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	3301      	adds	r3, #1
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8001548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001552:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8001560:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	3a01      	subs	r2, #1
 8001566:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001568:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	3b01      	subs	r3, #1
 800156e:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001570:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800157c:	e002      	b.n	8001584 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8001584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001588:	4618      	mov	r0, r3
 800158a:	3730      	adds	r7, #48	; 0x30
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	fc0080ef 	.word	0xfc0080ef

08001594 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	460b      	mov	r3, r1
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	72fb      	strb	r3, [r7, #11]
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80015a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	021b      	lsls	r3, r3, #8
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80015b0:	431a      	orrs	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
}
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop

080015c4 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	460b      	mov	r3, r1
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	699a      	ldr	r2, [r3, #24]
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	2107      	movs	r1, #7
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80015ea:	431a      	orrs	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop

080015fc <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a28      	ldr	r2, [pc, #160]	; (80016a8 <XMC_USIC_Enable+0xac>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d118      	bne.n	800163e <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 800160c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001610:	f7ff f9b8 	bl	8000984 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8001614:	bf00      	nop
 8001616:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800161a:	f7ff f9cf 	bl	80009bc <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f8      	bne.n	8001616 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001624:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001628:	f7ff f828 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 800162c:	bf00      	nop
 800162e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001632:	f7ff f83f 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f8      	bne.n	800162e <XMC_USIC_Enable+0x32>
 800163c:	e030      	b.n	80016a0 <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <XMC_USIC_Enable+0xb0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d114      	bne.n	8001670 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8001646:	481a      	ldr	r0, [pc, #104]	; (80016b0 <XMC_USIC_Enable+0xb4>)
 8001648:	f7ff f99c 	bl	8000984 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 800164c:	bf00      	nop
 800164e:	4818      	ldr	r0, [pc, #96]	; (80016b0 <XMC_USIC_Enable+0xb4>)
 8001650:	f7ff f9b4 	bl	80009bc <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f9      	bne.n	800164e <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800165a:	4815      	ldr	r0, [pc, #84]	; (80016b0 <XMC_USIC_Enable+0xb4>)
 800165c:	f7ff f80e 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8001660:	bf00      	nop
 8001662:	4813      	ldr	r0, [pc, #76]	; (80016b0 <XMC_USIC_Enable+0xb4>)
 8001664:	f7ff f826 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f9      	bne.n	8001662 <XMC_USIC_Enable+0x66>
 800166e:	e017      	b.n	80016a0 <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <XMC_USIC_Enable+0xb8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d113      	bne.n	80016a0 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8001678:	480f      	ldr	r0, [pc, #60]	; (80016b8 <XMC_USIC_Enable+0xbc>)
 800167a:	f7ff f983 	bl	8000984 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 800167e:	bf00      	nop
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <XMC_USIC_Enable+0xbc>)
 8001682:	f7ff f99b 	bl	80009bc <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f9      	bne.n	8001680 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800168c:	480a      	ldr	r0, [pc, #40]	; (80016b8 <XMC_USIC_Enable+0xbc>)
 800168e:	f7fe fff5 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8001692:	bf00      	nop
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <XMC_USIC_Enable+0xbc>)
 8001696:	f7ff f80d 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f9      	bne.n	8001694 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40030008 	.word	0x40030008
 80016ac:	48020008 	.word	0x48020008
 80016b0:	10000080 	.word	0x10000080
 80016b4:	48024008 	.word	0x48024008
 80016b8:	10000100 	.word	0x10000100

080016bc <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <_sbrk+0x5c>)
 80016ce:	4a13      	ldr	r2, [pc, #76]	; (800171c <_sbrk+0x60>)
 80016d0:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <_sbrk+0x5c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3303      	adds	r3, #3
 80016dc:	f023 0303 	bic.w	r3, r3, #3
 80016e0:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <_sbrk+0x5c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <_sbrk+0x64>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <_sbrk+0x5c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <_sbrk+0x5c>)
 80016fa:	6013      	str	r3, [r2, #0]
    return (base);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	e006      	b.n	800170e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001700:	f002 f89e 	bl	8003840 <__errno>
 8001704:	4602      	mov	r2, r0
 8001706:	230c      	movs	r3, #12
 8001708:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	1ffe8a00 	.word	0x1ffe8a00
 800171c:	20000000 	.word	0x20000000
 8001720:	2003ffc0 	.word	0x2003ffc0

08001724 <_init>:

/* Init */
void _init(void)
{}
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	43db      	mvns	r3, r3
 8001762:	401a      	ands	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001786:	b2db      	uxtb	r3, r3
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017a4:	409a      	lsls	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	401a      	ands	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800180e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800182a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf14      	ite	ne
 8001832:	2301      	movne	r3, #1
 8001834:	2300      	moveq	r3, #0
 8001836:	b2db      	uxtb	r3, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001856:	2b00      	cmp	r3, #0
 8001858:	bf14      	ite	ne
 800185a:	2301      	movne	r3, #1
 800185c:	2300      	moveq	r3, #0
 800185e:	b2db      	uxtb	r3, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	401a      	ands	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop

080018b8 <XMC_USIC_CH_RXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4798      	blx	r3
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]

  return status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop

08001920 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 800192c:	2304      	movs	r3, #4
 800192e:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001938:	2b00      	cmp	r3, #0
 800193a:	d000      	beq.n	800193e <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 800193c:	e007      	b.n	800194e <UART_Transmit+0x2e>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	f000 f856 	bl	80019f4 <UART_StartTransmitIRQ>
 8001948:	4603      	mov	r3, r0
 800194a:	75fb      	strb	r3, [r7, #23]
    break;
 800194c:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 800194e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001964:	2304      	movs	r3, #4
 8001966:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001970:	2b00      	cmp	r3, #0
 8001972:	d000      	beq.n	8001976 <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8001974:	e007      	b.n	8001986 <UART_Receive+0x2e>

  switch(handle->config->receive_mode)
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	f000 f896 	bl	8001aac <UART_StartReceiveIRQ>
 8001980:	4603      	mov	r3, r0
 8001982:	75fb      	strb	r3, [r7, #23]
    break;
 8001984:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <UART_AbortReceive>:
 *          UART_STATUS_FAILURE  : If the channel is not busy.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is Direct.<BR>
 *
 */
UART_STATUS_t UART_AbortReceive(const UART_t *const handle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_SUCCESS;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
#endif
  XMC_ASSERT("UART_AbortReceive: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)));

  /*Reset the user buffer pointer to null*/
  handle->runtime->rx_busy = false;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2200      	movs	r2, #0
 80019a2:	765a      	strb	r2, [r3, #25]
  handle->runtime->rx_data = NULL;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
  switch(handle->config->receive_mode)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d115      	bne.n	80019e4 <UART_AbortReceive+0x54>
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    /*Disable the receive interrupts*/
    if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <UART_AbortReceive+0x44>
    {
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80019ce:	f7ff ff5f 	bl	8001890 <XMC_USIC_CH_RXFIFO_DisableEvent>
    {
      XMC_UART_CH_DisableEvent(handle->channel,
            ((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
            (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
    }
    break;
 80019d2:	e00a      	b.n	80019ea <UART_AbortReceive+0x5a>
            ((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
    }
    else
    {
      XMC_UART_CH_DisableEvent(handle->channel,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80019de:	f7ff fc7f 	bl	80012e0 <XMC_UART_CH_DisableEvent>
            ((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
            (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
    }
    break;
 80019e2:	e002      	b.n	80019ea <UART_AbortReceive+0x5a>
            (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
    }
    break;
#endif
  default:
    ret_stat = UART_STATUS_MODE_MISMATCH;
 80019e4:	2304      	movs	r3, #4
 80019e6:	73fb      	strb	r3, [r7, #15]
    break;
 80019e8:	bf00      	nop
  }
  return ret_stat;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001a00:	2304      	movs	r3, #4
 8001a02:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)));

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d144      	bne.n	8001aa0 <UART_StartTransmitIRQ+0xac>
  {
    ret_stat = UART_STATUS_BUSY;
 8001a16:	2302      	movs	r3, #2
 8001a18:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->tx_busy == false)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	7e1b      	ldrb	r3, [r3, #24]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d03a      	beq.n	8001aa0 <UART_StartTransmitIRQ+0xac>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d035      	beq.n	8001a9c <UART_StartTransmitIRQ+0xa8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d032      	beq.n	8001a9c <UART_StartTransmitIRQ+0xa8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00c      	beq.n	8001a74 <UART_StartTransmitIRQ+0x80>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fece 	bl	8001800 <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a6e:	f7ff fea1 	bl	80017b4 <XMC_USIC_CH_TXFIFO_EnableEvent>
 8001a72:	e006      	b.n	8001a82 <UART_StartTransmitIRQ+0x8e>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a7e:	f7ff fe57 	bl	8001730 <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff fe7d 	bl	8001794 <XMC_USIC_CH_TriggerServiceRequest>
 8001a9a:	e001      	b.n	8001aa0 <UART_StartTransmitIRQ+0xac>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop

08001aac <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)));

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d13e      	bne.n	8001b4c <UART_StartReceiveIRQ+0xa0>
  {
    ret_stat = UART_STATUS_BUSY;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->rx_busy == false)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	7e5b      	ldrb	r3, [r3, #25]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f083 0301 	eor.w	r3, r3, #1
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d034      	beq.n	8001b4c <UART_StartReceiveIRQ+0xa0>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d02f      	beq.n	8001b48 <UART_StartReceiveIRQ+0x9c>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d02c      	beq.n	8001b48 <UART_StartReceiveIRQ+0x9c>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	605a      	str	r2, [r3, #4]
        ptr_runtime->rx_data_count = count;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2201      	movs	r2, #1
 8001afe:	765a      	strb	r2, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d010      	beq.n	8001b34 <UART_StartReceiveIRQ+0x88>
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fece 	bl	80018b8 <XMC_USIC_CH_RXFIFO_Flush>

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f000 f930 	bl	8001d84 <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001b2e:	f7ff fe9d 	bl	800186c <XMC_USIC_CH_RXFIFO_EnableEvent>
 8001b32:	e006      	b.n	8001b42 <UART_StartReceiveIRQ+0x96>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001b3e:	f7ff fdf7 	bl	8001730 <XMC_USIC_CH_EnableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 8001b42:	2300      	movs	r3, #0
 8001b44:	75fb      	strb	r3, [r7, #23]
 8001b46:	e001      	b.n	8001b4c <UART_StartReceiveIRQ+0xa0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop

08001b58 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d240      	bcs.n	8001bf4 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d027      	beq.n	8001bce <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001b7e:	e01a      	b.n	8001bb6 <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d212      	bcs.n	8001bb2 <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4608      	mov	r0, r1
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7ff fb5d 	bl	8001260 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	e001      	b.n	8001bb6 <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 8001bb2:	bf00      	nop
 8001bb4:	e053      	b.n	8001c5e <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fe2e 	bl	800181c <XMC_USIC_CH_TXFIFO_IsFull>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f083 0301 	eor.w	r3, r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1d9      	bne.n	8001b80 <UART_lTransmitHandler+0x28>
 8001bcc:	e047      	b.n	8001c5e <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4608      	mov	r0, r1
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7ff fb3c 	bl	8001260 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	e034      	b.n	8001c5e <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe23 	bl	8001844 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d02c      	beq.n	8001c5e <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c1a:	f7ff fddd 	bl	80017d8 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8001c1e:	e006      	b.n	8001c2e <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c2a:	f7ff fd91 	bl	8001750 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001c2e:	bf00      	nop
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fd9d 	bl	8001774 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b80      	cmp	r3, #128	; 0x80
 8001c3e:	d0f7      	beq.n	8001c30 <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4798      	blx	r3
      }
    }
  }
}
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d04e      	beq.n	8001d1c <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001c7e:	e032      	b.n	8001ce6 <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d211      	bcs.n	8001cb0 <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	18d4      	adds	r4, r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fb06 	bl	80012ac <XMC_UART_CH_GetReceivedData>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d114      	bne.n	8001ce6 <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001ccc:	f7ff fde0 	bl	8001890 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4798      	blx	r3
        }
        break;
 8001ce2:	e00b      	b.n	8001cfc <UART_lReceiveHandler+0x98>
 8001ce4:	e00a      	b.n	8001cfc <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fdf2 	bl	80018d4 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1c1      	bne.n	8001c80 <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d23a      	bcs.n	8001d7e <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f000 f835 	bl	8001d84 <UART_lReconfigureRxFIFO>
 8001d1a:	e030      	b.n	8001d7e <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d211      	bcs.n	8001d4c <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	18d4      	adds	r4, r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fab8 	bl	80012ac <XMC_UART_CH_GetReceivedData>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d112      	bne.n	8001d7e <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001d68:	f7ff fcf2 	bl	8001750 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4798      	blx	r3
      }
    }
  }
}
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}

08001d84 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	4093      	lsls	r3, r2
 8001da0:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d203      	bcs.n	8001db2 <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	e002      	b.n	8001db8 <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001dc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	f7ff fbe3 	bl	8001594 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001de0:	0a1b      	lsrs	r3, r3, #8
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <__NVIC_EnableIRQ+0x34>)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	79fa      	ldrb	r2, [r7, #7]
 8001e0c:	f002 021f 	and.w	r2, r2, #31
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	490d      	ldr	r1, [pc, #52]	; (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	4909      	ldr	r1, [pc, #36]	; (8001e78 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
  }
}
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	bf28      	it	cs
 8001e9a:	2306      	movcs	r3, #6
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3306      	adds	r3, #6
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	1e59      	subs	r1, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001ed0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop

08001ee0 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
 8001eec:	4613      	mov	r3, r2
 8001eee:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001ef0:	78f8      	ldrb	r0, [r7, #3]
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	3306      	adds	r3, #6
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8001f02:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001f04:	431a      	orrs	r2, r3
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	1d83      	adds	r3, r0, #6
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop

08001f1c <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	6839      	ldr	r1, [r7, #0]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f7ff f92e 	bl	800118c <XMC_UART_CH_InitEx>
}
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop

08001f38 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f023 030f 	bic.w	r3, r3, #15
 8001f48:	f043 0202 	orr.w	r2, r3, #2
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop

08001f5c <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8001f62:	2300      	movs	r3, #0
 8001f64:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, 0U, &UART_0_rx_pin_config);
 8001f66:	4827      	ldr	r0, [pc, #156]	; (8002004 <UART_0_init+0xa8>)
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4a27      	ldr	r2, [pc, #156]	; (8002008 <UART_0_init+0xac>)
 8001f6c:	f7fe fa10 	bl	8000390 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
 8001f70:	4826      	ldr	r0, [pc, #152]	; (800200c <UART_0_init+0xb0>)
 8001f72:	4927      	ldr	r1, [pc, #156]	; (8002010 <UART_0_init+0xb4>)
 8001f74:	f7ff ffd2 	bl	8001f1c <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 3U);
 8001f78:	4824      	ldr	r0, [pc, #144]	; (800200c <UART_0_init+0xb0>)
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f7ff ffaf 	bl	8001ee0 <XMC_USIC_CH_SetInputSource>
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);
 8001f82:	4822      	ldr	r0, [pc, #136]	; (800200c <UART_0_init+0xb0>)
 8001f84:	f7ff ffd8 	bl	8001f38 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, 1U, &UART_0_tx_pin_config);
 8001f88:	481e      	ldr	r0, [pc, #120]	; (8002004 <UART_0_init+0xa8>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4a21      	ldr	r2, [pc, #132]	; (8002014 <UART_0_init+0xb8>)
 8001f8e:	f7fe f9ff 	bl	8000390 <XMC_GPIO_Init>

  /*Set service request for transmit interrupt*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
 8001f92:	481e      	ldr	r0, [pc, #120]	; (800200c <UART_0_init+0xb0>)
 8001f94:	2104      	movs	r1, #4
 8001f96:	2203      	movs	r2, #3
 8001f98:	f7ff fb14 	bl	80015c4 <XMC_USIC_CH_SetInterruptNodePointer>
     3U);
  /*Set service request for receive interrupt*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
 8001f9c:	481b      	ldr	r0, [pc, #108]	; (800200c <UART_0_init+0xb0>)
 8001f9e:	2108      	movs	r1, #8
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	f7ff fb0f 	bl	80015c4 <XMC_USIC_CH_SetInterruptNodePointer>
     5U);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
 8001fa6:	4819      	ldr	r0, [pc, #100]	; (800200c <UART_0_init+0xb0>)
 8001fa8:	210c      	movs	r1, #12
 8001faa:	2205      	movs	r2, #5
 8001fac:	f7ff fb0a 	bl	80015c4 <XMC_USIC_CH_SetInterruptNodePointer>
     5U);
  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8001fb0:	4816      	ldr	r0, [pc, #88]	; (800200c <UART_0_init+0xb0>)
 8001fb2:	2110      	movs	r1, #16
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f7ff fb05 	bl	80015c4 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001fba:	f7ff ff0b 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	213e      	movs	r1, #62	; 0x3e
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f7ff ff59 	bl	8001e7c <NVIC_EncodePriority>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2057      	movs	r0, #87	; 0x57
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f7ff ff2a 	bl	8001e28 <__NVIC_SetPriority>
                        62U, 0U));
  NVIC_EnableIRQ((IRQn_Type)87);
 8001fd4:	2057      	movs	r0, #87	; 0x57
 8001fd6:	f7ff ff0b 	bl	8001df0 <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)89, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001fda:	f7ff fefb 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	213f      	movs	r1, #63	; 0x3f
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f7ff ff49 	bl	8001e7c <NVIC_EncodePriority>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2059      	movs	r0, #89	; 0x59
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7ff ff1a 	bl	8001e28 <__NVIC_SetPriority>
                      63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)89);
 8001ff4:	2059      	movs	r0, #89	; 0x59
 8001ff6:	f7ff fefb 	bl	8001df0 <__NVIC_EnableIRQ>
  return status;
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	48028500 	.word	0x48028500
 8002008:	080060dc 	.word	0x080060dc
 800200c:	40030000 	.word	0x40030000
 8002010:	08006088 	.word	0x08006088
 8002014:	08006094 	.word	0x08006094

08002018 <USIC0_3_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_0);
 800201c:	4801      	ldr	r0, [pc, #4]	; (8002024 <USIC0_3_IRQHandler+0xc>)
 800201e:	f7ff fd9b 	bl	8001b58 <UART_lTransmitHandler>
}
 8002022:	bd80      	pop	{r7, pc}
 8002024:	1ffe8800 	.word	0x1ffe8800

08002028 <USIC0_5_IRQHandler>:

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
 800202c:	4801      	ldr	r0, [pc, #4]	; (8002034 <USIC0_5_IRQHandler+0xc>)
 800202e:	f7ff fe19 	bl	8001c64 <UART_lReceiveHandler>
}
 8002032:	bd80      	pop	{r7, pc}
 8002034:	1ffe8800 	.word	0x1ffe8800

08002038 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	2201      	movs	r2, #1
 8002048:	409a      	lsls	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	60da      	str	r2, [r3, #12]
}
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	60da      	str	r2, [r3, #12]
}
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	611a      	str	r2, [r3, #16]
}
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002094:	887a      	ldrh	r2, [r7, #2]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
}
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	611a      	str	r2, [r3, #16]
}
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop

080020dc <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	2101      	movs	r1, #1
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800212a:	2b00      	cmp	r3, #0
 800212c:	d104      	bne.n	8002138 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f808 	bl	8002144 <TIMER_CCU4_lInit>
 8002134:	4603      	mov	r3, r0
 8002136:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop

08002144 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fbbb 	bl	80028cc <GLOBAL_CCU4_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7e1b      	ldrb	r3, [r3, #24]
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7ff ff66 	bl	8002038 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7fe ff2e 	bl	8000fd8 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f82d 	bl	80021dc <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00f      	beq.n	80021ac <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002196:	4610      	mov	r0, r2
 8002198:	2100      	movs	r1, #0
 800219a:	461a      	mov	r2, r3
 800219c:	f7fe ff52 	bl	8001044 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	4618      	mov	r0, r3
 80021a6:	2100      	movs	r1, #0
 80021a8:	f7ff ff98 	bl	80020dc <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5d 	bl	8002070 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff43 	bl	8002058 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7ff ff4a 	bl	8002088 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	4618      	mov	r0, r3
 80021fa:	2100      	movs	r1, #0
 80021fc:	f7ff ff52 	bl	80020a4 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7ff ff57 	bl	80020c0 <XMC_CCU4_EnableShadowTransfer>
}
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002224:	0a1b      	lsrs	r3, r3, #8
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	490d      	ldr	r1, [pc, #52]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	0092      	lsls	r2, r2, #2
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	4909      	ldr	r1, [pc, #36]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	3b04      	subs	r3, #4
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
  }
}
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	bf28      	it	cs
 80022a6:	2306      	movcs	r3, #6
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3306      	adds	r3, #6
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2201      	movs	r2, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	401a      	ands	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	1e59      	subs	r1, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80022dc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3724      	adds	r7, #36	; 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop

080022ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022fc:	d301      	bcc.n	8002302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022fe:	2301      	movs	r3, #1
 8002300:	e00f      	b.n	8002322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <SysTick_Config+0x40>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230a:	f04f 30ff 	mov.w	r0, #4294967295
 800230e:	213f      	movs	r1, #63	; 0x3f
 8002310:	f7ff ff90 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <SysTick_Config+0x40>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231a:	4b04      	ldr	r3, [pc, #16]	; (800232c <SysTick_Config+0x40>)
 800231c:	2207      	movs	r2, #7
 800231e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	e000e010 	.word	0xe000e010

08002330 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8002330:	b490      	push	{r4, r7}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 800233c:	496b      	ldr	r1, [pc, #428]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	3318      	adds	r3, #24
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8002350:	4b67      	ldr	r3, [pc, #412]	; (80024f0 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4a62      	ldr	r2, [pc, #392]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 8002364:	4413      	add	r3, r2
 8002366:	4a62      	ldr	r2, [pc, #392]	; (80024f0 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e0bb      	b.n	80024e4 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 800236c:	4b60      	ldr	r3, [pc, #384]	; (80024f0 <SYSTIMER_lInsertTimerList+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8002376:	e0ab      	b.n	80024d0 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	461a      	mov	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	dc7a      	bgt.n	8002480 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d026      	beq.n	80023e0 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4a52      	ldr	r2, [pc, #328]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 80023a2:	4413      	add	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	4850      	ldr	r0, [pc, #320]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4403      	add	r3, r0
 80023b8:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 80023ba:	494c      	ldr	r1, [pc, #304]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4a45      	ldr	r2, [pc, #276]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 80023d8:	441a      	add	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	e01c      	b.n	800241a <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 80023e0:	4b43      	ldr	r3, [pc, #268]	; (80024f0 <SYSTIMER_lInsertTimerList+0x1c0>)
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	4841      	ldr	r0, [pc, #260]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4403      	add	r3, r0
 80023f2:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 80023f4:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <SYSTIMER_lInsertTimerList+0x1c0>)
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4a3a      	ldr	r2, [pc, #232]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 8002404:	4413      	add	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4a36      	ldr	r2, [pc, #216]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 8002414:	4413      	add	r3, r2
 8002416:	4a36      	ldr	r2, [pc, #216]	; (80024f0 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002418:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 800241a:	4934      	ldr	r1, [pc, #208]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	18d1      	adds	r1, r2, r3
 8002430:	482e      	ldr	r0, [pc, #184]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4403      	add	r3, r0
 800243e:	3318      	adds	r3, #24
 8002440:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8002442:	492a      	ldr	r1, [pc, #168]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	4826      	ldr	r0, [pc, #152]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4403      	add	r3, r0
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6998      	ldr	r0, [r3, #24]
 8002464:	4c21      	ldr	r4, [pc, #132]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4423      	add	r3, r4
 8002472:	3318      	adds	r3, #24
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1ac3      	subs	r3, r0, r3
 8002478:	618b      	str	r3, [r1, #24]
        found_flag = true;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	e024      	b.n	80024ca <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	dd21      	ble.n	80024ca <SYSTIMER_lInsertTimerList+0x19a>
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11d      	bne.n	80024ca <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 800248e:	4917      	ldr	r1, [pc, #92]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 80024ac:	441a      	add	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 80024b2:	6939      	ldr	r1, [r7, #16]
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <SYSTIMER_lInsertTimerList+0x1bc>)
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4403      	add	r3, r0
 80024c2:	3318      	adds	r3, #24
 80024c4:	6019      	str	r1, [r3, #0]
          found_flag = true;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <SYSTIMER_lInsertTimerList+0x1b4>
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	f083 0301 	eor.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f47f af4a 	bne.w	8002378 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc90      	pop	{r4, r7}
 80024ea:	4770      	bx	lr
 80024ec:	1ffe8a48 	.word	0x1ffe8a48
 80024f0:	1ffe8a20 	.word	0x1ffe8a20

080024f4 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4a29      	ldr	r2, [pc, #164]	; (80025ac <SYSTIMER_lRemoveTimerList+0xb8>)
 8002508:	4413      	add	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d107      	bne.n	8002524 <SYSTIMER_lRemoveTimerList+0x30>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <SYSTIMER_lRemoveTimerList+0xbc>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	e03d      	b.n	80025a0 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d114      	bne.n	8002556 <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002532:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2200      	movs	r2, #0
 800253a:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <SYSTIMER_lRemoveTimerList+0xbc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	6991      	ldr	r1, [r2, #24]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	6992      	ldr	r2, [r2, #24]
 800254a:	440a      	add	r2, r1
 800254c:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e024      	b.n	80025a0 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d107      	bne.n	800256e <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	e018      	b.n	80025a0 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	6852      	ldr	r2, [r2, #4]
 8002580:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	6991      	ldr	r1, [r2, #24]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	6992      	ldr	r2, [r2, #24]
 8002590:	440a      	add	r2, r1
 8002592:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	605a      	str	r2, [r3, #4]
  }
}
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	1ffe8a48 	.word	0x1ffe8a48
 80025b0:	1ffe8a20 	.word	0x1ffe8a20

080025b4 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 80025ba:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <SYSTIMER_lTimerHandler+0xc4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80025c0:	e050      	b.n	8002664 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff8f 	bl	80024f4 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	461a      	mov	r2, r3
 80025e2:	2301      	movs	r3, #1
 80025e4:	4093      	lsls	r3, r2
 80025e6:	43da      	mvns	r2, r3
 80025e8:	4b24      	ldr	r3, [pc, #144]	; (800267c <SYSTIMER_lTimerHandler+0xc8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4013      	ands	r3, r2
 80025ee:	4a23      	ldr	r2, [pc, #140]	; (800267c <SYSTIMER_lTimerHandler+0xc8>)
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e034      	b.n	800265e <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7b1b      	ldrb	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d112      	bne.n	8002622 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7b5b      	ldrb	r3, [r3, #13]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d12c      	bne.n	800265e <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff73 	bl	80024f4 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6912      	ldr	r2, [r2, #16]
 800261c:	4610      	mov	r0, r2
 800261e:	4798      	blx	r3
 8002620:	e01d      	b.n	800265e <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7b1b      	ldrb	r3, [r3, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d118      	bne.n	800265c <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7b5b      	ldrb	r3, [r3, #13]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d115      	bne.n	800265e <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff5c 	bl	80024f4 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fe71 	bl	8002330 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6912      	ldr	r2, [r2, #16]
 8002656:	4610      	mov	r0, r2
 8002658:	4798      	blx	r3
 800265a:	e000      	b.n	800265e <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 800265c:	e009      	b.n	8002672 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <SYSTIMER_lTimerHandler+0xc4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <SYSTIMER_lTimerHandler+0xbe>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0a7      	beq.n	80025c2 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	1ffe8a20 	.word	0x1ffe8a20
 800267c:	1ffe8a24 	.word	0x1ffe8a24

08002680 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <SysTick_Handler+0x40>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <SysTick_Handler+0x44>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <SysTick_Handler+0x44>)
 8002694:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00e      	beq.n	80026ba <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d905      	bls.n	80026b0 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	619a      	str	r2, [r3, #24]
 80026ae:	e004      	b.n	80026ba <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 80026b6:	f7ff ff7d 	bl	80025b4 <SYSTIMER_lTimerHandler>
    }
  }
}
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	1ffe8a20 	.word	0x1ffe8a20
 80026c4:	1ffe8a28 	.word	0x1ffe8a28

080026c8 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	f083 0301 	eor.w	r3, r3, #1
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d020      	beq.n	8002724 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <SYSTIMER_Init+0x68>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 80026e8:	4812      	ldr	r0, [pc, #72]	; (8002734 <SYSTIMER_Init+0x6c>)
 80026ea:	f7ff fdff 	bl	80022ec <SysTick_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d015      	beq.n	8002724 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 80026f8:	f7ff fd8e 	bl	8002218 <__NVIC_GetPriorityGrouping>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4618      	mov	r0, r3
 8002700:	213f      	movs	r1, #63	; 0x3f
 8002702:	2200      	movs	r2, #0
 8002704:	f7ff fdc0 	bl	8002288 <NVIC_EncodePriority>
 8002708:	4603      	mov	r3, r0
 800270a:	f04f 30ff 	mov.w	r0, #4294967295
 800270e:	4619      	mov	r1, r3
 8002710:	f7ff fd90 	bl	8002234 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <SYSTIMER_Init+0x70>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	1ffe8a20 	.word	0x1ffe8a20
 8002734:	00023280 	.word	0x00023280
 8002738:	1ffe8a24 	.word	0x1ffe8a24

0800273c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <__NVIC_GetPriorityGrouping+0x18>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002748:	0a1b      	lsrs	r3, r3, #8
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db0b      	blt.n	8002782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	4908      	ldr	r1, [pc, #32]	; (800278c <__NVIC_EnableIRQ+0x34>)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	79fa      	ldrb	r2, [r7, #7]
 8002774:	f002 021f 	and.w	r2, r2, #31
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	490d      	ldr	r1, [pc, #52]	; (80027dc <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	0092      	lsls	r2, r2, #2
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	4909      	ldr	r1, [pc, #36]	; (80027e0 <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
  }
}
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b06      	cmp	r3, #6
 8002800:	bf28      	it	cs
 8002802:	2306      	movcs	r3, #6
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3306      	adds	r3, #6
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b01      	subs	r3, #1
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2201      	movs	r2, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	401a      	ands	r2, r3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	1e59      	subs	r1, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002838:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop

08002848 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b25b      	sxtb	r3, r3
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff7e 	bl	8002758 <__NVIC_EnableIRQ>
}
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop

08002864 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	781c      	ldrb	r4, [r3, #0]
 8002870:	f7ff ff64 	bl	800273c <__NVIC_GetPriorityGrouping>
 8002874:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800287a:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	f7ff ffad 	bl	80027e4 <NVIC_EncodePriority>
 800288a:	4602      	mov	r2, r0
 800288c:	b263      	sxtb	r3, r4
 800288e:	4618      	mov	r0, r3
 8002890:	4611      	mov	r1, r2
 8002892:	f7ff ff7d 	bl	8002790 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	78db      	ldrb	r3, [r3, #3]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ffd2 	bl	8002848 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd90      	pop	{r4, r7, pc}
 80028ae:	bf00      	nop

080028b0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028be:	60da      	str	r2, [r3, #12]
}
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop

080028cc <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7b5b      	ldrb	r3, [r3, #13]
 80028d8:	f083 0301 	eor.w	r3, r3, #1
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00f      	beq.n	8002902 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7b1b      	ldrb	r3, [r3, #12]
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fe fb55 	bl	8000f9c <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ffda 	bl	80028b0 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6819      	ldr	r1, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7c1a      	ldrb	r2, [r3, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	f7fd fd33 	bl	8000390 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7c1a      	ldrb	r2, [r3, #16]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7c5b      	ldrb	r3, [r3, #17]
 8002936:	4608      	mov	r0, r1
 8002938:	4611      	mov	r1, r2
 800293a:	461a      	mov	r2, r3
 800293c:	f7fe fbe6 	bl	800110c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop

0800294c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002968:	4013      	ands	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800297e:	4a04      	ldr	r2, [pc, #16]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	60d3      	str	r3, [r2, #12]
}
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800299a:	2001      	movs	r0, #1
 800299c:	f7ff ffd6 	bl	800294c <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a0:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <SystemCoreSetup+0x94>)
 80029a4:	4a21      	ldr	r2, [pc, #132]	; (8002a2c <SystemCoreSetup+0x98>)
 80029a6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029a8:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80029ac:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <SystemCoreSetup+0x94>)
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <SystemCoreSetup+0x94>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <SystemCoreSetup+0x9c>)
 80029c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c4:	3314      	adds	r3, #20
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f023 030f 	bic.w	r3, r3, #15
 80029d0:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <SystemCoreSetup+0x9c>)
 80029dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e0:	3314      	adds	r3, #20
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80029e6:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <SystemCoreSetup+0x94>)
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <SystemCoreSetup+0x94>)
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	f023 0310 	bic.w	r3, r3, #16
 80029f0:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80029f2:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <SystemCoreSetup+0x94>)
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <SystemCoreSetup+0x94>)
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f023 0308 	bic.w	r3, r3, #8
 80029fc:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <SystemCoreSetup+0x94>)
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <SystemCoreSetup+0x94>)
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a08:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8002a0a:	4a07      	ldr	r2, [pc, #28]	; (8002a28 <SystemCoreSetup+0x94>)
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <SystemCoreSetup+0x94>)
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a14:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8002a16:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <SystemCoreSetup+0x94>)
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <SystemCoreSetup+0x94>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a20:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	e000ed00 	.word	0xe000ed00
 8002a2c:	08000000 	.word	0x08000000
 8002a30:	58001000 	.word	0x58001000

08002a34 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]

  return (status);
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002a58:	4b02      	ldr	r3, [pc, #8]	; (8002a64 <OSCHP_GetFrequency+0x10>)
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	00b71b00 	.word	0x00b71b00

08002a68 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002a68:	b5b0      	push	{r4, r5, r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <SystemCoreClockSetup+0x54>)
 8002a70:	1d3c      	adds	r4, r7, #4
 8002a72:	461d      	mov	r5, r3
 8002a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a78:	682b      	ldr	r3, [r5, #0]
 8002a7a:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd80 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fd fea5 	bl	80007d4 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fd fe5a 	bl	8000744 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8002a90:	2004      	movs	r0, #4
 8002a92:	f7fd ff2b 	bl	80008ec <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8002a96:	f7fd ffb5 	bl	8000a04 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	2120      	movs	r1, #32
 8002a9e:	f7fd ffc1 	bl	8000a24 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7fd fe62 	bl	800076c <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f7fd ff47 	bl	800093c <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f7fd ff30 	bl	8000914 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8002aba:	bf00      	nop
 8002abc:	08006114 	.word	0x08006114

08002ac0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8002aca:	481d      	ldr	r0, [pc, #116]	; (8002b40 <DAVE_Init+0x80>)
 8002acc:	f7ff ffb2 	bl	8002a34 <CLOCK_XMC4_Init>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
 8002ada:	481a      	ldr	r0, [pc, #104]	; (8002b44 <DAVE_Init+0x84>)
 8002adc:	f7ff ff16 	bl	800290c <DIGITAL_IO_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d104      	bne.n	8002af4 <DAVE_Init+0x34>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 8002aea:	4817      	ldr	r0, [pc, #92]	; (8002b48 <DAVE_Init+0x88>)
 8002aec:	f7ff fb0c 	bl	8002108 <TIMER_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <DAVE_Init+0x44>
  {
	 /**  Initialization of INTERRUPT APP instance Timer0_INT */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&Timer0_INT); 
 8002afa:	4814      	ldr	r0, [pc, #80]	; (8002b4c <DAVE_Init+0x8c>)
 8002afc:	f7ff feb2 	bl	8002864 <INTERRUPT_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <DAVE_Init+0x54>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 8002b0a:	4811      	ldr	r0, [pc, #68]	; (8002b50 <DAVE_Init+0x90>)
 8002b0c:	f7fe fef6 	bl	80018fc <UART_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <DAVE_Init+0x64>
  {
	 /**  Initialization of DIGITAL_IO APP instance BUTTON1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BUTTON1); 
 8002b1a:	480e      	ldr	r0, [pc, #56]	; (8002b54 <DAVE_Init+0x94>)
 8002b1c:	f7ff fef6 	bl	800290c <DIGITAL_IO_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d104      	bne.n	8002b34 <DAVE_Init+0x74>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIC */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIC); 
 8002b2a:	480b      	ldr	r0, [pc, #44]	; (8002b58 <DAVE_Init+0x98>)
 8002b2c:	f7ff fdcc 	bl	80026c8 <SYSTIMER_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8002b34:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	1ffe8a30 	.word	0x1ffe8a30
 8002b44:	080060ec 	.word	0x080060ec
 8002b48:	1ffe8814 	.word	0x1ffe8814
 8002b4c:	080060e8 	.word	0x080060e8
 8002b50:	1ffe8800 	.word	0x1ffe8800
 8002b54:	08006100 	.word	0x08006100
 8002b58:	1ffe8a2c 	.word	0x1ffe8a2c

08002b5c <generateRandomTemperature>:
bool bMyTimeoutFlag = false;                 // Timeout flag
volatile bool bTxReady = false;              // Transmission ready flag
volatile bool bRxReady = false;              // Reception ready flag

// Function to generate a random temperature value
double generateRandomTemperature() {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
    return (rand() % 100);
 8002b60:	f001 fb12 	bl	8004188 <rand>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <generateRandomTemperature+0x30>)
 8002b68:	fb83 1302 	smull	r1, r3, r3, r2
 8002b6c:	1159      	asrs	r1, r3, #5
 8002b6e:	17d3      	asrs	r3, r2, #31
 8002b70:	1acb      	subs	r3, r1, r3
 8002b72:	2164      	movs	r1, #100	; 0x64
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fdfa 	bl	8003774 <__aeabi_i2d>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
}
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	51eb851f 	.word	0x51eb851f

08002b90 <setTimeout>:

// Set timeout value in seconds
void setTimeout(int16_t sec) {
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
    u16myTime = sec;
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <setTimeout+0x1c>)
 8002b9e:	801a      	strh	r2, [r3, #0]
}
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	1ffe8a36 	.word	0x1ffe8a36

08002bb0 <isTimeout>:

// Check if a timeout has occurred
bool isTimeout(void) {
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
    if (bMyTimeoutFlag) {
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <isTimeout+0x24>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <isTimeout+0x16>
        bMyTimeoutFlag = false;              // Reset the timeout flag
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <isTimeout+0x24>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
        return true;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <isTimeout+0x18>
    }
    return false;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	1ffe8a38 	.word	0x1ffe8a38

08002bd8 <CCU43_1_IRQHandler>:

// Timer0 interrupt service routine
void Timer0_ISR(void) {
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
    u16timerFlag = 1;
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <CCU43_1_IRQHandler+0x34>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	801a      	strh	r2, [r3, #0]

    if (u16myTime) {
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <CCU43_1_IRQHandler+0x38>)
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00c      	beq.n	8002c04 <CCU43_1_IRQHandler+0x2c>
        u16myTime--;
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <CCU43_1_IRQHandler+0x38>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <CCU43_1_IRQHandler+0x38>)
 8002bf4:	801a      	strh	r2, [r3, #0]
        if (u16myTime == 0)
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <CCU43_1_IRQHandler+0x38>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <CCU43_1_IRQHandler+0x2c>
            bMyTimeoutFlag = true;            // Set timeout flag when the timer reaches zero
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <CCU43_1_IRQHandler+0x3c>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
    }
}
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	1ffe8a34 	.word	0x1ffe8a34
 8002c10:	1ffe8a36 	.word	0x1ffe8a36
 8002c14:	1ffe8a38 	.word	0x1ffe8a38

08002c18 <endOfTransmissionCB_ISR>:

// Callback function for the end of transmission
void endOfTransmissionCB_ISR(void) {
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
    bTxReady = true;                          // Set transmission ready flag
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <endOfTransmissionCB_ISR+0x14>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
}
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	1ffe8a39 	.word	0x1ffe8a39

08002c30 <endOfReceptionCB_ISR>:

// Callback function for the end of reception
void endOfReceptionCB_ISR(void) {
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
    bRxReady = true;                          // Set reception ready flag
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <endOfReceptionCB_ISR+0x14>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
}
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	1ffe8a3a 	.word	0x1ffe8a3a

08002c48 <createPubMQTTString>:
 * Function: createPubMQTTString
 * ------------------------------
 * Creates a formatted MQTT payload string for telemetry and a JSON payload.
 * Uses the global variables device_id, bufferPayload, and pubString.
 */
void createPubMQTTString() {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af02      	add	r7, sp, #8

	double temperature = generateRandomTemperature();
 8002c4e:	f7ff ff85 	bl	8002b5c <generateRandomTemperature>
 8002c52:	e9c7 0100 	strd	r0, r1, [r7]

	snprintf(bufferPayload, MQTT_PAYLOAD_SIZE,
 8002c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c5a:	e9cd 2300 	strd	r2, r3, [sp]
 8002c5e:	4808      	ldr	r0, [pc, #32]	; (8002c80 <createPubMQTTString+0x38>)
 8002c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c64:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <createPubMQTTString+0x3c>)
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <createPubMQTTString+0x40>)
 8002c68:	f001 faf2 	bl	8004250 <sniprintf>
			"AT+MQTTPUB=0,0,0,\""PUB_TOPIC_TELEMETRY"\",\""PUB_TELEMETRY_TEMPERATURE"\"\r\n",
			device_id, temperature);

	snprintf(pubString, MQTT_PAYLOAD_SIZE,
 8002c6c:	4807      	ldr	r0, [pc, #28]	; (8002c8c <createPubMQTTString+0x44>)
 8002c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c72:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <createPubMQTTString+0x48>)
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <createPubMQTTString+0x4c>)
 8002c76:	f001 faeb 	bl	8004250 <sniprintf>
			"{\\\"payload\\\" : {\\\"modelId\\\" : \\\"%s\\\"}}", MODEL_ID);
}
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	1ffe9770 	.word	0x1ffe9770
 8002c84:	08006640 	.word	0x08006640
 8002c88:	1ffe8898 	.word	0x1ffe8898
 8002c8c:	1ffea174 	.word	0x1ffea174
 8002c90:	0800668c 	.word	0x0800668c
 8002c94:	080066b4 	.word	0x080066b4

08002c98 <initModule>:
/*
 * Function: initModule
 * --------------------
 * Initializes the module by turning off echo and resetting the module.
 */
void initModule(void) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0

	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8002c9c:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <initModule+0x1c>)
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	f000 fae2 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+RST\r\n");
 8002ca4:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <initModule+0x20>)
 8002ca6:	f000 fadf 	bl	8003268 <ATCMD_Print>
	ATCMD_state = STATE_ROOT_CERT_UPDATE;
 8002caa:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <initModule+0x24>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]

}
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	080066e4 	.word	0x080066e4
 8002cb8:	080066ec 	.word	0x080066ec
 8002cbc:	1ffe8a3b 	.word	0x1ffe8a3b

08002cc0 <updateRootCert>:
/*
 * Function: updateRootCert
 * ------------------------
 * Updates the root certificate for secure communication by sending the certificate to the module.
 */
void updateRootCert(void) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	sprintf(buffer, "AT+LOADCERT=%d,\"DigiCertGlobalRootG2\"\r\n",
 8002cc4:	480c      	ldr	r0, [pc, #48]	; (8002cf8 <updateRootCert+0x38>)
 8002cc6:	490d      	ldr	r1, [pc, #52]	; (8002cfc <updateRootCert+0x3c>)
 8002cc8:	f240 520e 	movw	r2, #1294	; 0x50e
 8002ccc:	f001 faf2 	bl	80042b4 <siprintf>
			strlen(DigiCertGlobalRootG2));
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8002cd0:	480b      	ldr	r0, [pc, #44]	; (8002d00 <updateRootCert+0x40>)
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	f000 fac8 	bl	8003268 <ATCMD_Print>
	ATCMD_Print((char*) buffer, strlen(buffer));
 8002cd8:	4807      	ldr	r0, [pc, #28]	; (8002cf8 <updateRootCert+0x38>)
 8002cda:	f001 fb1d 	bl	8004318 <strlen>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <updateRootCert+0x38>)
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f000 fac0 	bl	8003268 <ATCMD_Print>
	ATCMD_Print(DigiCertGlobalRootG2);
 8002ce8:	4806      	ldr	r0, [pc, #24]	; (8002d04 <updateRootCert+0x44>)
 8002cea:	f000 fabd 	bl	8003268 <ATCMD_Print>
	ATCMD_state = STATE_CONFUGURE_WLAN;
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <updateRootCert+0x48>)
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	701a      	strb	r2, [r3, #0]

}
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	1ffe9870 	.word	0x1ffe9870
 8002cfc:	080066f8 	.word	0x080066f8
 8002d00:	080066e4 	.word	0x080066e4
 8002d04:	08006128 	.word	0x08006128
 8002d08:	1ffe8a3b 	.word	0x1ffe8a3b

08002d0c <configureWLAN>:
/*
 * Function: configureWLAN
 * -----------------------
 * Configures WLAN settings, such as SSID, security type, password, NTP server, and channel.
 */
void configureWLAN(void) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8002d10:	4812      	ldr	r0, [pc, #72]	; (8002d5c <configureWLAN+0x50>)
 8002d12:	2100      	movs	r1, #0
 8002d14:	f000 faa8 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+WSTAC=%d,\"%s\"\r\n", ID_SSID, MY_AP);
 8002d18:	4811      	ldr	r0, [pc, #68]	; (8002d60 <configureWLAN+0x54>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <configureWLAN+0x58>)
 8002d1e:	f000 faa3 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+WSTAC=%d,%d\r\n", ID_SEC_TYPE, PAR_SEC_TYPE_WPA2);
 8002d22:	4811      	ldr	r0, [pc, #68]	; (8002d68 <configureWLAN+0x5c>)
 8002d24:	2102      	movs	r1, #2
 8002d26:	2203      	movs	r2, #3
 8002d28:	f000 fa9e 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+WSTAC=%d,\"%s\"\r\n", ID_CREDENTIALS, MY_PASSWORD);
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <configureWLAN+0x54>)
 8002d2e:	2103      	movs	r1, #3
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <configureWLAN+0x60>)
 8002d32:	f000 fa99 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+WSTAC=%d,%d\r\n", ID_CHANNEL, PAR_ANY_CHANNEL);
 8002d36:	480c      	ldr	r0, [pc, #48]	; (8002d68 <configureWLAN+0x5c>)
 8002d38:	2104      	movs	r1, #4
 8002d3a:	22ff      	movs	r2, #255	; 0xff
 8002d3c:	f000 fa94 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+WSTAC=%d,\"%s\"\r\n", ID_NTP_SVR, NTP_SERVER);
 8002d40:	4807      	ldr	r0, [pc, #28]	; (8002d60 <configureWLAN+0x54>)
 8002d42:	210c      	movs	r1, #12
 8002d44:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <configureWLAN+0x64>)
 8002d46:	f000 fa8f 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+WSTAC=%d,%d\r\n", ID_NTP_STATIC, PAR_NTP_STATIC);
 8002d4a:	4807      	ldr	r0, [pc, #28]	; (8002d68 <configureWLAN+0x5c>)
 8002d4c:	210d      	movs	r1, #13
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f000 fa8a 	bl	8003268 <ATCMD_Print>
	ATCMD_state = STATE_START_WLAN;
 8002d54:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <configureWLAN+0x68>)
 8002d56:	2203      	movs	r2, #3
 8002d58:	701a      	strb	r2, [r3, #0]
}
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	080066e4 	.word	0x080066e4
 8002d60:	08006720 	.word	0x08006720
 8002d64:	08006734 	.word	0x08006734
 8002d68:	0800673c 	.word	0x0800673c
 8002d6c:	08006750 	.word	0x08006750
 8002d70:	0800675c 	.word	0x0800675c
 8002d74:	1ffe8a3b 	.word	0x1ffe8a3b

08002d78 <startWLAN>:
/*
 * Function: startWLAN
 * -------------------
 * Initiates the WLAN connection using the configured parameters.
 */
void startWLAN(void) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8002d7c:	4807      	ldr	r0, [pc, #28]	; (8002d9c <startWLAN+0x24>)
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f000 fa72 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+WSTA=%d\r\n", PAR_USE_CONFIGURATION);
 8002d84:	4806      	ldr	r0, [pc, #24]	; (8002da0 <startWLAN+0x28>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	f000 fa6e 	bl	8003268 <ATCMD_Print>
	ATCMD_ReadLine();
 8002d8c:	f000 fb1e 	bl	80033cc <ATCMD_ReadLine>
	ATCMD_ReadLine();
 8002d90:	f000 fb1c 	bl	80033cc <ATCMD_ReadLine>
	ATCMD_state = STATE_WAIT_FOR_AP_CONNECT;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <startWLAN+0x2c>)
 8002d96:	2204      	movs	r2, #4
 8002d98:	701a      	strb	r2, [r3, #0]

}
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	080066e4 	.word	0x080066e4
 8002da0:	0800676c 	.word	0x0800676c
 8002da4:	1ffe8a3b 	.word	0x1ffe8a3b

08002da8 <waitForAPConnect>:
/*
 * Function: waitForAPConnect
 * --------------------------
 * Checks the status of the WLAN connection and transitions to the next state if connected.
 */
void waitForAPConnect(void) {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8002dac:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <waitForAPConnect+0x2c>)
 8002dae:	2100      	movs	r1, #0
 8002db0:	f000 fa5a 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+WSTA\r\n");
 8002db4:	4808      	ldr	r0, [pc, #32]	; (8002dd8 <waitForAPConnect+0x30>)
 8002db6:	f000 fa57 	bl	8003268 <ATCMD_Print>
	ATCMD_ReadLine();
 8002dba:	f000 fb07 	bl	80033cc <ATCMD_ReadLine>
	if (ATCMD_strcon(ATCMD_ReceiveBuffer, "+WSTALD\r\n") != 1) {
 8002dbe:	4807      	ldr	r0, [pc, #28]	; (8002ddc <waitForAPConnect+0x34>)
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <waitForAPConnect+0x38>)
 8002dc2:	f000 fb45 	bl	8003450 <ATCMD_strcon>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d002      	beq.n	8002dd2 <waitForAPConnect+0x2a>
		ATCMD_state = STATE_CONFIGURE_CLOUD;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <waitForAPConnect+0x3c>)
 8002dce:	2205      	movs	r2, #5
 8002dd0:	701a      	strb	r2, [r3, #0]
	}

}
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	080066e4 	.word	0x080066e4
 8002dd8:	0800677c 	.word	0x0800677c
 8002ddc:	1ffe8b6c 	.word	0x1ffe8b6c
 8002de0:	08006788 	.word	0x08006788
 8002de4:	1ffe8a3b 	.word	0x1ffe8a3b

08002de8 <configureCloud>:
/*
 * Function: configureCloud
 * ------------------------
 * Configures cloud-related parameters, such as MQTT broker address, port, client ID, and username.
 */
void configureCloud(void) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8002dec:	4812      	ldr	r0, [pc, #72]	; (8002e38 <configureCloud+0x50>)
 8002dee:	2100      	movs	r1, #0
 8002df0:	f000 fa3a 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTC=%d,\"%s\"\r\n", ID_MQTT_BROKER_ADDR,
 8002df4:	4811      	ldr	r0, [pc, #68]	; (8002e3c <configureCloud+0x54>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <configureCloud+0x58>)
 8002dfa:	f000 fa35 	bl	8003268 <ATCMD_Print>
	MY_BROKER_ADRESS);
	ATCMD_Print("AT+MQTTC=%d,%d\r\n", ID_MQTT_BROKER_PORT,
 8002dfe:	4811      	ldr	r0, [pc, #68]	; (8002e44 <configureCloud+0x5c>)
 8002e00:	2102      	movs	r1, #2
 8002e02:	f242 22b3 	movw	r2, #8883	; 0x22b3
 8002e06:	f000 fa2f 	bl	8003268 <ATCMD_Print>
	MQTT_BROKER_PORT);
	ATCMD_Print("AT+MQTTC=%d,\"%s\"\r\n", ID_MQTT_CLIENT_ID, CLIENT_ID);
 8002e0a:	480c      	ldr	r0, [pc, #48]	; (8002e3c <configureCloud+0x54>)
 8002e0c:	2103      	movs	r1, #3
 8002e0e:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <configureCloud+0x60>)
 8002e10:	f000 fa2a 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTC=%d,\"%s\"\r\n", ID_MQTT_USERNAME,
 8002e14:	4809      	ldr	r0, [pc, #36]	; (8002e3c <configureCloud+0x54>)
 8002e16:	2104      	movs	r1, #4
 8002e18:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <configureCloud+0x64>)
 8002e1a:	f000 fa25 	bl	8003268 <ATCMD_Print>
	BROKER_USER_NAME);

	ATCMD_Print("AT+MQTTC=%d,%d\r\n", ID_MQTT_TLS_CONF_IDX, TLS_ENABLE);
 8002e1e:	4809      	ldr	r0, [pc, #36]	; (8002e44 <configureCloud+0x5c>)
 8002e20:	2107      	movs	r1, #7
 8002e22:	2201      	movs	r2, #1
 8002e24:	f000 fa20 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTCONN=%d\r\n", MQTT_RCLEAN);
 8002e28:	4809      	ldr	r0, [pc, #36]	; (8002e50 <configureCloud+0x68>)
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	f000 fa1c 	bl	8003268 <ATCMD_Print>
	ATCMD_state = STATE_SUB_DPS;
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <configureCloud+0x6c>)
 8002e32:	2206      	movs	r2, #6
 8002e34:	701a      	strb	r2, [r3, #0]
}
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	080066e4 	.word	0x080066e4
 8002e3c:	08006794 	.word	0x08006794
 8002e40:	080067a8 	.word	0x080067a8
 8002e44:	080067d0 	.word	0x080067d0
 8002e48:	080067e4 	.word	0x080067e4
 8002e4c:	080067fc 	.word	0x080067fc
 8002e50:	08006844 	.word	0x08006844
 8002e54:	1ffe8a3b 	.word	0x1ffe8a3b

08002e58 <subscribeDPS>:
/*
 * Function: subscribeDPS
 * ----------------------
 * Subscribes to the DPS registration topic.
 */
void subscribeDPS(void) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8002e5c:	4806      	ldr	r0, [pc, #24]	; (8002e78 <subscribeDPS+0x20>)
 8002e5e:	2100      	movs	r1, #0
 8002e60:	f000 fa02 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTSUB=\"%s\",%d\r\n", SUB_DPS_REGISTRATION_TOPIC,
 8002e64:	4805      	ldr	r0, [pc, #20]	; (8002e7c <subscribeDPS+0x24>)
 8002e66:	4906      	ldr	r1, [pc, #24]	; (8002e80 <subscribeDPS+0x28>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f000 f9fd 	bl	8003268 <ATCMD_Print>
	MQTT_QOS);
	ATCMD_state = STATE_PUB_DPS_REG_PUT;
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <subscribeDPS+0x2c>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	701a      	strb	r2, [r3, #0]

}
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	080066e4 	.word	0x080066e4
 8002e7c:	08006858 	.word	0x08006858
 8002e80:	08006870 	.word	0x08006870
 8002e84:	1ffe8a3b 	.word	0x1ffe8a3b

08002e88 <publishDPSPut>:
/*
 * Function: publishDPSPut
 * ------------------------
 * Publishes a message to the DPS PUT topic with a formatted payload.
 */
void publishDPSPut(void) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af02      	add	r7, sp, #8
	createPubMQTTString();
 8002e8e:	f7ff fedb 	bl	8002c48 <createPubMQTTString>
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8002e92:	4809      	ldr	r0, [pc, #36]	; (8002eb8 <publishDPSPut+0x30>)
 8002e94:	2100      	movs	r1, #0
 8002e96:	f000 f9e7 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTPUB=%d,%d,%d,\"%s\",\"%s\"\r\n", MQTT_DUP, MQTT_QOS,
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <publishDPSPut+0x34>)
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <publishDPSPut+0x38>)
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	4808      	ldr	r0, [pc, #32]	; (8002ec4 <publishDPSPut+0x3c>)
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f000 f9dd 	bl	8003268 <ATCMD_Print>
	MQTT_NOT_RETAIN, PUB_TOPIC_DPS_PUT, pubString);
	ATCMD_state = STATE_PUB_DPS_REG_GET;
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <publishDPSPut+0x40>)
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	701a      	strb	r2, [r3, #0]
}
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	080066e4 	.word	0x080066e4
 8002ebc:	080068ac 	.word	0x080068ac
 8002ec0:	1ffea174 	.word	0x1ffea174
 8002ec4:	0800688c 	.word	0x0800688c
 8002ec8:	1ffe8a3b 	.word	0x1ffe8a3b

08002ecc <publishDPSGet>:
/*
 * Function: publishDPSGet
 * ------------------------
 * Publishes a message to the DPS GET topic based on the response from the DPS PUT operation.
 */
void publishDPSGet(void) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0

	// Assuming ATCMD_ReceiveBuffer contains the received MQTT publish response
	resultPtrMQTTPUB = strstr(ATCMD_ReceiveBuffer, "+MQTTPUB:");
 8002ed0:	4822      	ldr	r0, [pc, #136]	; (8002f5c <publishDPSGet+0x90>)
 8002ed2:	4923      	ldr	r1, [pc, #140]	; (8002f60 <publishDPSGet+0x94>)
 8002ed4:	f001 fa28 	bl	8004328 <strstr>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <publishDPSGet+0x98>)
 8002edc:	601a      	str	r2, [r3, #0]
	if (resultPtrMQTTPUB != NULL) {
 8002ede:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <publishDPSGet+0x98>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d004      	beq.n	8002ef0 <publishDPSGet+0x24>
		// Move the pointer to the beginning of the MQTT publish response
		resultPtrMQTTPUB += strlen("+MQTTPUB:");
 8002ee6:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <publishDPSGet+0x98>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3309      	adds	r3, #9
 8002eec:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <publishDPSGet+0x98>)
 8002eee:	6013      	str	r3, [r2, #0]

	}

	if ((operationID = strstr(resultPtrMQTTPUB, "\"operationId\":\""))) {
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <publishDPSGet+0x98>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	491c      	ldr	r1, [pc, #112]	; (8002f68 <publishDPSGet+0x9c>)
 8002ef8:	f001 fa16 	bl	8004328 <strstr>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <publishDPSGet+0xa0>)
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <publishDPSGet+0xa0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d027      	beq.n	8002f5a <publishDPSGet+0x8e>
		operationID += strlen("\"operationId\":\"");
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <publishDPSGet+0xa0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	330f      	adds	r3, #15
 8002f10:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <publishDPSGet+0xa0>)
 8002f12:	6013      	str	r3, [r2, #0]
		*(strstr(operationID, "\"")) = 0;
 8002f14:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <publishDPSGet+0xa0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	2122      	movs	r1, #34	; 0x22
 8002f1c:	f001 f9ee 	bl	80042fc <strchr>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
		sprintf(buffer, "AT+MQTTPUB=0,0,0,\""PUB_TOPIC_DPS_GET"\",\"""\"\r\n",
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <publishDPSGet+0xa0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4811      	ldr	r0, [pc, #68]	; (8002f70 <publishDPSGet+0xa4>)
 8002f2c:	4911      	ldr	r1, [pc, #68]	; (8002f74 <publishDPSGet+0xa8>)
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f001 f9c0 	bl	80042b4 <siprintf>
				operationID);
		ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8002f34:	4810      	ldr	r0, [pc, #64]	; (8002f78 <publishDPSGet+0xac>)
 8002f36:	2100      	movs	r1, #0
 8002f38:	f000 f996 	bl	8003268 <ATCMD_Print>
		ATCMD_Print(buffer);
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <publishDPSGet+0xa4>)
 8002f3e:	f000 f993 	bl	8003268 <ATCMD_Print>

		// if Azure +MQTTPUB response does not contain "retry-after=",
		// move to next state, otherwise retry in 1 SECOND
		if (!strstr(resultPtrMQTTPUB, "retry-after="))
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <publishDPSGet+0x98>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	490c      	ldr	r1, [pc, #48]	; (8002f7c <publishDPSGet+0xb0>)
 8002f4a:	f001 f9ed 	bl	8004328 <strstr>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <publishDPSGet+0x8e>
			ATCMD_state = STATE_AZURE_GET_ASSIGN_HUB;
 8002f54:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <publishDPSGet+0xb4>)
 8002f56:	2209      	movs	r2, #9
 8002f58:	701a      	strb	r2, [r3, #0]
	}

}
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	1ffe8b6c 	.word	0x1ffe8b6c
 8002f60:	080068dc 	.word	0x080068dc
 8002f64:	1ffe8b68 	.word	0x1ffe8b68
 8002f68:	080068e8 	.word	0x080068e8
 8002f6c:	1ffea170 	.word	0x1ffea170
 8002f70:	1ffe9870 	.word	0x1ffe9870
 8002f74:	080068f8 	.word	0x080068f8
 8002f78:	080066e4 	.word	0x080066e4
 8002f7c:	08006958 	.word	0x08006958
 8002f80:	1ffe8a3b 	.word	0x1ffe8a3b

08002f84 <getAssignedHub>:
/*
 * Function: getAssignedHub
 * ------------------------
 * Extracts the assigned hub information from the MQTT publish response and updates configuration.
 */
void getAssignedHub(void) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0

	// Assuming ATCMD_ReceiveBuffer contains the received MQTT publish response
	resultPtrMQTTPUB = strstr(ATCMD_ReceiveBuffer, "+MQTTPUB:");
 8002f88:	481e      	ldr	r0, [pc, #120]	; (8003004 <getAssignedHub+0x80>)
 8002f8a:	491f      	ldr	r1, [pc, #124]	; (8003008 <getAssignedHub+0x84>)
 8002f8c:	f001 f9cc 	bl	8004328 <strstr>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <getAssignedHub+0x88>)
 8002f94:	601a      	str	r2, [r3, #0]
	if (resultPtrMQTTPUB != NULL) {
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <getAssignedHub+0x88>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d004      	beq.n	8002fa8 <getAssignedHub+0x24>
		// Move the pointer to the beginning of the MQTT publish response
		resultPtrMQTTPUB += strlen("+MQTTPUB:");
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	; (800300c <getAssignedHub+0x88>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3309      	adds	r3, #9
 8002fa4:	4a19      	ldr	r2, [pc, #100]	; (800300c <getAssignedHub+0x88>)
 8002fa6:	6013      	str	r3, [r2, #0]

	}

	if ((azureAssignedHub = strstr(resultPtrMQTTPUB, "\"assignedHub\":\""))) {
 8002fa8:	4b18      	ldr	r3, [pc, #96]	; (800300c <getAssignedHub+0x88>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	4918      	ldr	r1, [pc, #96]	; (8003010 <getAssignedHub+0x8c>)
 8002fb0:	f001 f9ba 	bl	8004328 <strstr>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <getAssignedHub+0x90>)
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	4b16      	ldr	r3, [pc, #88]	; (8003014 <getAssignedHub+0x90>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d01b      	beq.n	8002ffa <getAssignedHub+0x76>

		azureAssignedHub += strlen("\"assignedHub\":\"");
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <getAssignedHub+0x90>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330f      	adds	r3, #15
 8002fc8:	4a12      	ldr	r2, [pc, #72]	; (8003014 <getAssignedHub+0x90>)
 8002fca:	6013      	str	r3, [r2, #0]
		*(strstr(azureAssignedHub, "\"")) = 0;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <getAssignedHub+0x90>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	2122      	movs	r1, #34	; 0x22
 8002fd4:	f001 f992 	bl	80042fc <strchr>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]

		sprintf(my_ba, azureAssignedHub);
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <getAssignedHub+0x90>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	480d      	ldr	r0, [pc, #52]	; (8003018 <getAssignedHub+0x94>)
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f001 f965 	bl	80042b4 <siprintf>
		sprintf(broker_userName, "%s/%s/?api-version=2021-04-12",
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <getAssignedHub+0x90>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	480b      	ldr	r0, [pc, #44]	; (800301c <getAssignedHub+0x98>)
 8002ff0:	490b      	ldr	r1, [pc, #44]	; (8003020 <getAssignedHub+0x9c>)
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <getAssignedHub+0xa0>)
 8002ff6:	f001 f95d 	bl	80042b4 <siprintf>
				azureAssignedHub, device_id);

	}

	ATCMD_state = STATE_MQTT_DISCONNECT;
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <getAssignedHub+0xa4>)
 8002ffc:	220a      	movs	r2, #10
 8002ffe:	701a      	strb	r2, [r3, #0]

}
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	1ffe8b6c 	.word	0x1ffe8b6c
 8003008:	080068dc 	.word	0x080068dc
 800300c:	1ffe8b68 	.word	0x1ffe8b68
 8003010:	08006968 	.word	0x08006968
 8003014:	1ffe8f6c 	.word	0x1ffe8f6c
 8003018:	1ffe884c 	.word	0x1ffe884c
 800301c:	1ffe88cc 	.word	0x1ffe88cc
 8003020:	08006978 	.word	0x08006978
 8003024:	1ffe8898 	.word	0x1ffe8898
 8003028:	1ffe8a3b 	.word	0x1ffe8a3b

0800302c <disconnectMQTT>:
/*
 * Function: disconnectMQTT
 * ------------------------
 * Disconnects from the MQTT broker.
 */
void disconnectMQTT(void) {
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0

	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8003030:	4805      	ldr	r0, [pc, #20]	; (8003048 <disconnectMQTT+0x1c>)
 8003032:	2100      	movs	r1, #0
 8003034:	f000 f918 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTDISCONN\r\n");
 8003038:	4804      	ldr	r0, [pc, #16]	; (800304c <disconnectMQTT+0x20>)
 800303a:	f000 f915 	bl	8003268 <ATCMD_Print>
	ATCMD_state = STATE_RECONNECT_CLOUD;
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <disconnectMQTT+0x24>)
 8003040:	220b      	movs	r2, #11
 8003042:	701a      	strb	r2, [r3, #0]
}
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	080066e4 	.word	0x080066e4
 800304c:	08006998 	.word	0x08006998
 8003050:	1ffe8a3b 	.word	0x1ffe8a3b

08003054 <reconnectCloud>:
/*
 * Function: reconnectCloud
 * ------------------------
 * Reconnects to the cloud after disconnecting, updating parameters based on the assigned hub.
 */
void reconnectCloud(void) {
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8003058:	4812      	ldr	r0, [pc, #72]	; (80030a4 <reconnectCloud+0x50>)
 800305a:	2100      	movs	r1, #0
 800305c:	f000 f904 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTC=%d,\"%s\"\r\n", ID_MQTT_BROKER_ADDR, my_ba);
 8003060:	4811      	ldr	r0, [pc, #68]	; (80030a8 <reconnectCloud+0x54>)
 8003062:	2101      	movs	r1, #1
 8003064:	4a11      	ldr	r2, [pc, #68]	; (80030ac <reconnectCloud+0x58>)
 8003066:	f000 f8ff 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTC=%d,%d\r\n", ID_MQTT_BROKER_PORT,
 800306a:	4811      	ldr	r0, [pc, #68]	; (80030b0 <reconnectCloud+0x5c>)
 800306c:	2102      	movs	r1, #2
 800306e:	f242 22b3 	movw	r2, #8883	; 0x22b3
 8003072:	f000 f8f9 	bl	8003268 <ATCMD_Print>
	MQTT_BROKER_PORT);
	ATCMD_Print("AT+MQTTC=%d,\"%s\"\r\n", ID_MQTT_CLIENT_ID, device_id);
 8003076:	480c      	ldr	r0, [pc, #48]	; (80030a8 <reconnectCloud+0x54>)
 8003078:	2103      	movs	r1, #3
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <reconnectCloud+0x60>)
 800307c:	f000 f8f4 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTC=%d,\"%s\"\r\n", ID_MQTT_USERNAME, broker_userName);
 8003080:	4809      	ldr	r0, [pc, #36]	; (80030a8 <reconnectCloud+0x54>)
 8003082:	2104      	movs	r1, #4
 8003084:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <reconnectCloud+0x64>)
 8003086:	f000 f8ef 	bl	8003268 <ATCMD_Print>

	ATCMD_Print("AT+MQTTC=%d,%d\r\n", ID_MQTT_TLS_CONF_IDX, TLS_ENABLE);
 800308a:	4809      	ldr	r0, [pc, #36]	; (80030b0 <reconnectCloud+0x5c>)
 800308c:	2107      	movs	r1, #7
 800308e:	2201      	movs	r2, #1
 8003090:	f000 f8ea 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTCONN=%d\r\n", MQTT_RCLEAN);
 8003094:	4809      	ldr	r0, [pc, #36]	; (80030bc <reconnectCloud+0x68>)
 8003096:	2101      	movs	r1, #1
 8003098:	f000 f8e6 	bl	8003268 <ATCMD_Print>
	ATCMD_state = STATE_AZURE_SUB_1;
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <reconnectCloud+0x6c>)
 800309e:	220c      	movs	r2, #12
 80030a0:	701a      	strb	r2, [r3, #0]

}
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	080066e4 	.word	0x080066e4
 80030a8:	08006794 	.word	0x08006794
 80030ac:	1ffe884c 	.word	0x1ffe884c
 80030b0:	080067d0 	.word	0x080067d0
 80030b4:	1ffe8898 	.word	0x1ffe8898
 80030b8:	1ffe88cc 	.word	0x1ffe88cc
 80030bc:	08006844 	.word	0x08006844
 80030c0:	1ffe8a3b 	.word	0x1ffe8a3b

080030c4 <azureSubscribe_1>:
/*
 * Function: azureSubscribe_1
 * --------------------------
 * Subscribes to the first Azure IoT Hub topic.
 */
void azureSubscribe_1(void) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 80030c8:	4806      	ldr	r0, [pc, #24]	; (80030e4 <azureSubscribe_1+0x20>)
 80030ca:	2100      	movs	r1, #0
 80030cc:	f000 f8cc 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTSUB=\"%s\",%d\r\n", TOPIC_IOTC_METHOD_REQUEST,
 80030d0:	4805      	ldr	r0, [pc, #20]	; (80030e8 <azureSubscribe_1+0x24>)
 80030d2:	4906      	ldr	r1, [pc, #24]	; (80030ec <azureSubscribe_1+0x28>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	f000 f8c7 	bl	8003268 <ATCMD_Print>
	MQTT_SUB_QOS);
	ATCMD_state = STATE_AZURE_SUB_2;
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <azureSubscribe_1+0x2c>)
 80030dc:	220d      	movs	r2, #13
 80030de:	701a      	strb	r2, [r3, #0]

}
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	080066e4 	.word	0x080066e4
 80030e8:	08006858 	.word	0x08006858
 80030ec:	080069ac 	.word	0x080069ac
 80030f0:	1ffe8a3b 	.word	0x1ffe8a3b

080030f4 <azureSubscribe_2>:
/*
 * Function: azureSubscribe_2
 * --------------------------
 * Subscribes to the second Azure IoT Hub topic.
 */
void azureSubscribe_2(void) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 80030f8:	4806      	ldr	r0, [pc, #24]	; (8003114 <azureSubscribe_2+0x20>)
 80030fa:	2100      	movs	r1, #0
 80030fc:	f000 f8b4 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTSUB=\"%s\",%d\r\n", TOPIC_IOTC_PROPERTY_DESIRED,
 8003100:	4805      	ldr	r0, [pc, #20]	; (8003118 <azureSubscribe_2+0x24>)
 8003102:	4906      	ldr	r1, [pc, #24]	; (800311c <azureSubscribe_2+0x28>)
 8003104:	2201      	movs	r2, #1
 8003106:	f000 f8af 	bl	8003268 <ATCMD_Print>
	MQTT_SUB_QOS);
	ATCMD_state = STATE_AZURE_SUB_3;
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <azureSubscribe_2+0x2c>)
 800310c:	220e      	movs	r2, #14
 800310e:	701a      	strb	r2, [r3, #0]

}
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	080066e4 	.word	0x080066e4
 8003118:	08006858 	.word	0x08006858
 800311c:	080069c4 	.word	0x080069c4
 8003120:	1ffe8a3b 	.word	0x1ffe8a3b

08003124 <azureSubscribe_3>:
/*
 * Function: azureSubscribe_3
 * --------------------------
 * Subscribes to the third Azure IoT Hub topic.
 */
void azureSubscribe_3(void) {
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 8003128:	4806      	ldr	r0, [pc, #24]	; (8003144 <azureSubscribe_3+0x20>)
 800312a:	2100      	movs	r1, #0
 800312c:	f000 f89c 	bl	8003268 <ATCMD_Print>
	ATCMD_Print("AT+MQTTSUB=\"%s\",%d\r\n", TOPIC_IOTC_PROPERTY_RESPONSE,
 8003130:	4805      	ldr	r0, [pc, #20]	; (8003148 <azureSubscribe_3+0x24>)
 8003132:	4906      	ldr	r1, [pc, #24]	; (800314c <azureSubscribe_3+0x28>)
 8003134:	2201      	movs	r2, #1
 8003136:	f000 f897 	bl	8003268 <ATCMD_Print>
	MQTT_SUB_QOS);
	ATCMD_state = STATE_PUBLISH_CLOUD;
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <azureSubscribe_3+0x2c>)
 800313c:	220f      	movs	r2, #15
 800313e:	701a      	strb	r2, [r3, #0]

}
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	080066e4 	.word	0x080066e4
 8003148:	08006858 	.word	0x08006858
 800314c:	080069ec 	.word	0x080069ec
 8003150:	1ffe8a3b 	.word	0x1ffe8a3b

08003154 <publishTelemetry>:
/*
 * Function: publishTelemetry
 * --------------------------
 * Publishes telemetry data to the cloud with a formatted payload.
 */
void publishTelemetry(void) {
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
	createPubMQTTString();
 8003158:	f7ff fd76 	bl	8002c48 <createPubMQTTString>
	ATCMD_Print("ATE%d\r\n", TURN_OFF_ECHO);
 800315c:	4806      	ldr	r0, [pc, #24]	; (8003178 <publishTelemetry+0x24>)
 800315e:	2100      	movs	r1, #0
 8003160:	f000 f882 	bl	8003268 <ATCMD_Print>
	ATCMD_Print(bufferPayload);
 8003164:	4805      	ldr	r0, [pc, #20]	; (800317c <publishTelemetry+0x28>)
 8003166:	f000 f87f 	bl	8003268 <ATCMD_Print>
	//I have to change it
	//ATCMD_Print("AT+MQTTPUB=%d,%d,%d,\"%s\",\"%s\"\r\n", MQTT_DUP, MQTT_QOS,
	//MQTT_NOT_RETAIN, pub_topic_telemetry, json);
	setTimeout(10);
 800316a:	200a      	movs	r0, #10
 800316c:	f7ff fd10 	bl	8002b90 <setTimeout>
	ATCMD_state = STATE_TIMEOUT;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <publishTelemetry+0x2c>)
 8003172:	2210      	movs	r2, #16
 8003174:	701a      	strb	r2, [r3, #0]

}
 8003176:	bd80      	pop	{r7, pc}
 8003178:	080066e4 	.word	0x080066e4
 800317c:	1ffe9770 	.word	0x1ffe9770
 8003180:	1ffe8a3b 	.word	0x1ffe8a3b

08003184 <timeoutHandling>:
/*
 * Function: timeoutHandling
 * -------------------------
 * Handles the timeout scenario by transitioning to the next state if a timeout occurs.
 */
void timeoutHandling(void) {
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
	if (isTimeout()) {
 8003188:	f7ff fd12 	bl	8002bb0 <isTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <timeoutHandling+0x14>
		ATCMD_state = STATE_PUBLISH_CLOUD;
 8003192:	4b02      	ldr	r3, [pc, #8]	; (800319c <timeoutHandling+0x18>)
 8003194:	220f      	movs	r2, #15
 8003196:	701a      	strb	r2, [r3, #0]
	}

}
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	1ffe8a3b 	.word	0x1ffe8a3b

080031a0 <ATCMD_Task>:
/*
 * Function: ATCMD_Task
 * --------------------
 * Executes the appropriate task based on the current state of the state machine.
 */
void ATCMD_Task(void) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
	switch (ATCMD_state) {
 80031a4:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <ATCMD_Task+0xc4>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d858      	bhi.n	800325e <ATCMD_Task+0xbe>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <ATCMD_Task+0x14>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031f9 	.word	0x080031f9
 80031b8:	080031ff 	.word	0x080031ff
 80031bc:	08003205 	.word	0x08003205
 80031c0:	0800320b 	.word	0x0800320b
 80031c4:	08003211 	.word	0x08003211
 80031c8:	08003217 	.word	0x08003217
 80031cc:	0800321d 	.word	0x0800321d
 80031d0:	08003223 	.word	0x08003223
 80031d4:	08003229 	.word	0x08003229
 80031d8:	0800322f 	.word	0x0800322f
 80031dc:	08003235 	.word	0x08003235
 80031e0:	0800323b 	.word	0x0800323b
 80031e4:	08003241 	.word	0x08003241
 80031e8:	08003247 	.word	0x08003247
 80031ec:	0800324d 	.word	0x0800324d
 80031f0:	08003253 	.word	0x08003253
 80031f4:	08003259 	.word	0x08003259
	case STATE_INIT:
		initModule();
 80031f8:	f7ff fd4e 	bl	8002c98 <initModule>
		break;
 80031fc:	e030      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_ROOT_CERT_UPDATE:
		updateRootCert();
 80031fe:	f7ff fd5f 	bl	8002cc0 <updateRootCert>
		break;
 8003202:	e02d      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_CONFUGURE_WLAN:
		configureWLAN();
 8003204:	f7ff fd82 	bl	8002d0c <configureWLAN>
		break;
 8003208:	e02a      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_START_WLAN:
		startWLAN();
 800320a:	f7ff fdb5 	bl	8002d78 <startWLAN>
		break;
 800320e:	e027      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_WAIT_FOR_AP_CONNECT:
		waitForAPConnect();
 8003210:	f7ff fdca 	bl	8002da8 <waitForAPConnect>
		break;
 8003214:	e024      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_CONFIGURE_CLOUD:
		configureCloud();
 8003216:	f7ff fde7 	bl	8002de8 <configureCloud>
		break;
 800321a:	e021      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_SUB_DPS:
		subscribeDPS();
 800321c:	f7ff fe1c 	bl	8002e58 <subscribeDPS>
		break;
 8003220:	e01e      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_PUB_DPS_REG_PUT:
		publishDPSPut();
 8003222:	f7ff fe31 	bl	8002e88 <publishDPSPut>
		break;
 8003226:	e01b      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_PUB_DPS_REG_GET:
		publishDPSGet();
 8003228:	f7ff fe50 	bl	8002ecc <publishDPSGet>
		break;
 800322c:	e018      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_AZURE_GET_ASSIGN_HUB:
		getAssignedHub();
 800322e:	f7ff fea9 	bl	8002f84 <getAssignedHub>
		break;
 8003232:	e015      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_MQTT_DISCONNECT:
		disconnectMQTT();
 8003234:	f7ff fefa 	bl	800302c <disconnectMQTT>
		break;
 8003238:	e012      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_RECONNECT_CLOUD:
		reconnectCloud();
 800323a:	f7ff ff0b 	bl	8003054 <reconnectCloud>
		break;
 800323e:	e00f      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_AZURE_SUB_1:
		azureSubscribe_1();
 8003240:	f7ff ff40 	bl	80030c4 <azureSubscribe_1>
		break;
 8003244:	e00c      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_AZURE_SUB_2:
		azureSubscribe_2();
 8003246:	f7ff ff55 	bl	80030f4 <azureSubscribe_2>
		break;
 800324a:	e009      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_AZURE_SUB_3:
		azureSubscribe_3();
 800324c:	f7ff ff6a 	bl	8003124 <azureSubscribe_3>
		break;
 8003250:	e006      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_PUBLISH_CLOUD:
		publishTelemetry();
 8003252:	f7ff ff7f 	bl	8003154 <publishTelemetry>
		break;
 8003256:	e003      	b.n	8003260 <ATCMD_Task+0xc0>
	case STATE_TIMEOUT:
		timeoutHandling();
 8003258:	f7ff ff94 	bl	8003184 <timeoutHandling>
		break;
 800325c:	e000      	b.n	8003260 <ATCMD_Task+0xc0>
	default:
		break;
 800325e:	bf00      	nop
	}
}
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	1ffe8a3b 	.word	0x1ffe8a3b

08003268 <ATCMD_Print>:
 * Function: ATCMD_Print
 * ---------------------
 * Sends formatted AT commands to the module, handles transmission and reception,
 * and checks for potential errors.
 */
void ATCMD_Print(const char *format, ...) {
 8003268:	b40f      	push	{r0, r1, r2, r3}
 800326a:	b580      	push	{r7, lr}
 800326c:	b088      	sub	sp, #32
 800326e:	af00      	add	r7, sp, #0

	size_t len = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
	va_list args = { 0 };
 8003274:	2300      	movs	r3, #0
 8003276:	607b      	str	r3, [r7, #4]

	int ret_length = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
	va_start(args, format);
 800327c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003280:	607b      	str	r3, [r7, #4]
	bool abort = false;
 8003282:	2300      	movs	r3, #0
 8003284:	76fb      	strb	r3, [r7, #27]

	len = vsnprintf(ATCMD_TransmittBuffer, ATCMD_PRINT_BUFFER_SIZE, format,
 8003286:	484a      	ldr	r0, [pc, #296]	; (80033b0 <ATCMD_Print+0x148>)
 8003288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800328c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f001 f88c 	bl	80043ac <vsniprintf>
 8003294:	4603      	mov	r3, r0
 8003296:	60fb      	str	r3, [r7, #12]
			args);

	va_end(args);

	ATCMD_Error_Code = 0;
 8003298:	4b46      	ldr	r3, [pc, #280]	; (80033b4 <ATCMD_Print+0x14c>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]

	if ((len > 0) && (len < ATCMD_PRINT_BUFFER_SIZE)) {
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <ATCMD_Print+0x4e>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032aa:	d204      	bcs.n	80032b6 <ATCMD_Print+0x4e>
		ATCMD_TransmittBuffer[len] = '\0';
 80032ac:	4a40      	ldr	r2, [pc, #256]	; (80033b0 <ATCMD_Print+0x148>)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4413      	add	r3, r2
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
	}

	UART_STATUS_t tx_status = UART_Transmit(&UART_0,
 80032b6:	4840      	ldr	r0, [pc, #256]	; (80033b8 <ATCMD_Print+0x150>)
 80032b8:	493d      	ldr	r1, [pc, #244]	; (80033b0 <ATCMD_Print+0x148>)
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	f7fe fb30 	bl	8001920 <UART_Transmit>
 80032c0:	4603      	mov	r3, r0
 80032c2:	72fb      	strb	r3, [r7, #11]
			(uint8_t *) &ATCMD_TransmittBuffer[0], len);
	if (tx_status != UART_STATUS_SUCCESS) {
 80032c4:	7afb      	ldrb	r3, [r7, #11]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <ATCMD_Print+0x6a>
		ATCMD_Error_Code = 1;
 80032ca:	4b3a      	ldr	r3, [pc, #232]	; (80033b4 <ATCMD_Print+0x14c>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
		return;
 80032d0:	e068      	b.n	80033a4 <ATCMD_Print+0x13c>
	}

	setTimeout(2);
 80032d2:	2002      	movs	r0, #2
 80032d4:	f7ff fc5c 	bl	8002b90 <setTimeout>
	while (bTxReady == false) {
 80032d8:	e005      	b.n	80032e6 <ATCMD_Print+0x7e>
		if (isTimeout()) {
 80032da:	f7ff fc69 	bl	8002bb0 <isTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d000      	beq.n	80032e6 <ATCMD_Print+0x7e>
			return;
 80032e4:	e05e      	b.n	80033a4 <ATCMD_Print+0x13c>
		ATCMD_Error_Code = 1;
		return;
	}

	setTimeout(2);
	while (bTxReady == false) {
 80032e6:	4b35      	ldr	r3, [pc, #212]	; (80033bc <ATCMD_Print+0x154>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f083 0301 	eor.w	r3, r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f1      	bne.n	80032da <ATCMD_Print+0x72>
		if (isTimeout()) {
			return;
		}
	}
	bTxReady = false;
 80032f6:	4b31      	ldr	r3, [pc, #196]	; (80033bc <ATCMD_Print+0x154>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]

	// MVo: maximum number of bytes to receive is buffer size, not len of transmitted command
	for (int ix = 0; ix < ATCMD_RECEIVE_BUFFER_SIZE; ix++) {
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e034      	b.n	800336c <ATCMD_Print+0x104>
		bRxReady = false;
 8003302:	4b2f      	ldr	r3, [pc, #188]	; (80033c0 <ATCMD_Print+0x158>)
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
		UART_STATUS_t rx_status = UART_Receive(&UART_0,
				(uint8_t *) &ATCMD_ReceiveBuffer[ix], 1);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <ATCMD_Print+0x15c>)
 800330c:	4413      	add	r3, r2
	bTxReady = false;

	// MVo: maximum number of bytes to receive is buffer size, not len of transmitted command
	for (int ix = 0; ix < ATCMD_RECEIVE_BUFFER_SIZE; ix++) {
		bRxReady = false;
		UART_STATUS_t rx_status = UART_Receive(&UART_0,
 800330e:	482a      	ldr	r0, [pc, #168]	; (80033b8 <ATCMD_Print+0x150>)
 8003310:	4619      	mov	r1, r3
 8003312:	2201      	movs	r2, #1
 8003314:	f7fe fb20 	bl	8001958 <UART_Receive>
 8003318:	4603      	mov	r3, r0
 800331a:	72bb      	strb	r3, [r7, #10]
				(uint8_t *) &ATCMD_ReceiveBuffer[ix], 1);
		if (rx_status != UART_STATUS_SUCCESS) {
 800331c:	7abb      	ldrb	r3, [r7, #10]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <ATCMD_Print+0xc2>
			ATCMD_Error_Code = 1;
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <ATCMD_Print+0x14c>)
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
			return;
 8003328:	e03c      	b.n	80033a4 <ATCMD_Print+0x13c>
		}

		setTimeout(3);
 800332a:	2003      	movs	r0, #3
 800332c:	f7ff fc30 	bl	8002b90 <setTimeout>
		while (bRxReady == false) {
 8003330:	e00a      	b.n	8003348 <ATCMD_Print+0xe0>

			if (isTimeout()) {
 8003332:	f7ff fc3d 	bl	8002bb0 <isTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <ATCMD_Print+0xe0>
				UART_AbortReceive(&UART_0);
 800333c:	481e      	ldr	r0, [pc, #120]	; (80033b8 <ATCMD_Print+0x150>)
 800333e:	f7fe fb27 	bl	8001990 <UART_AbortReceive>
				abort = true;
 8003342:	2301      	movs	r3, #1
 8003344:	76fb      	strb	r3, [r7, #27]
				break;
 8003346:	e007      	b.n	8003358 <ATCMD_Print+0xf0>
			ATCMD_Error_Code = 1;
			return;
		}

		setTimeout(3);
		while (bRxReady == false) {
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <ATCMD_Print+0x158>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f083 0301 	eor.w	r3, r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1ec      	bne.n	8003332 <ATCMD_Print+0xca>
				break;
				//return;
			}
		}

		ret_length++;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]

		if (abort)
 800335e:	7efb      	ldrb	r3, [r7, #27]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d000      	beq.n	8003366 <ATCMD_Print+0xfe>
			break;
 8003364:	e006      	b.n	8003374 <ATCMD_Print+0x10c>
		}
	}
	bTxReady = false;

	// MVo: maximum number of bytes to receive is buffer size, not len of transmitted command
	for (int ix = 0; ix < ATCMD_RECEIVE_BUFFER_SIZE; ix++) {
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3301      	adds	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	dbc6      	blt.n	8003302 <ATCMD_Print+0x9a>
			break;

	}

	// MVo: check only for length of received string
	for (int ix = 0; ix < ret_length; ix++) {
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	e010      	b.n	800339c <ATCMD_Print+0x134>
		if (ok_res[ix] != ATCMD_ReceiveBuffer[ix]) {
 800337a:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <ATCMD_Print+0x160>)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4413      	add	r3, r2
 8003380:	781a      	ldrb	r2, [r3, #0]
 8003382:	4910      	ldr	r1, [pc, #64]	; (80033c4 <ATCMD_Print+0x15c>)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	440b      	add	r3, r1
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d003      	beq.n	8003396 <ATCMD_Print+0x12e>
			ATCMD_Error_Code = 1;
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <ATCMD_Print+0x14c>)
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
			return;
 8003394:	e006      	b.n	80033a4 <ATCMD_Print+0x13c>
			break;

	}

	// MVo: check only for length of received string
	for (int ix = 0; ix < ret_length; ix++) {
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	3301      	adds	r3, #1
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	dbea      	blt.n	800337a <ATCMD_Print+0x112>
		if (ok_res[ix] != ATCMD_ReceiveBuffer[ix]) {
			ATCMD_Error_Code = 1;
			return;
		}
	}
}
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033ac:	b004      	add	sp, #16
 80033ae:	4770      	bx	lr
 80033b0:	1ffe8f70 	.word	0x1ffe8f70
 80033b4:	1ffe8a3c 	.word	0x1ffe8a3c
 80033b8:	1ffe8800 	.word	0x1ffe8800
 80033bc:	1ffe8a39 	.word	0x1ffe8a39
 80033c0:	1ffe8a3a 	.word	0x1ffe8a3a
 80033c4:	1ffe8b6c 	.word	0x1ffe8b6c
 80033c8:	08006638 	.word	0x08006638

080033cc <ATCMD_ReadLine>:
/*
 * Function: ATCMD_ReadLine
 * ------------------------
 * Reads a line from the receive buffer and returns the number of characters read.
 */
uint8_t ATCMD_ReadLine(void) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0

	uint8_t ix;
	uint8_t byte;

	for (ix = 0; ix < ATCMD_RECEIVE_BUFFER_SIZE; ix++) {
 80033d2:	2300      	movs	r3, #0
 80033d4:	71fb      	strb	r3, [r7, #7]

		setTimeout(2);
 80033d6:	2002      	movs	r0, #2
 80033d8:	f7ff fbda 	bl	8002b90 <setTimeout>
		while (bRxReady == false) {
 80033dc:	e006      	b.n	80033ec <ATCMD_ReadLine+0x20>
			if (isTimeout()) {
 80033de:	f7ff fbe7 	bl	8002bb0 <isTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <ATCMD_ReadLine+0x20>
				return 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e026      	b.n	800343a <ATCMD_ReadLine+0x6e>
	uint8_t byte;

	for (ix = 0; ix < ATCMD_RECEIVE_BUFFER_SIZE; ix++) {

		setTimeout(2);
		while (bRxReady == false) {
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <ATCMD_ReadLine+0x78>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f083 0301 	eor.w	r3, r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f0      	bne.n	80033de <ATCMD_ReadLine+0x12>
			if (isTimeout()) {
				return 0;
			}
		}

		UART_STATUS_t rx_status = UART_StartReceiveIRQ(&UART_0, &byte, 1);
 80033fc:	1d7b      	adds	r3, r7, #5
 80033fe:	4812      	ldr	r0, [pc, #72]	; (8003448 <ATCMD_ReadLine+0x7c>)
 8003400:	4619      	mov	r1, r3
 8003402:	2201      	movs	r2, #1
 8003404:	f7fe fb52 	bl	8001aac <UART_StartReceiveIRQ>
 8003408:	4603      	mov	r3, r0
 800340a:	71bb      	strb	r3, [r7, #6]
		if (rx_status != UART_STATUS_SUCCESS) {
 800340c:	79bb      	ldrb	r3, [r7, #6]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <ATCMD_ReadLine+0x4a>
			return 0;
 8003412:	2300      	movs	r3, #0
 8003414:	e011      	b.n	800343a <ATCMD_ReadLine+0x6e>
		}

		if (byte == '\n') {
 8003416:	797b      	ldrb	r3, [r7, #5]
 8003418:	2b0a      	cmp	r3, #10
 800341a:	d106      	bne.n	800342a <ATCMD_ReadLine+0x5e>
			ATCMD_ReceiveBuffer[ix] = 0;
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	4a0b      	ldr	r2, [pc, #44]	; (800344c <ATCMD_ReadLine+0x80>)
 8003420:	2100      	movs	r1, #0
 8003422:	54d1      	strb	r1, [r2, r3]
			break;
 8003424:	bf00      	nop
		} else {
			ATCMD_ReceiveBuffer[ix] = byte;
		}
	}
	return ix;
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	e007      	b.n	800343a <ATCMD_ReadLine+0x6e>

		if (byte == '\n') {
			ATCMD_ReceiveBuffer[ix] = 0;
			break;
		} else {
			ATCMD_ReceiveBuffer[ix] = byte;
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	7979      	ldrb	r1, [r7, #5]
 800342e:	4a07      	ldr	r2, [pc, #28]	; (800344c <ATCMD_ReadLine+0x80>)
 8003430:	54d1      	strb	r1, [r2, r3]
uint8_t ATCMD_ReadLine(void) {

	uint8_t ix;
	uint8_t byte;

	for (ix = 0; ix < ATCMD_RECEIVE_BUFFER_SIZE; ix++) {
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	3301      	adds	r3, #1
 8003436:	71fb      	strb	r3, [r7, #7]
			ATCMD_ReceiveBuffer[ix] = 0;
			break;
		} else {
			ATCMD_ReceiveBuffer[ix] = byte;
		}
	}
 8003438:	e7cd      	b.n	80033d6 <ATCMD_ReadLine+0xa>
	return ix;
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	1ffe8a3a 	.word	0x1ffe8a3a
 8003448:	1ffe8800 	.word	0x1ffe8800
 800344c:	1ffe8b6c 	.word	0x1ffe8b6c

08003450 <ATCMD_strcon>:
/*
 * Function: ATCMD_strcon
 * ----------------------
 * Compares two strings and returns 1 if they are equal, 0 otherwise.
 */
int ATCMD_strcon(char a[], char b[]) {
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
	int i = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]

	while (a[i] != '\0' && b[i] != '\0') {
 800345e:	e00d      	b.n	800347c <ATCMD_strcon+0x2c>
		if (a[i] != b[i]) {
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6839      	ldr	r1, [r7, #0]
 800346c:	440b      	add	r3, r1
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d000      	beq.n	8003476 <ATCMD_strcon+0x26>
			break;
 8003474:	e00e      	b.n	8003494 <ATCMD_strcon+0x44>
		}
		i++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3301      	adds	r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
 * Compares two strings and returns 1 if they are equal, 0 otherwise.
 */
int ATCMD_strcon(char a[], char b[]) {
	int i = 0;

	while (a[i] != '\0' && b[i] != '\0') {
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <ATCMD_strcon+0x44>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	4413      	add	r3, r2
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e5      	bne.n	8003460 <ATCMD_strcon+0x10>
		if (a[i] != b[i]) {
			break;
		}
		i++;
	}
	if (b[i] == '\0') {
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	4413      	add	r3, r2
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <ATCMD_strcon+0x54>
		return 1;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <ATCMD_strcon+0x56>
	} else {
		return 0;
 80034a4:	2300      	movs	r3, #0
	}
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop

080034b4 <main>:
#include <stdlib.h>
#include <string.h>
#include "app.h"
#include "at_commander.h"

int main(void) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0


    DAVE_STATUS_t status;

    status = DAVE_Init(); /* Initialization of DAVE APPs */
 80034ba:	f7ff fb01 	bl	8002ac0 <DAVE_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]

    if (status != DAVE_STATUS_SUCCESS) {
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d000      	beq.n	80034ca <main+0x16>
        /* Placeholder for error handler code. The while loop below can be replaced with a user error handler. */
        XMC_DEBUG("DAVE APPs initialization failed\n");

        while (1U) {
        }
 80034c8:	e7fe      	b.n	80034c8 <main+0x14>
    }


    while (1U) {

    	ATCMD_Task();
 80034ca:	f7ff fe69 	bl	80031a0 <ATCMD_Task>

    }
 80034ce:	e7fc      	b.n	80034ca <main+0x16>

080034d0 <__aeabi_drsub>:
 80034d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80034d4:	e002      	b.n	80034dc <__adddf3>
 80034d6:	bf00      	nop

080034d8 <__aeabi_dsub>:
 80034d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080034dc <__adddf3>:
 80034dc:	b530      	push	{r4, r5, lr}
 80034de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80034e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80034e6:	ea94 0f05 	teq	r4, r5
 80034ea:	bf08      	it	eq
 80034ec:	ea90 0f02 	teqeq	r0, r2
 80034f0:	bf1f      	itttt	ne
 80034f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80034f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80034fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80034fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003502:	f000 80e2 	beq.w	80036ca <__adddf3+0x1ee>
 8003506:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800350a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800350e:	bfb8      	it	lt
 8003510:	426d      	neglt	r5, r5
 8003512:	dd0c      	ble.n	800352e <__adddf3+0x52>
 8003514:	442c      	add	r4, r5
 8003516:	ea80 0202 	eor.w	r2, r0, r2
 800351a:	ea81 0303 	eor.w	r3, r1, r3
 800351e:	ea82 0000 	eor.w	r0, r2, r0
 8003522:	ea83 0101 	eor.w	r1, r3, r1
 8003526:	ea80 0202 	eor.w	r2, r0, r2
 800352a:	ea81 0303 	eor.w	r3, r1, r3
 800352e:	2d36      	cmp	r5, #54	; 0x36
 8003530:	bf88      	it	hi
 8003532:	bd30      	pophi	{r4, r5, pc}
 8003534:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003538:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800353c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003540:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003544:	d002      	beq.n	800354c <__adddf3+0x70>
 8003546:	4240      	negs	r0, r0
 8003548:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800354c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003550:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003554:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003558:	d002      	beq.n	8003560 <__adddf3+0x84>
 800355a:	4252      	negs	r2, r2
 800355c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003560:	ea94 0f05 	teq	r4, r5
 8003564:	f000 80a7 	beq.w	80036b6 <__adddf3+0x1da>
 8003568:	f1a4 0401 	sub.w	r4, r4, #1
 800356c:	f1d5 0e20 	rsbs	lr, r5, #32
 8003570:	db0d      	blt.n	800358e <__adddf3+0xb2>
 8003572:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003576:	fa22 f205 	lsr.w	r2, r2, r5
 800357a:	1880      	adds	r0, r0, r2
 800357c:	f141 0100 	adc.w	r1, r1, #0
 8003580:	fa03 f20e 	lsl.w	r2, r3, lr
 8003584:	1880      	adds	r0, r0, r2
 8003586:	fa43 f305 	asr.w	r3, r3, r5
 800358a:	4159      	adcs	r1, r3
 800358c:	e00e      	b.n	80035ac <__adddf3+0xd0>
 800358e:	f1a5 0520 	sub.w	r5, r5, #32
 8003592:	f10e 0e20 	add.w	lr, lr, #32
 8003596:	2a01      	cmp	r2, #1
 8003598:	fa03 fc0e 	lsl.w	ip, r3, lr
 800359c:	bf28      	it	cs
 800359e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80035a2:	fa43 f305 	asr.w	r3, r3, r5
 80035a6:	18c0      	adds	r0, r0, r3
 80035a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80035ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80035b0:	d507      	bpl.n	80035c2 <__adddf3+0xe6>
 80035b2:	f04f 0e00 	mov.w	lr, #0
 80035b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80035ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80035be:	eb6e 0101 	sbc.w	r1, lr, r1
 80035c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80035c6:	d31b      	bcc.n	8003600 <__adddf3+0x124>
 80035c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80035cc:	d30c      	bcc.n	80035e8 <__adddf3+0x10c>
 80035ce:	0849      	lsrs	r1, r1, #1
 80035d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80035d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80035d8:	f104 0401 	add.w	r4, r4, #1
 80035dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80035e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80035e4:	f080 809a 	bcs.w	800371c <__adddf3+0x240>
 80035e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80035ec:	bf08      	it	eq
 80035ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80035f2:	f150 0000 	adcs.w	r0, r0, #0
 80035f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80035fa:	ea41 0105 	orr.w	r1, r1, r5
 80035fe:	bd30      	pop	{r4, r5, pc}
 8003600:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003604:	4140      	adcs	r0, r0
 8003606:	eb41 0101 	adc.w	r1, r1, r1
 800360a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800360e:	f1a4 0401 	sub.w	r4, r4, #1
 8003612:	d1e9      	bne.n	80035e8 <__adddf3+0x10c>
 8003614:	f091 0f00 	teq	r1, #0
 8003618:	bf04      	itt	eq
 800361a:	4601      	moveq	r1, r0
 800361c:	2000      	moveq	r0, #0
 800361e:	fab1 f381 	clz	r3, r1
 8003622:	bf08      	it	eq
 8003624:	3320      	addeq	r3, #32
 8003626:	f1a3 030b 	sub.w	r3, r3, #11
 800362a:	f1b3 0220 	subs.w	r2, r3, #32
 800362e:	da0c      	bge.n	800364a <__adddf3+0x16e>
 8003630:	320c      	adds	r2, #12
 8003632:	dd08      	ble.n	8003646 <__adddf3+0x16a>
 8003634:	f102 0c14 	add.w	ip, r2, #20
 8003638:	f1c2 020c 	rsb	r2, r2, #12
 800363c:	fa01 f00c 	lsl.w	r0, r1, ip
 8003640:	fa21 f102 	lsr.w	r1, r1, r2
 8003644:	e00c      	b.n	8003660 <__adddf3+0x184>
 8003646:	f102 0214 	add.w	r2, r2, #20
 800364a:	bfd8      	it	le
 800364c:	f1c2 0c20 	rsble	ip, r2, #32
 8003650:	fa01 f102 	lsl.w	r1, r1, r2
 8003654:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003658:	bfdc      	itt	le
 800365a:	ea41 010c 	orrle.w	r1, r1, ip
 800365e:	4090      	lslle	r0, r2
 8003660:	1ae4      	subs	r4, r4, r3
 8003662:	bfa2      	ittt	ge
 8003664:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003668:	4329      	orrge	r1, r5
 800366a:	bd30      	popge	{r4, r5, pc}
 800366c:	ea6f 0404 	mvn.w	r4, r4
 8003670:	3c1f      	subs	r4, #31
 8003672:	da1c      	bge.n	80036ae <__adddf3+0x1d2>
 8003674:	340c      	adds	r4, #12
 8003676:	dc0e      	bgt.n	8003696 <__adddf3+0x1ba>
 8003678:	f104 0414 	add.w	r4, r4, #20
 800367c:	f1c4 0220 	rsb	r2, r4, #32
 8003680:	fa20 f004 	lsr.w	r0, r0, r4
 8003684:	fa01 f302 	lsl.w	r3, r1, r2
 8003688:	ea40 0003 	orr.w	r0, r0, r3
 800368c:	fa21 f304 	lsr.w	r3, r1, r4
 8003690:	ea45 0103 	orr.w	r1, r5, r3
 8003694:	bd30      	pop	{r4, r5, pc}
 8003696:	f1c4 040c 	rsb	r4, r4, #12
 800369a:	f1c4 0220 	rsb	r2, r4, #32
 800369e:	fa20 f002 	lsr.w	r0, r0, r2
 80036a2:	fa01 f304 	lsl.w	r3, r1, r4
 80036a6:	ea40 0003 	orr.w	r0, r0, r3
 80036aa:	4629      	mov	r1, r5
 80036ac:	bd30      	pop	{r4, r5, pc}
 80036ae:	fa21 f004 	lsr.w	r0, r1, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	bd30      	pop	{r4, r5, pc}
 80036b6:	f094 0f00 	teq	r4, #0
 80036ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80036be:	bf06      	itte	eq
 80036c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80036c4:	3401      	addeq	r4, #1
 80036c6:	3d01      	subne	r5, #1
 80036c8:	e74e      	b.n	8003568 <__adddf3+0x8c>
 80036ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80036ce:	bf18      	it	ne
 80036d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80036d4:	d029      	beq.n	800372a <__adddf3+0x24e>
 80036d6:	ea94 0f05 	teq	r4, r5
 80036da:	bf08      	it	eq
 80036dc:	ea90 0f02 	teqeq	r0, r2
 80036e0:	d005      	beq.n	80036ee <__adddf3+0x212>
 80036e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80036e6:	bf04      	itt	eq
 80036e8:	4619      	moveq	r1, r3
 80036ea:	4610      	moveq	r0, r2
 80036ec:	bd30      	pop	{r4, r5, pc}
 80036ee:	ea91 0f03 	teq	r1, r3
 80036f2:	bf1e      	ittt	ne
 80036f4:	2100      	movne	r1, #0
 80036f6:	2000      	movne	r0, #0
 80036f8:	bd30      	popne	{r4, r5, pc}
 80036fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80036fe:	d105      	bne.n	800370c <__adddf3+0x230>
 8003700:	0040      	lsls	r0, r0, #1
 8003702:	4149      	adcs	r1, r1
 8003704:	bf28      	it	cs
 8003706:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800370a:	bd30      	pop	{r4, r5, pc}
 800370c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003710:	bf3c      	itt	cc
 8003712:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003716:	bd30      	popcc	{r4, r5, pc}
 8003718:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800371c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003720:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003724:	f04f 0000 	mov.w	r0, #0
 8003728:	bd30      	pop	{r4, r5, pc}
 800372a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800372e:	bf1a      	itte	ne
 8003730:	4619      	movne	r1, r3
 8003732:	4610      	movne	r0, r2
 8003734:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003738:	bf1c      	itt	ne
 800373a:	460b      	movne	r3, r1
 800373c:	4602      	movne	r2, r0
 800373e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003742:	bf06      	itte	eq
 8003744:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003748:	ea91 0f03 	teqeq	r1, r3
 800374c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003750:	bd30      	pop	{r4, r5, pc}
 8003752:	bf00      	nop

08003754 <__aeabi_ui2d>:
 8003754:	f090 0f00 	teq	r0, #0
 8003758:	bf04      	itt	eq
 800375a:	2100      	moveq	r1, #0
 800375c:	4770      	bxeq	lr
 800375e:	b530      	push	{r4, r5, lr}
 8003760:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003764:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003768:	f04f 0500 	mov.w	r5, #0
 800376c:	f04f 0100 	mov.w	r1, #0
 8003770:	e750      	b.n	8003614 <__adddf3+0x138>
 8003772:	bf00      	nop

08003774 <__aeabi_i2d>:
 8003774:	f090 0f00 	teq	r0, #0
 8003778:	bf04      	itt	eq
 800377a:	2100      	moveq	r1, #0
 800377c:	4770      	bxeq	lr
 800377e:	b530      	push	{r4, r5, lr}
 8003780:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003784:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003788:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800378c:	bf48      	it	mi
 800378e:	4240      	negmi	r0, r0
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	e73e      	b.n	8003614 <__adddf3+0x138>
 8003796:	bf00      	nop

08003798 <__aeabi_f2d>:
 8003798:	0042      	lsls	r2, r0, #1
 800379a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800379e:	ea4f 0131 	mov.w	r1, r1, rrx
 80037a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80037a6:	bf1f      	itttt	ne
 80037a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80037ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80037b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80037b4:	4770      	bxne	lr
 80037b6:	f092 0f00 	teq	r2, #0
 80037ba:	bf14      	ite	ne
 80037bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80037c0:	4770      	bxeq	lr
 80037c2:	b530      	push	{r4, r5, lr}
 80037c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80037c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80037cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80037d0:	e720      	b.n	8003614 <__adddf3+0x138>
 80037d2:	bf00      	nop

080037d4 <__aeabi_ul2d>:
 80037d4:	ea50 0201 	orrs.w	r2, r0, r1
 80037d8:	bf08      	it	eq
 80037da:	4770      	bxeq	lr
 80037dc:	b530      	push	{r4, r5, lr}
 80037de:	f04f 0500 	mov.w	r5, #0
 80037e2:	e00a      	b.n	80037fa <__aeabi_l2d+0x16>

080037e4 <__aeabi_l2d>:
 80037e4:	ea50 0201 	orrs.w	r2, r0, r1
 80037e8:	bf08      	it	eq
 80037ea:	4770      	bxeq	lr
 80037ec:	b530      	push	{r4, r5, lr}
 80037ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80037f2:	d502      	bpl.n	80037fa <__aeabi_l2d+0x16>
 80037f4:	4240      	negs	r0, r0
 80037f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80037fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80037fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003802:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003806:	f43f aedc 	beq.w	80035c2 <__adddf3+0xe6>
 800380a:	f04f 0203 	mov.w	r2, #3
 800380e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003812:	bf18      	it	ne
 8003814:	3203      	addne	r2, #3
 8003816:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800381a:	bf18      	it	ne
 800381c:	3203      	addne	r2, #3
 800381e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003822:	f1c2 0320 	rsb	r3, r2, #32
 8003826:	fa00 fc03 	lsl.w	ip, r0, r3
 800382a:	fa20 f002 	lsr.w	r0, r0, r2
 800382e:	fa01 fe03 	lsl.w	lr, r1, r3
 8003832:	ea40 000e 	orr.w	r0, r0, lr
 8003836:	fa21 f102 	lsr.w	r1, r1, r2
 800383a:	4414      	add	r4, r2
 800383c:	e6c1      	b.n	80035c2 <__adddf3+0xe6>
 800383e:	bf00      	nop

08003840 <__errno>:
 8003840:	4b01      	ldr	r3, [pc, #4]	; (8003848 <__errno+0x8>)
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	1ffe89c4 	.word	0x1ffe89c4

0800384c <__libc_init_array>:
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <__libc_init_array+0x3c>)
 8003850:	4c0e      	ldr	r4, [pc, #56]	; (800388c <__libc_init_array+0x40>)
 8003852:	1ae4      	subs	r4, r4, r3
 8003854:	10a4      	asrs	r4, r4, #2
 8003856:	2500      	movs	r5, #0
 8003858:	461e      	mov	r6, r3
 800385a:	42a5      	cmp	r5, r4
 800385c:	d004      	beq.n	8003868 <__libc_init_array+0x1c>
 800385e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003862:	4798      	blx	r3
 8003864:	3501      	adds	r5, #1
 8003866:	e7f8      	b.n	800385a <__libc_init_array+0xe>
 8003868:	f7fd ff5c 	bl	8001724 <_init>
 800386c:	4c08      	ldr	r4, [pc, #32]	; (8003890 <__libc_init_array+0x44>)
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <__libc_init_array+0x48>)
 8003870:	1ae4      	subs	r4, r4, r3
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	2500      	movs	r5, #0
 8003876:	461e      	mov	r6, r3
 8003878:	42a5      	cmp	r5, r4
 800387a:	d004      	beq.n	8003886 <__libc_init_array+0x3a>
 800387c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003880:	4798      	blx	r3
 8003882:	3501      	adds	r5, #1
 8003884:	e7f8      	b.n	8003878 <__libc_init_array+0x2c>
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	1ffe8a00 	.word	0x1ffe8a00
 800388c:	1ffe8a00 	.word	0x1ffe8a00
 8003890:	1ffe8a00 	.word	0x1ffe8a00
 8003894:	1ffe8a00 	.word	0x1ffe8a00

08003898 <memcpy>:
 8003898:	b510      	push	{r4, lr}
 800389a:	1e43      	subs	r3, r0, #1
 800389c:	440a      	add	r2, r1
 800389e:	4291      	cmp	r1, r2
 80038a0:	d004      	beq.n	80038ac <memcpy+0x14>
 80038a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038aa:	e7f8      	b.n	800389e <memcpy+0x6>
 80038ac:	bd10      	pop	{r4, pc}

080038ae <memset>:
 80038ae:	4402      	add	r2, r0
 80038b0:	4603      	mov	r3, r0
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d002      	beq.n	80038bc <memset+0xe>
 80038b6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ba:	e7fa      	b.n	80038b2 <memset+0x4>
 80038bc:	4770      	bx	lr

080038be <__cvt>:
 80038be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80038c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80038ca:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80038cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80038d0:	461d      	mov	r5, r3
 80038d2:	bfb8      	it	lt
 80038d4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80038d8:	f027 0720 	bic.w	r7, r7, #32
 80038dc:	bfb6      	itet	lt
 80038de:	461d      	movlt	r5, r3
 80038e0:	2300      	movge	r3, #0
 80038e2:	232d      	movlt	r3, #45	; 0x2d
 80038e4:	4614      	mov	r4, r2
 80038e6:	bfb8      	it	lt
 80038e8:	4614      	movlt	r4, r2
 80038ea:	2f46      	cmp	r7, #70	; 0x46
 80038ec:	700b      	strb	r3, [r1, #0]
 80038ee:	d003      	beq.n	80038f8 <__cvt+0x3a>
 80038f0:	2f45      	cmp	r7, #69	; 0x45
 80038f2:	d103      	bne.n	80038fc <__cvt+0x3e>
 80038f4:	3601      	adds	r6, #1
 80038f6:	e001      	b.n	80038fc <__cvt+0x3e>
 80038f8:	2303      	movs	r3, #3
 80038fa:	e000      	b.n	80038fe <__cvt+0x40>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 8003902:	ab06      	add	r3, sp, #24
 8003904:	9303      	str	r3, [sp, #12]
 8003906:	ab07      	add	r3, sp, #28
 8003908:	9304      	str	r3, [sp, #16]
 800390a:	4622      	mov	r2, r4
 800390c:	462b      	mov	r3, r5
 800390e:	f000 fdeb 	bl	80044e8 <_dtoa_r>
 8003912:	2f47      	cmp	r7, #71	; 0x47
 8003914:	4680      	mov	r8, r0
 8003916:	d102      	bne.n	800391e <__cvt+0x60>
 8003918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800391a:	07db      	lsls	r3, r3, #31
 800391c:	d526      	bpl.n	800396c <__cvt+0xae>
 800391e:	2f46      	cmp	r7, #70	; 0x46
 8003920:	eb08 0906 	add.w	r9, r8, r6
 8003924:	d111      	bne.n	800394a <__cvt+0x8c>
 8003926:	f898 3000 	ldrb.w	r3, [r8]
 800392a:	2b30      	cmp	r3, #48	; 0x30
 800392c:	d10a      	bne.n	8003944 <__cvt+0x86>
 800392e:	4620      	mov	r0, r4
 8003930:	4629      	mov	r1, r5
 8003932:	2200      	movs	r2, #0
 8003934:	2300      	movs	r3, #0
 8003936:	f002 fb4d 	bl	8005fd4 <__aeabi_dcmpeq>
 800393a:	b918      	cbnz	r0, 8003944 <__cvt+0x86>
 800393c:	f1c6 0601 	rsb	r6, r6, #1
 8003940:	f8ca 6000 	str.w	r6, [sl]
 8003944:	f8da 3000 	ldr.w	r3, [sl]
 8003948:	4499      	add	r9, r3
 800394a:	4620      	mov	r0, r4
 800394c:	4629      	mov	r1, r5
 800394e:	2200      	movs	r2, #0
 8003950:	2300      	movs	r3, #0
 8003952:	f002 fb3f 	bl	8005fd4 <__aeabi_dcmpeq>
 8003956:	b108      	cbz	r0, 800395c <__cvt+0x9e>
 8003958:	f8cd 901c 	str.w	r9, [sp, #28]
 800395c:	9b07      	ldr	r3, [sp, #28]
 800395e:	454b      	cmp	r3, r9
 8003960:	d204      	bcs.n	800396c <__cvt+0xae>
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	9207      	str	r2, [sp, #28]
 8003966:	2230      	movs	r2, #48	; 0x30
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	e7f7      	b.n	800395c <__cvt+0x9e>
 800396c:	9b07      	ldr	r3, [sp, #28]
 800396e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003970:	ebc8 0303 	rsb	r3, r8, r3
 8003974:	4640      	mov	r0, r8
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	b008      	add	sp, #32
 800397a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800397e <__exponent>:
 800397e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003980:	4603      	mov	r3, r0
 8003982:	2900      	cmp	r1, #0
 8003984:	bfb8      	it	lt
 8003986:	4249      	neglt	r1, r1
 8003988:	f803 2b02 	strb.w	r2, [r3], #2
 800398c:	bfb4      	ite	lt
 800398e:	222d      	movlt	r2, #45	; 0x2d
 8003990:	222b      	movge	r2, #43	; 0x2b
 8003992:	2909      	cmp	r1, #9
 8003994:	7042      	strb	r2, [r0, #1]
 8003996:	dd19      	ble.n	80039cc <__exponent+0x4e>
 8003998:	f10d 0407 	add.w	r4, sp, #7
 800399c:	4626      	mov	r6, r4
 800399e:	220a      	movs	r2, #10
 80039a0:	fb91 f5f2 	sdiv	r5, r1, r2
 80039a4:	fb02 1115 	mls	r1, r2, r5, r1
 80039a8:	3130      	adds	r1, #48	; 0x30
 80039aa:	2d09      	cmp	r5, #9
 80039ac:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80039b0:	4629      	mov	r1, r5
 80039b2:	dcf4      	bgt.n	800399e <__exponent+0x20>
 80039b4:	3130      	adds	r1, #48	; 0x30
 80039b6:	1e65      	subs	r5, r4, #1
 80039b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80039bc:	42b5      	cmp	r5, r6
 80039be:	461a      	mov	r2, r3
 80039c0:	d20a      	bcs.n	80039d8 <__exponent+0x5a>
 80039c2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80039c6:	f803 2b01 	strb.w	r2, [r3], #1
 80039ca:	e7f7      	b.n	80039bc <__exponent+0x3e>
 80039cc:	2430      	movs	r4, #48	; 0x30
 80039ce:	461a      	mov	r2, r3
 80039d0:	4421      	add	r1, r4
 80039d2:	f802 4b02 	strb.w	r4, [r2], #2
 80039d6:	7059      	strb	r1, [r3, #1]
 80039d8:	1a10      	subs	r0, r2, r0
 80039da:	b002      	add	sp, #8
 80039dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080039e0 <_printf_float>:
 80039e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e4:	b091      	sub	sp, #68	; 0x44
 80039e6:	468b      	mov	fp, r1
 80039e8:	4615      	mov	r5, r2
 80039ea:	461e      	mov	r6, r3
 80039ec:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80039ee:	4604      	mov	r4, r0
 80039f0:	f001 fb3e 	bl	8005070 <_localeconv_r>
 80039f4:	f8d0 a000 	ldr.w	sl, [r0]
 80039f8:	4650      	mov	r0, sl
 80039fa:	f000 fc8d 	bl	8004318 <strlen>
 80039fe:	2300      	movs	r3, #0
 8003a00:	930e      	str	r3, [sp, #56]	; 0x38
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	9009      	str	r0, [sp, #36]	; 0x24
 8003a06:	3307      	adds	r3, #7
 8003a08:	f023 0307 	bic.w	r3, r3, #7
 8003a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a10:	f103 0208 	add.w	r2, r3, #8
 8003a14:	f89b 8018 	ldrb.w	r8, [fp, #24]
 8003a18:	603a      	str	r2, [r7, #0]
 8003a1a:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8003a1e:	f000 fbed 	bl	80041fc <__fpclassifyd>
 8003a22:	2801      	cmp	r0, #1
 8003a24:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8003a28:	d119      	bne.n	8003a5e <_printf_float+0x7e>
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f002 fadb 	bl	8005fe8 <__aeabi_dcmplt>
 8003a32:	b110      	cbz	r0, 8003a3a <_printf_float+0x5a>
 8003a34:	232d      	movs	r3, #45	; 0x2d
 8003a36:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8003a3a:	4ba0      	ldr	r3, [pc, #640]	; (8003cbc <_printf_float+0x2dc>)
 8003a3c:	4fa0      	ldr	r7, [pc, #640]	; (8003cc0 <_printf_float+0x2e0>)
 8003a3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a42:	bf88      	it	hi
 8003a44:	461f      	movhi	r7, r3
 8003a46:	2303      	movs	r3, #3
 8003a48:	f8cb 3010 	str.w	r3, [fp, #16]
 8003a4c:	f8db 3000 	ldr.w	r3, [fp]
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	f8cb 3000 	str.w	r3, [fp]
 8003a58:	f04f 0900 	mov.w	r9, #0
 8003a5c:	e0a1      	b.n	8003ba2 <_printf_float+0x1c2>
 8003a5e:	f000 fbcd 	bl	80041fc <__fpclassifyd>
 8003a62:	f8db 3000 	ldr.w	r3, [fp]
 8003a66:	b948      	cbnz	r0, 8003a7c <_printf_float+0x9c>
 8003a68:	4a96      	ldr	r2, [pc, #600]	; (8003cc4 <_printf_float+0x2e4>)
 8003a6a:	4f97      	ldr	r7, [pc, #604]	; (8003cc8 <_printf_float+0x2e8>)
 8003a6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a70:	bf88      	it	hi
 8003a72:	4617      	movhi	r7, r2
 8003a74:	2203      	movs	r2, #3
 8003a76:	f8cb 2010 	str.w	r2, [fp, #16]
 8003a7a:	e7e9      	b.n	8003a50 <_printf_float+0x70>
 8003a7c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8003a80:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 8003a84:	1c57      	adds	r7, r2, #1
 8003a86:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003a8a:	d101      	bne.n	8003a90 <_printf_float+0xb0>
 8003a8c:	2206      	movs	r2, #6
 8003a8e:	e009      	b.n	8003aa4 <_printf_float+0xc4>
 8003a90:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003a94:	d002      	beq.n	8003a9c <_printf_float+0xbc>
 8003a96:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a9a:	d105      	bne.n	8003aa8 <_printf_float+0xc8>
 8003a9c:	2a00      	cmp	r2, #0
 8003a9e:	f040 81c7 	bne.w	8003e30 <_printf_float+0x450>
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f8cb 2004 	str.w	r2, [fp, #4]
 8003aa8:	f8db 2004 	ldr.w	r2, [fp, #4]
 8003aac:	f8cd 8010 	str.w	r8, [sp, #16]
 8003ab0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ab4:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003ab8:	f8cb 3000 	str.w	r3, [fp]
 8003abc:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003ac0:	9302      	str	r3, [sp, #8]
 8003ac2:	ab0d      	add	r3, sp, #52	; 0x34
 8003ac4:	9303      	str	r3, [sp, #12]
 8003ac6:	ab0e      	add	r3, sp, #56	; 0x38
 8003ac8:	9305      	str	r3, [sp, #20]
 8003aca:	2300      	movs	r3, #0
 8003acc:	9306      	str	r3, [sp, #24]
 8003ace:	4620      	mov	r0, r4
 8003ad0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ad4:	f7ff fef3 	bl	80038be <__cvt>
 8003ad8:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003adc:	2b47      	cmp	r3, #71	; 0x47
 8003ade:	4607      	mov	r7, r0
 8003ae0:	d10a      	bne.n	8003af8 <_printf_float+0x118>
 8003ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ae4:	1cd8      	adds	r0, r3, #3
 8003ae6:	db03      	blt.n	8003af0 <_printf_float+0x110>
 8003ae8:	f8db 2004 	ldr.w	r2, [fp, #4]
 8003aec:	4293      	cmp	r3, r2
 8003aee:	dd37      	ble.n	8003b60 <_printf_float+0x180>
 8003af0:	f1a8 0802 	sub.w	r8, r8, #2
 8003af4:	fa5f f888 	uxtb.w	r8, r8
 8003af8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003afc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003afe:	d815      	bhi.n	8003b2c <_printf_float+0x14c>
 8003b00:	3901      	subs	r1, #1
 8003b02:	4642      	mov	r2, r8
 8003b04:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 8003b08:	910d      	str	r1, [sp, #52]	; 0x34
 8003b0a:	f7ff ff38 	bl	800397e <__exponent>
 8003b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b10:	1883      	adds	r3, r0, r2
 8003b12:	2a01      	cmp	r2, #1
 8003b14:	4681      	mov	r9, r0
 8003b16:	f8cb 3010 	str.w	r3, [fp, #16]
 8003b1a:	dc03      	bgt.n	8003b24 <_printf_float+0x144>
 8003b1c:	f8db 2000 	ldr.w	r2, [fp]
 8003b20:	07d1      	lsls	r1, r2, #31
 8003b22:	d538      	bpl.n	8003b96 <_printf_float+0x1b6>
 8003b24:	3301      	adds	r3, #1
 8003b26:	f8cb 3010 	str.w	r3, [fp, #16]
 8003b2a:	e034      	b.n	8003b96 <_printf_float+0x1b6>
 8003b2c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003b30:	d118      	bne.n	8003b64 <_printf_float+0x184>
 8003b32:	2900      	cmp	r1, #0
 8003b34:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003b38:	dd09      	ble.n	8003b4e <_printf_float+0x16e>
 8003b3a:	f8cb 1010 	str.w	r1, [fp, #16]
 8003b3e:	b91b      	cbnz	r3, 8003b48 <_printf_float+0x168>
 8003b40:	f8db 2000 	ldr.w	r2, [fp]
 8003b44:	07d2      	lsls	r2, r2, #31
 8003b46:	d521      	bpl.n	8003b8c <_printf_float+0x1ac>
 8003b48:	3301      	adds	r3, #1
 8003b4a:	440b      	add	r3, r1
 8003b4c:	e01c      	b.n	8003b88 <_printf_float+0x1a8>
 8003b4e:	b91b      	cbnz	r3, 8003b58 <_printf_float+0x178>
 8003b50:	f8db 2000 	ldr.w	r2, [fp]
 8003b54:	07d0      	lsls	r0, r2, #31
 8003b56:	d501      	bpl.n	8003b5c <_printf_float+0x17c>
 8003b58:	3302      	adds	r3, #2
 8003b5a:	e015      	b.n	8003b88 <_printf_float+0x1a8>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e013      	b.n	8003b88 <_printf_float+0x1a8>
 8003b60:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	db07      	blt.n	8003b7c <_printf_float+0x19c>
 8003b6c:	f8db 2000 	ldr.w	r2, [fp]
 8003b70:	f8cb 3010 	str.w	r3, [fp, #16]
 8003b74:	07d1      	lsls	r1, r2, #31
 8003b76:	d509      	bpl.n	8003b8c <_printf_float+0x1ac>
 8003b78:	3301      	adds	r3, #1
 8003b7a:	e005      	b.n	8003b88 <_printf_float+0x1a8>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bfd4      	ite	le
 8003b80:	f1c3 0302 	rsble	r3, r3, #2
 8003b84:	2301      	movgt	r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	f8cb 3010 	str.w	r3, [fp, #16]
 8003b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b8e:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8003b92:	f04f 0900 	mov.w	r9, #0
 8003b96:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003b9a:	b113      	cbz	r3, 8003ba2 <_printf_float+0x1c2>
 8003b9c:	232d      	movs	r3, #45	; 0x2d
 8003b9e:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8003ba2:	9600      	str	r6, [sp, #0]
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	4659      	mov	r1, fp
 8003ba8:	aa0f      	add	r2, sp, #60	; 0x3c
 8003baa:	462b      	mov	r3, r5
 8003bac:	f000 f95c 	bl	8003e68 <_printf_common>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d102      	bne.n	8003bba <_printf_float+0x1da>
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	e152      	b.n	8003e60 <_printf_float+0x480>
 8003bba:	f8db 3000 	ldr.w	r3, [fp]
 8003bbe:	055a      	lsls	r2, r3, #21
 8003bc0:	d405      	bmi.n	8003bce <_printf_float+0x1ee>
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	463a      	mov	r2, r7
 8003bc8:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003bcc:	e108      	b.n	8003de0 <_printf_float+0x400>
 8003bce:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003bd2:	f240 80d0 	bls.w	8003d76 <_printf_float+0x396>
 8003bd6:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f002 f9f9 	bl	8005fd4 <__aeabi_dcmpeq>
 8003be2:	b350      	cbz	r0, 8003c3a <_printf_float+0x25a>
 8003be4:	4620      	mov	r0, r4
 8003be6:	4629      	mov	r1, r5
 8003be8:	4a38      	ldr	r2, [pc, #224]	; (8003ccc <_printf_float+0x2ec>)
 8003bea:	2301      	movs	r3, #1
 8003bec:	47b0      	blx	r6
 8003bee:	3001      	adds	r0, #1
 8003bf0:	d0e0      	beq.n	8003bb4 <_printf_float+0x1d4>
 8003bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	db09      	blt.n	8003c0e <_printf_float+0x22e>
 8003bfa:	f8db 3000 	ldr.w	r3, [fp]
 8003bfe:	07d8      	lsls	r0, r3, #31
 8003c00:	d405      	bmi.n	8003c0e <_printf_float+0x22e>
 8003c02:	f8db 3000 	ldr.w	r3, [fp]
 8003c06:	079f      	lsls	r7, r3, #30
 8003c08:	f100 8110 	bmi.w	8003e2c <_printf_float+0x44c>
 8003c0c:	e107      	b.n	8003e1e <_printf_float+0x43e>
 8003c0e:	4620      	mov	r0, r4
 8003c10:	4629      	mov	r1, r5
 8003c12:	4652      	mov	r2, sl
 8003c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c16:	47b0      	blx	r6
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d0cb      	beq.n	8003bb4 <_printf_float+0x1d4>
 8003c1c:	2700      	movs	r7, #0
 8003c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c20:	3b01      	subs	r3, #1
 8003c22:	429f      	cmp	r7, r3
 8003c24:	daed      	bge.n	8003c02 <_printf_float+0x222>
 8003c26:	4620      	mov	r0, r4
 8003c28:	4629      	mov	r1, r5
 8003c2a:	f10b 021a 	add.w	r2, fp, #26
 8003c2e:	2301      	movs	r3, #1
 8003c30:	47b0      	blx	r6
 8003c32:	3001      	adds	r0, #1
 8003c34:	d0be      	beq.n	8003bb4 <_printf_float+0x1d4>
 8003c36:	3701      	adds	r7, #1
 8003c38:	e7f1      	b.n	8003c1e <_printf_float+0x23e>
 8003c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	dc29      	bgt.n	8003c94 <_printf_float+0x2b4>
 8003c40:	4620      	mov	r0, r4
 8003c42:	4629      	mov	r1, r5
 8003c44:	4a21      	ldr	r2, [pc, #132]	; (8003ccc <_printf_float+0x2ec>)
 8003c46:	2301      	movs	r3, #1
 8003c48:	47b0      	blx	r6
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d0b2      	beq.n	8003bb4 <_printf_float+0x1d4>
 8003c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c50:	b92b      	cbnz	r3, 8003c5e <_printf_float+0x27e>
 8003c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c54:	b91b      	cbnz	r3, 8003c5e <_printf_float+0x27e>
 8003c56:	f8db 3000 	ldr.w	r3, [fp]
 8003c5a:	07d9      	lsls	r1, r3, #31
 8003c5c:	d5d1      	bpl.n	8003c02 <_printf_float+0x222>
 8003c5e:	4620      	mov	r0, r4
 8003c60:	4629      	mov	r1, r5
 8003c62:	4652      	mov	r2, sl
 8003c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c66:	47b0      	blx	r6
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d0a3      	beq.n	8003bb4 <_printf_float+0x1d4>
 8003c6c:	f04f 0800 	mov.w	r8, #0
 8003c70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c72:	425b      	negs	r3, r3
 8003c74:	4598      	cmp	r8, r3
 8003c76:	4620      	mov	r0, r4
 8003c78:	4629      	mov	r1, r5
 8003c7a:	da08      	bge.n	8003c8e <_printf_float+0x2ae>
 8003c7c:	f10b 021a 	add.w	r2, fp, #26
 8003c80:	2301      	movs	r3, #1
 8003c82:	47b0      	blx	r6
 8003c84:	3001      	adds	r0, #1
 8003c86:	d095      	beq.n	8003bb4 <_printf_float+0x1d4>
 8003c88:	f108 0801 	add.w	r8, r8, #1
 8003c8c:	e7f0      	b.n	8003c70 <_printf_float+0x290>
 8003c8e:	463a      	mov	r2, r7
 8003c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c92:	e0a5      	b.n	8003de0 <_printf_float+0x400>
 8003c94:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 8003c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	bfa8      	it	ge
 8003c9e:	461a      	movge	r2, r3
 8003ca0:	2a00      	cmp	r2, #0
 8003ca2:	4691      	mov	r9, r2
 8003ca4:	dc02      	bgt.n	8003cac <_printf_float+0x2cc>
 8003ca6:	f04f 0800 	mov.w	r8, #0
 8003caa:	e01c      	b.n	8003ce6 <_printf_float+0x306>
 8003cac:	4620      	mov	r0, r4
 8003cae:	4629      	mov	r1, r5
 8003cb0:	463a      	mov	r2, r7
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	47b0      	blx	r6
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d1f5      	bne.n	8003ca6 <_printf_float+0x2c6>
 8003cba:	e77b      	b.n	8003bb4 <_printf_float+0x1d4>
 8003cbc:	08006a06 	.word	0x08006a06
 8003cc0:	08006a02 	.word	0x08006a02
 8003cc4:	08006a0e 	.word	0x08006a0e
 8003cc8:	08006a0a 	.word	0x08006a0a
 8003ccc:	08006a12 	.word	0x08006a12
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	f10b 021a 	add.w	r2, fp, #26
 8003cd8:	2301      	movs	r3, #1
 8003cda:	47b0      	blx	r6
 8003cdc:	3001      	adds	r0, #1
 8003cde:	f43f af69 	beq.w	8003bb4 <_printf_float+0x1d4>
 8003ce2:	f108 0801 	add.w	r8, r8, #1
 8003ce6:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8003cea:	f1b9 0f00 	cmp.w	r9, #0
 8003cee:	bfac      	ite	ge
 8003cf0:	ebc9 0203 	rsbge	r2, r9, r3
 8003cf4:	461a      	movlt	r2, r3
 8003cf6:	4590      	cmp	r8, r2
 8003cf8:	dbea      	blt.n	8003cd0 <_printf_float+0x2f0>
 8003cfa:	eb07 0803 	add.w	r8, r7, r3
 8003cfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d02:	429a      	cmp	r2, r3
 8003d04:	db10      	blt.n	8003d28 <_printf_float+0x348>
 8003d06:	f8db 3000 	ldr.w	r3, [fp]
 8003d0a:	07da      	lsls	r2, r3, #31
 8003d0c:	d40c      	bmi.n	8003d28 <_printf_float+0x348>
 8003d0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d10:	4417      	add	r7, r2
 8003d12:	ebc8 0307 	rsb	r3, r8, r7
 8003d16:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003d18:	1bd2      	subs	r2, r2, r7
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	bfa8      	it	ge
 8003d1e:	4613      	movge	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	461f      	mov	r7, r3
 8003d24:	dc08      	bgt.n	8003d38 <_printf_float+0x358>
 8003d26:	e00e      	b.n	8003d46 <_printf_float+0x366>
 8003d28:	4620      	mov	r0, r4
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	4652      	mov	r2, sl
 8003d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d30:	47b0      	blx	r6
 8003d32:	3001      	adds	r0, #1
 8003d34:	d1eb      	bne.n	8003d0e <_printf_float+0x32e>
 8003d36:	e73d      	b.n	8003bb4 <_printf_float+0x1d4>
 8003d38:	4620      	mov	r0, r4
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	47b0      	blx	r6
 8003d40:	3001      	adds	r0, #1
 8003d42:	f43f af37 	beq.w	8003bb4 <_printf_float+0x1d4>
 8003d46:	f04f 0800 	mov.w	r8, #0
 8003d4a:	e00a      	b.n	8003d62 <_printf_float+0x382>
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	4629      	mov	r1, r5
 8003d50:	f10b 021a 	add.w	r2, fp, #26
 8003d54:	2301      	movs	r3, #1
 8003d56:	47b0      	blx	r6
 8003d58:	3001      	adds	r0, #1
 8003d5a:	f43f af2b 	beq.w	8003bb4 <_printf_float+0x1d4>
 8003d5e:	f108 0801 	add.w	r8, r8, #1
 8003d62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d66:	2f00      	cmp	r7, #0
 8003d68:	eba3 0302 	sub.w	r3, r3, r2
 8003d6c:	bfa8      	it	ge
 8003d6e:	1bdb      	subge	r3, r3, r7
 8003d70:	4598      	cmp	r8, r3
 8003d72:	dbeb      	blt.n	8003d4c <_printf_float+0x36c>
 8003d74:	e745      	b.n	8003c02 <_printf_float+0x222>
 8003d76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d78:	2a01      	cmp	r2, #1
 8003d7a:	dc01      	bgt.n	8003d80 <_printf_float+0x3a0>
 8003d7c:	07db      	lsls	r3, r3, #31
 8003d7e:	d536      	bpl.n	8003dee <_printf_float+0x40e>
 8003d80:	4620      	mov	r0, r4
 8003d82:	4629      	mov	r1, r5
 8003d84:	463a      	mov	r2, r7
 8003d86:	2301      	movs	r3, #1
 8003d88:	47b0      	blx	r6
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	f43f af12 	beq.w	8003bb4 <_printf_float+0x1d4>
 8003d90:	4620      	mov	r0, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	4652      	mov	r2, sl
 8003d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d98:	47b0      	blx	r6
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	f43f af0a 	beq.w	8003bb4 <_printf_float+0x1d4>
 8003da0:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8003da4:	2200      	movs	r2, #0
 8003da6:	2300      	movs	r3, #0
 8003da8:	f002 f914 	bl	8005fd4 <__aeabi_dcmpeq>
 8003dac:	b9e8      	cbnz	r0, 8003dea <_printf_float+0x40a>
 8003dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003db0:	4620      	mov	r0, r4
 8003db2:	4629      	mov	r1, r5
 8003db4:	1c7a      	adds	r2, r7, #1
 8003db6:	3b01      	subs	r3, #1
 8003db8:	e01d      	b.n	8003df6 <_printf_float+0x416>
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f10b 021a 	add.w	r2, fp, #26
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	47b0      	blx	r6
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	f43f aef4 	beq.w	8003bb4 <_printf_float+0x1d4>
 8003dcc:	3701      	adds	r7, #1
 8003dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	429f      	cmp	r7, r3
 8003dd4:	dbf1      	blt.n	8003dba <_printf_float+0x3da>
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	4629      	mov	r1, r5
 8003dda:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8003dde:	464b      	mov	r3, r9
 8003de0:	47b0      	blx	r6
 8003de2:	3001      	adds	r0, #1
 8003de4:	f47f af0d 	bne.w	8003c02 <_printf_float+0x222>
 8003de8:	e6e4      	b.n	8003bb4 <_printf_float+0x1d4>
 8003dea:	2700      	movs	r7, #0
 8003dec:	e7ef      	b.n	8003dce <_printf_float+0x3ee>
 8003dee:	4620      	mov	r0, r4
 8003df0:	4629      	mov	r1, r5
 8003df2:	463a      	mov	r2, r7
 8003df4:	2301      	movs	r3, #1
 8003df6:	47b0      	blx	r6
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d1ec      	bne.n	8003dd6 <_printf_float+0x3f6>
 8003dfc:	e6da      	b.n	8003bb4 <_printf_float+0x1d4>
 8003dfe:	4620      	mov	r0, r4
 8003e00:	4629      	mov	r1, r5
 8003e02:	f10b 0219 	add.w	r2, fp, #25
 8003e06:	2301      	movs	r3, #1
 8003e08:	47b0      	blx	r6
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	f43f aed2 	beq.w	8003bb4 <_printf_float+0x1d4>
 8003e10:	3701      	adds	r7, #1
 8003e12:	f8db 300c 	ldr.w	r3, [fp, #12]
 8003e16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	429f      	cmp	r7, r3
 8003e1c:	dbef      	blt.n	8003dfe <_printf_float+0x41e>
 8003e1e:	f8db 000c 	ldr.w	r0, [fp, #12]
 8003e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e24:	4298      	cmp	r0, r3
 8003e26:	bfb8      	it	lt
 8003e28:	4618      	movlt	r0, r3
 8003e2a:	e019      	b.n	8003e60 <_printf_float+0x480>
 8003e2c:	2700      	movs	r7, #0
 8003e2e:	e7f0      	b.n	8003e12 <_printf_float+0x432>
 8003e30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e34:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003e38:	f8cb 3000 	str.w	r3, [fp]
 8003e3c:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003e40:	9302      	str	r3, [sp, #8]
 8003e42:	ab0d      	add	r3, sp, #52	; 0x34
 8003e44:	9303      	str	r3, [sp, #12]
 8003e46:	ab0e      	add	r3, sp, #56	; 0x38
 8003e48:	9305      	str	r3, [sp, #20]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9306      	str	r3, [sp, #24]
 8003e4e:	f8cd 8010 	str.w	r8, [sp, #16]
 8003e52:	4620      	mov	r0, r4
 8003e54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003e58:	f7ff fd31 	bl	80038be <__cvt>
 8003e5c:	4607      	mov	r7, r0
 8003e5e:	e640      	b.n	8003ae2 <_printf_float+0x102>
 8003e60:	b011      	add	sp, #68	; 0x44
 8003e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e66:	bf00      	nop

08003e68 <_printf_common>:
 8003e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e6c:	4691      	mov	r9, r2
 8003e6e:	461f      	mov	r7, r3
 8003e70:	688a      	ldr	r2, [r1, #8]
 8003e72:	690b      	ldr	r3, [r1, #16]
 8003e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	bfb8      	it	lt
 8003e7c:	4613      	movlt	r3, r2
 8003e7e:	f8c9 3000 	str.w	r3, [r9]
 8003e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e86:	4606      	mov	r6, r0
 8003e88:	460c      	mov	r4, r1
 8003e8a:	b112      	cbz	r2, 8003e92 <_printf_common+0x2a>
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	f8c9 3000 	str.w	r3, [r9]
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	0699      	lsls	r1, r3, #26
 8003e96:	bf42      	ittt	mi
 8003e98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e9c:	3302      	addmi	r3, #2
 8003e9e:	f8c9 3000 	strmi.w	r3, [r9]
 8003ea2:	6825      	ldr	r5, [r4, #0]
 8003ea4:	f015 0506 	ands.w	r5, r5, #6
 8003ea8:	d01c      	beq.n	8003ee4 <_printf_common+0x7c>
 8003eaa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003eae:	6822      	ldr	r2, [r4, #0]
 8003eb0:	3300      	adds	r3, #0
 8003eb2:	bf18      	it	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	0692      	lsls	r2, r2, #26
 8003eb8:	d51f      	bpl.n	8003efa <_printf_common+0x92>
 8003eba:	18e1      	adds	r1, r4, r3
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	2030      	movs	r0, #48	; 0x30
 8003ec0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ec4:	4422      	add	r2, r4
 8003ec6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ece:	3302      	adds	r3, #2
 8003ed0:	e013      	b.n	8003efa <_printf_common+0x92>
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	4639      	mov	r1, r7
 8003ed6:	f104 0219 	add.w	r2, r4, #25
 8003eda:	2301      	movs	r3, #1
 8003edc:	47c0      	blx	r8
 8003ede:	3001      	adds	r0, #1
 8003ee0:	d007      	beq.n	8003ef2 <_printf_common+0x8a>
 8003ee2:	3501      	adds	r5, #1
 8003ee4:	68e3      	ldr	r3, [r4, #12]
 8003ee6:	f8d9 2000 	ldr.w	r2, [r9]
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	429d      	cmp	r5, r3
 8003eee:	dbf0      	blt.n	8003ed2 <_printf_common+0x6a>
 8003ef0:	e7db      	b.n	8003eaa <_printf_common+0x42>
 8003ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003efa:	4630      	mov	r0, r6
 8003efc:	4639      	mov	r1, r7
 8003efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f02:	47c0      	blx	r8
 8003f04:	3001      	adds	r0, #1
 8003f06:	d0f4      	beq.n	8003ef2 <_printf_common+0x8a>
 8003f08:	6822      	ldr	r2, [r4, #0]
 8003f0a:	f8d9 5000 	ldr.w	r5, [r9]
 8003f0e:	68e3      	ldr	r3, [r4, #12]
 8003f10:	f002 0206 	and.w	r2, r2, #6
 8003f14:	2a04      	cmp	r2, #4
 8003f16:	bf08      	it	eq
 8003f18:	1b5d      	subeq	r5, r3, r5
 8003f1a:	6922      	ldr	r2, [r4, #16]
 8003f1c:	68a3      	ldr	r3, [r4, #8]
 8003f1e:	bf0c      	ite	eq
 8003f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f24:	2500      	movne	r5, #0
 8003f26:	4293      	cmp	r3, r2
 8003f28:	bfc4      	itt	gt
 8003f2a:	1a9b      	subgt	r3, r3, r2
 8003f2c:	18ed      	addgt	r5, r5, r3
 8003f2e:	f04f 0900 	mov.w	r9, #0
 8003f32:	45a9      	cmp	r9, r5
 8003f34:	da0a      	bge.n	8003f4c <_printf_common+0xe4>
 8003f36:	4630      	mov	r0, r6
 8003f38:	4639      	mov	r1, r7
 8003f3a:	f104 021a 	add.w	r2, r4, #26
 8003f3e:	2301      	movs	r3, #1
 8003f40:	47c0      	blx	r8
 8003f42:	3001      	adds	r0, #1
 8003f44:	d0d5      	beq.n	8003ef2 <_printf_common+0x8a>
 8003f46:	f109 0901 	add.w	r9, r9, #1
 8003f4a:	e7f2      	b.n	8003f32 <_printf_common+0xca>
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08003f54 <_printf_i>:
 8003f54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003f58:	460c      	mov	r4, r1
 8003f5a:	4617      	mov	r7, r2
 8003f5c:	7e22      	ldrb	r2, [r4, #24]
 8003f5e:	2a6e      	cmp	r2, #110	; 0x6e
 8003f60:	4698      	mov	r8, r3
 8003f62:	4606      	mov	r6, r0
 8003f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f66:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8003f6a:	f000 80a9 	beq.w	80040c0 <_printf_i+0x16c>
 8003f6e:	d812      	bhi.n	8003f96 <_printf_i+0x42>
 8003f70:	2a63      	cmp	r2, #99	; 0x63
 8003f72:	d023      	beq.n	8003fbc <_printf_i+0x68>
 8003f74:	d80a      	bhi.n	8003f8c <_printf_i+0x38>
 8003f76:	2a00      	cmp	r2, #0
 8003f78:	f000 80b6 	beq.w	80040e8 <_printf_i+0x194>
 8003f7c:	2a58      	cmp	r2, #88	; 0x58
 8003f7e:	f040 80c5 	bne.w	800410c <_printf_i+0x1b8>
 8003f82:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003f86:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8004180 <_printf_i+0x22c>
 8003f8a:	e051      	b.n	8004030 <_printf_i+0xdc>
 8003f8c:	2a64      	cmp	r2, #100	; 0x64
 8003f8e:	d01e      	beq.n	8003fce <_printf_i+0x7a>
 8003f90:	2a69      	cmp	r2, #105	; 0x69
 8003f92:	d01c      	beq.n	8003fce <_printf_i+0x7a>
 8003f94:	e0ba      	b.n	800410c <_printf_i+0x1b8>
 8003f96:	2a73      	cmp	r2, #115	; 0x73
 8003f98:	f000 80aa 	beq.w	80040f0 <_printf_i+0x19c>
 8003f9c:	d809      	bhi.n	8003fb2 <_printf_i+0x5e>
 8003f9e:	2a6f      	cmp	r2, #111	; 0x6f
 8003fa0:	d02b      	beq.n	8003ffa <_printf_i+0xa6>
 8003fa2:	2a70      	cmp	r2, #112	; 0x70
 8003fa4:	f040 80b2 	bne.w	800410c <_printf_i+0x1b8>
 8003fa8:	6822      	ldr	r2, [r4, #0]
 8003faa:	f042 0220 	orr.w	r2, r2, #32
 8003fae:	6022      	str	r2, [r4, #0]
 8003fb0:	e039      	b.n	8004026 <_printf_i+0xd2>
 8003fb2:	2a75      	cmp	r2, #117	; 0x75
 8003fb4:	d021      	beq.n	8003ffa <_printf_i+0xa6>
 8003fb6:	2a78      	cmp	r2, #120	; 0x78
 8003fb8:	d035      	beq.n	8004026 <_printf_i+0xd2>
 8003fba:	e0a7      	b.n	800410c <_printf_i+0x1b8>
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	1d11      	adds	r1, r2, #4
 8003fc0:	6019      	str	r1, [r3, #0]
 8003fc2:	6813      	ldr	r3, [r2, #0]
 8003fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fcc:	e0a2      	b.n	8004114 <_printf_i+0x1c0>
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003fd6:	d003      	beq.n	8003fe0 <_printf_i+0x8c>
 8003fd8:	1d10      	adds	r0, r2, #4
 8003fda:	6018      	str	r0, [r3, #0]
 8003fdc:	6813      	ldr	r3, [r2, #0]
 8003fde:	e005      	b.n	8003fec <_printf_i+0x98>
 8003fe0:	0645      	lsls	r5, r0, #25
 8003fe2:	d5f9      	bpl.n	8003fd8 <_printf_i+0x84>
 8003fe4:	1d10      	adds	r0, r2, #4
 8003fe6:	6018      	str	r0, [r3, #0]
 8003fe8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da3b      	bge.n	8004068 <_printf_i+0x114>
 8003ff0:	222d      	movs	r2, #45	; 0x2d
 8003ff2:	425b      	negs	r3, r3
 8003ff4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ff8:	e036      	b.n	8004068 <_printf_i+0x114>
 8003ffa:	6820      	ldr	r0, [r4, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004002:	d003      	beq.n	800400c <_printf_i+0xb8>
 8004004:	1d10      	adds	r0, r2, #4
 8004006:	6018      	str	r0, [r3, #0]
 8004008:	6813      	ldr	r3, [r2, #0]
 800400a:	e004      	b.n	8004016 <_printf_i+0xc2>
 800400c:	0640      	lsls	r0, r0, #25
 800400e:	d5f9      	bpl.n	8004004 <_printf_i+0xb0>
 8004010:	1d10      	adds	r0, r2, #4
 8004012:	6018      	str	r0, [r3, #0]
 8004014:	8813      	ldrh	r3, [r2, #0]
 8004016:	7e22      	ldrb	r2, [r4, #24]
 8004018:	f8df e164 	ldr.w	lr, [pc, #356]	; 8004180 <_printf_i+0x22c>
 800401c:	2a6f      	cmp	r2, #111	; 0x6f
 800401e:	bf0c      	ite	eq
 8004020:	2208      	moveq	r2, #8
 8004022:	220a      	movne	r2, #10
 8004024:	e01c      	b.n	8004060 <_printf_i+0x10c>
 8004026:	2278      	movs	r2, #120	; 0x78
 8004028:	f8df e158 	ldr.w	lr, [pc, #344]	; 8004184 <_printf_i+0x230>
 800402c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004038:	f100 0504 	add.w	r5, r0, #4
 800403c:	601d      	str	r5, [r3, #0]
 800403e:	d001      	beq.n	8004044 <_printf_i+0xf0>
 8004040:	6803      	ldr	r3, [r0, #0]
 8004042:	e002      	b.n	800404a <_printf_i+0xf6>
 8004044:	0655      	lsls	r5, r2, #25
 8004046:	d5fb      	bpl.n	8004040 <_printf_i+0xec>
 8004048:	8803      	ldrh	r3, [r0, #0]
 800404a:	07d0      	lsls	r0, r2, #31
 800404c:	bf44      	itt	mi
 800404e:	f042 0220 	orrmi.w	r2, r2, #32
 8004052:	6022      	strmi	r2, [r4, #0]
 8004054:	b91b      	cbnz	r3, 800405e <_printf_i+0x10a>
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	f022 0220 	bic.w	r2, r2, #32
 800405c:	6022      	str	r2, [r4, #0]
 800405e:	2210      	movs	r2, #16
 8004060:	2000      	movs	r0, #0
 8004062:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004066:	e002      	b.n	800406e <_printf_i+0x11a>
 8004068:	f8df e114 	ldr.w	lr, [pc, #276]	; 8004180 <_printf_i+0x22c>
 800406c:	220a      	movs	r2, #10
 800406e:	6865      	ldr	r5, [r4, #4]
 8004070:	60a5      	str	r5, [r4, #8]
 8004072:	2d00      	cmp	r5, #0
 8004074:	bfa2      	ittt	ge
 8004076:	6820      	ldrge	r0, [r4, #0]
 8004078:	f020 0004 	bicge.w	r0, r0, #4
 800407c:	6020      	strge	r0, [r4, #0]
 800407e:	b903      	cbnz	r3, 8004082 <_printf_i+0x12e>
 8004080:	b165      	cbz	r5, 800409c <_printf_i+0x148>
 8004082:	460d      	mov	r5, r1
 8004084:	fbb3 f0f2 	udiv	r0, r3, r2
 8004088:	fb02 3310 	mls	r3, r2, r0, r3
 800408c:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8004090:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004094:	4603      	mov	r3, r0
 8004096:	2800      	cmp	r0, #0
 8004098:	d1f4      	bne.n	8004084 <_printf_i+0x130>
 800409a:	e000      	b.n	800409e <_printf_i+0x14a>
 800409c:	460d      	mov	r5, r1
 800409e:	2a08      	cmp	r2, #8
 80040a0:	d10b      	bne.n	80040ba <_printf_i+0x166>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	07da      	lsls	r2, r3, #31
 80040a6:	d508      	bpl.n	80040ba <_printf_i+0x166>
 80040a8:	6923      	ldr	r3, [r4, #16]
 80040aa:	6862      	ldr	r2, [r4, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	bfde      	ittt	le
 80040b0:	2330      	movle	r3, #48	; 0x30
 80040b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040ba:	1b49      	subs	r1, r1, r5
 80040bc:	6121      	str	r1, [r4, #16]
 80040be:	e02e      	b.n	800411e <_printf_i+0x1ca>
 80040c0:	6825      	ldr	r5, [r4, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	6960      	ldr	r0, [r4, #20]
 80040c6:	f015 0f80 	tst.w	r5, #128	; 0x80
 80040ca:	d003      	beq.n	80040d4 <_printf_i+0x180>
 80040cc:	1d15      	adds	r5, r2, #4
 80040ce:	601d      	str	r5, [r3, #0]
 80040d0:	6813      	ldr	r3, [r2, #0]
 80040d2:	e008      	b.n	80040e6 <_printf_i+0x192>
 80040d4:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040d8:	f102 0504 	add.w	r5, r2, #4
 80040dc:	601d      	str	r5, [r3, #0]
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	d001      	beq.n	80040e6 <_printf_i+0x192>
 80040e2:	8018      	strh	r0, [r3, #0]
 80040e4:	e000      	b.n	80040e8 <_printf_i+0x194>
 80040e6:	6018      	str	r0, [r3, #0]
 80040e8:	2300      	movs	r3, #0
 80040ea:	6123      	str	r3, [r4, #16]
 80040ec:	460d      	mov	r5, r1
 80040ee:	e016      	b.n	800411e <_printf_i+0x1ca>
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	1d11      	adds	r1, r2, #4
 80040f4:	6019      	str	r1, [r3, #0]
 80040f6:	6815      	ldr	r5, [r2, #0]
 80040f8:	6862      	ldr	r2, [r4, #4]
 80040fa:	4628      	mov	r0, r5
 80040fc:	2100      	movs	r1, #0
 80040fe:	f000 ffc3 	bl	8005088 <memchr>
 8004102:	b108      	cbz	r0, 8004108 <_printf_i+0x1b4>
 8004104:	1b40      	subs	r0, r0, r5
 8004106:	6060      	str	r0, [r4, #4]
 8004108:	6863      	ldr	r3, [r4, #4]
 800410a:	e004      	b.n	8004116 <_printf_i+0x1c2>
 800410c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004110:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004114:	2301      	movs	r3, #1
 8004116:	6123      	str	r3, [r4, #16]
 8004118:	2300      	movs	r3, #0
 800411a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800411e:	f8cd 8000 	str.w	r8, [sp]
 8004122:	4630      	mov	r0, r6
 8004124:	4621      	mov	r1, r4
 8004126:	aa03      	add	r2, sp, #12
 8004128:	463b      	mov	r3, r7
 800412a:	f7ff fe9d 	bl	8003e68 <_printf_common>
 800412e:	3001      	adds	r0, #1
 8004130:	d102      	bne.n	8004138 <_printf_i+0x1e4>
 8004132:	f04f 30ff 	mov.w	r0, #4294967295
 8004136:	e01f      	b.n	8004178 <_printf_i+0x224>
 8004138:	4630      	mov	r0, r6
 800413a:	4639      	mov	r1, r7
 800413c:	462a      	mov	r2, r5
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	47c0      	blx	r8
 8004142:	3001      	adds	r0, #1
 8004144:	d0f5      	beq.n	8004132 <_printf_i+0x1de>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	079b      	lsls	r3, r3, #30
 800414a:	d405      	bmi.n	8004158 <_printf_i+0x204>
 800414c:	68e0      	ldr	r0, [r4, #12]
 800414e:	9b03      	ldr	r3, [sp, #12]
 8004150:	4298      	cmp	r0, r3
 8004152:	bfb8      	it	lt
 8004154:	4618      	movlt	r0, r3
 8004156:	e00f      	b.n	8004178 <_printf_i+0x224>
 8004158:	2500      	movs	r5, #0
 800415a:	68e3      	ldr	r3, [r4, #12]
 800415c:	9a03      	ldr	r2, [sp, #12]
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	429d      	cmp	r5, r3
 8004162:	daf3      	bge.n	800414c <_printf_i+0x1f8>
 8004164:	4630      	mov	r0, r6
 8004166:	4639      	mov	r1, r7
 8004168:	f104 0219 	add.w	r2, r4, #25
 800416c:	2301      	movs	r3, #1
 800416e:	47c0      	blx	r8
 8004170:	3001      	adds	r0, #1
 8004172:	d0de      	beq.n	8004132 <_printf_i+0x1de>
 8004174:	3501      	adds	r5, #1
 8004176:	e7f0      	b.n	800415a <_printf_i+0x206>
 8004178:	b004      	add	sp, #16
 800417a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800417e:	bf00      	nop
 8004180:	08006a14 	.word	0x08006a14
 8004184:	08006a25 	.word	0x08006a25

08004188 <rand>:
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <rand+0x68>)
 800418a:	b510      	push	{r4, lr}
 800418c:	681c      	ldr	r4, [r3, #0]
 800418e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004190:	b9d3      	cbnz	r3, 80041c8 <rand+0x40>
 8004192:	2018      	movs	r0, #24
 8004194:	f000 ff70 	bl	8005078 <malloc>
 8004198:	f243 330e 	movw	r3, #13070	; 0x330e
 800419c:	63a0      	str	r0, [r4, #56]	; 0x38
 800419e:	8003      	strh	r3, [r0, #0]
 80041a0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80041a4:	8043      	strh	r3, [r0, #2]
 80041a6:	f241 2334 	movw	r3, #4660	; 0x1234
 80041aa:	8083      	strh	r3, [r0, #4]
 80041ac:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80041b0:	80c3      	strh	r3, [r0, #6]
 80041b2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80041b6:	8103      	strh	r3, [r0, #8]
 80041b8:	2305      	movs	r3, #5
 80041ba:	8143      	strh	r3, [r0, #10]
 80041bc:	230b      	movs	r3, #11
 80041be:	8183      	strh	r3, [r0, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	2300      	movs	r3, #0
 80041c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80041c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80041ca:	4c0a      	ldr	r4, [pc, #40]	; (80041f4 <rand+0x6c>)
 80041cc:	690b      	ldr	r3, [r1, #16]
 80041ce:	6948      	ldr	r0, [r1, #20]
 80041d0:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <rand+0x70>)
 80041d2:	435c      	muls	r4, r3
 80041d4:	fb02 4000 	mla	r0, r2, r0, r4
 80041d8:	fba3 2302 	umull	r2, r3, r3, r2
 80041dc:	3201      	adds	r2, #1
 80041de:	4403      	add	r3, r0
 80041e0:	f143 0300 	adc.w	r3, r3, #0
 80041e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80041e8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80041ec:	bd10      	pop	{r4, pc}
 80041ee:	bf00      	nop
 80041f0:	1ffe89c4 	.word	0x1ffe89c4
 80041f4:	5851f42d 	.word	0x5851f42d
 80041f8:	4c957f2d 	.word	0x4c957f2d

080041fc <__fpclassifyd>:
 80041fc:	460a      	mov	r2, r1
 80041fe:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 8004202:	b510      	push	{r4, lr}
 8004204:	4603      	mov	r3, r0
 8004206:	d01b      	beq.n	8004240 <__fpclassifyd+0x44>
 8004208:	480f      	ldr	r0, [pc, #60]	; (8004248 <__fpclassifyd+0x4c>)
 800420a:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 800420e:	4284      	cmp	r4, r0
 8004210:	d910      	bls.n	8004234 <__fpclassifyd+0x38>
 8004212:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 8004216:	480c      	ldr	r0, [pc, #48]	; (8004248 <__fpclassifyd+0x4c>)
 8004218:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800421c:	4282      	cmp	r2, r0
 800421e:	d909      	bls.n	8004234 <__fpclassifyd+0x38>
 8004220:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004224:	d308      	bcc.n	8004238 <__fpclassifyd+0x3c>
 8004226:	4a09      	ldr	r2, [pc, #36]	; (800424c <__fpclassifyd+0x50>)
 8004228:	4291      	cmp	r1, r2
 800422a:	d107      	bne.n	800423c <__fpclassifyd+0x40>
 800422c:	fab3 f083 	clz	r0, r3
 8004230:	0940      	lsrs	r0, r0, #5
 8004232:	bd10      	pop	{r4, pc}
 8004234:	2004      	movs	r0, #4
 8004236:	bd10      	pop	{r4, pc}
 8004238:	2003      	movs	r0, #3
 800423a:	bd10      	pop	{r4, pc}
 800423c:	2000      	movs	r0, #0
 800423e:	bd10      	pop	{r4, pc}
 8004240:	2800      	cmp	r0, #0
 8004242:	d1e6      	bne.n	8004212 <__fpclassifyd+0x16>
 8004244:	2002      	movs	r0, #2
 8004246:	bd10      	pop	{r4, pc}
 8004248:	7fdfffff 	.word	0x7fdfffff
 800424c:	7ff00000 	.word	0x7ff00000

08004250 <sniprintf>:
 8004250:	b40c      	push	{r2, r3}
 8004252:	b530      	push	{r4, r5, lr}
 8004254:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <sniprintf+0x60>)
 8004256:	1e0c      	subs	r4, r1, #0
 8004258:	b09d      	sub	sp, #116	; 0x74
 800425a:	681d      	ldr	r5, [r3, #0]
 800425c:	da04      	bge.n	8004268 <sniprintf+0x18>
 800425e:	238b      	movs	r3, #139	; 0x8b
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	f04f 30ff 	mov.w	r0, #4294967295
 8004266:	e01e      	b.n	80042a6 <sniprintf+0x56>
 8004268:	f44f 7302 	mov.w	r3, #520	; 0x208
 800426c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004270:	bf14      	ite	ne
 8004272:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004276:	4623      	moveq	r3, r4
 8004278:	9304      	str	r3, [sp, #16]
 800427a:	9307      	str	r3, [sp, #28]
 800427c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004280:	9002      	str	r0, [sp, #8]
 8004282:	9006      	str	r0, [sp, #24]
 8004284:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004288:	4628      	mov	r0, r5
 800428a:	ab21      	add	r3, sp, #132	; 0x84
 800428c:	a902      	add	r1, sp, #8
 800428e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	f001 fae9 	bl	8005868 <_svfiprintf_r>
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	bfbc      	itt	lt
 800429a:	238b      	movlt	r3, #139	; 0x8b
 800429c:	602b      	strlt	r3, [r5, #0]
 800429e:	b114      	cbz	r4, 80042a6 <sniprintf+0x56>
 80042a0:	9b02      	ldr	r3, [sp, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	b01d      	add	sp, #116	; 0x74
 80042a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042ac:	b002      	add	sp, #8
 80042ae:	4770      	bx	lr
 80042b0:	1ffe89c4 	.word	0x1ffe89c4

080042b4 <siprintf>:
 80042b4:	b40e      	push	{r1, r2, r3}
 80042b6:	b500      	push	{lr}
 80042b8:	b09c      	sub	sp, #112	; 0x70
 80042ba:	f44f 7102 	mov.w	r1, #520	; 0x208
 80042be:	f8ad 1014 	strh.w	r1, [sp, #20]
 80042c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042c6:	9104      	str	r1, [sp, #16]
 80042c8:	9107      	str	r1, [sp, #28]
 80042ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80042ce:	ab1d      	add	r3, sp, #116	; 0x74
 80042d0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80042d4:	4908      	ldr	r1, [pc, #32]	; (80042f8 <siprintf+0x44>)
 80042d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80042da:	9002      	str	r0, [sp, #8]
 80042dc:	9006      	str	r0, [sp, #24]
 80042de:	6808      	ldr	r0, [r1, #0]
 80042e0:	9301      	str	r3, [sp, #4]
 80042e2:	a902      	add	r1, sp, #8
 80042e4:	f001 fac0 	bl	8005868 <_svfiprintf_r>
 80042e8:	9b02      	ldr	r3, [sp, #8]
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	b01c      	add	sp, #112	; 0x70
 80042f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80042f4:	b003      	add	sp, #12
 80042f6:	4770      	bx	lr
 80042f8:	1ffe89c4 	.word	0x1ffe89c4

080042fc <strchr>:
 80042fc:	b2c9      	uxtb	r1, r1
 80042fe:	4603      	mov	r3, r0
 8004300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004304:	b11a      	cbz	r2, 800430e <strchr+0x12>
 8004306:	428a      	cmp	r2, r1
 8004308:	d1f9      	bne.n	80042fe <strchr+0x2>
 800430a:	4618      	mov	r0, r3
 800430c:	4770      	bx	lr
 800430e:	2900      	cmp	r1, #0
 8004310:	bf0c      	ite	eq
 8004312:	4618      	moveq	r0, r3
 8004314:	2000      	movne	r0, #0
 8004316:	4770      	bx	lr

08004318 <strlen>:
 8004318:	4603      	mov	r3, r0
 800431a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800431e:	2a00      	cmp	r2, #0
 8004320:	d1fb      	bne.n	800431a <strlen+0x2>
 8004322:	1a18      	subs	r0, r3, r0
 8004324:	3801      	subs	r0, #1
 8004326:	4770      	bx	lr

08004328 <strstr>:
 8004328:	b530      	push	{r4, r5, lr}
 800432a:	7803      	ldrb	r3, [r0, #0]
 800432c:	b923      	cbnz	r3, 8004338 <strstr+0x10>
 800432e:	780b      	ldrb	r3, [r1, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf18      	it	ne
 8004334:	2000      	movne	r0, #0
 8004336:	bd30      	pop	{r4, r5, pc}
 8004338:	4603      	mov	r3, r0
 800433a:	3001      	adds	r0, #1
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	b13a      	cbz	r2, 8004350 <strstr+0x28>
 8004340:	2200      	movs	r2, #0
 8004342:	5c8c      	ldrb	r4, [r1, r2]
 8004344:	b134      	cbz	r4, 8004354 <strstr+0x2c>
 8004346:	5c9d      	ldrb	r5, [r3, r2]
 8004348:	42a5      	cmp	r5, r4
 800434a:	d1f5      	bne.n	8004338 <strstr+0x10>
 800434c:	3201      	adds	r2, #1
 800434e:	e7f8      	b.n	8004342 <strstr+0x1a>
 8004350:	4610      	mov	r0, r2
 8004352:	bd30      	pop	{r4, r5, pc}
 8004354:	4618      	mov	r0, r3
 8004356:	bd30      	pop	{r4, r5, pc}

08004358 <_vsniprintf_r>:
 8004358:	b530      	push	{r4, r5, lr}
 800435a:	1e14      	subs	r4, r2, #0
 800435c:	b09b      	sub	sp, #108	; 0x6c
 800435e:	4605      	mov	r5, r0
 8004360:	da04      	bge.n	800436c <_vsniprintf_r+0x14>
 8004362:	238b      	movs	r3, #139	; 0x8b
 8004364:	6003      	str	r3, [r0, #0]
 8004366:	f04f 30ff 	mov.w	r0, #4294967295
 800436a:	e01c      	b.n	80043a6 <_vsniprintf_r+0x4e>
 800436c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8004370:	f8ad 200c 	strh.w	r2, [sp, #12]
 8004374:	bf14      	ite	ne
 8004376:	f104 32ff 	addne.w	r2, r4, #4294967295
 800437a:	4622      	moveq	r2, r4
 800437c:	9202      	str	r2, [sp, #8]
 800437e:	9205      	str	r2, [sp, #20]
 8004380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004384:	9100      	str	r1, [sp, #0]
 8004386:	9104      	str	r1, [sp, #16]
 8004388:	f8ad 200e 	strh.w	r2, [sp, #14]
 800438c:	4669      	mov	r1, sp
 800438e:	461a      	mov	r2, r3
 8004390:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004392:	f001 fa69 	bl	8005868 <_svfiprintf_r>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	bfbc      	itt	lt
 800439a:	238b      	movlt	r3, #139	; 0x8b
 800439c:	602b      	strlt	r3, [r5, #0]
 800439e:	b114      	cbz	r4, 80043a6 <_vsniprintf_r+0x4e>
 80043a0:	9b00      	ldr	r3, [sp, #0]
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	b01b      	add	sp, #108	; 0x6c
 80043a8:	bd30      	pop	{r4, r5, pc}
	...

080043ac <vsniprintf>:
 80043ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <vsniprintf+0x1c>)
 80043b2:	4606      	mov	r6, r0
 80043b4:	460d      	mov	r5, r1
 80043b6:	4614      	mov	r4, r2
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	4631      	mov	r1, r6
 80043bc:	462a      	mov	r2, r5
 80043be:	4623      	mov	r3, r4
 80043c0:	f7ff ffca 	bl	8004358 <_vsniprintf_r>
 80043c4:	b002      	add	sp, #8
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	1ffe89c4 	.word	0x1ffe89c4

080043cc <quorem>:
 80043cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d0:	6903      	ldr	r3, [r0, #16]
 80043d2:	690c      	ldr	r4, [r1, #16]
 80043d4:	42a3      	cmp	r3, r4
 80043d6:	4680      	mov	r8, r0
 80043d8:	f2c0 8081 	blt.w	80044de <quorem+0x112>
 80043dc:	3c01      	subs	r4, #1
 80043de:	f101 0714 	add.w	r7, r1, #20
 80043e2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80043e6:	f100 0614 	add.w	r6, r0, #20
 80043ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80043ee:	eb06 030e 	add.w	r3, r6, lr
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	3501      	adds	r5, #1
 80043f6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80043fa:	fbb3 f5f5 	udiv	r5, r3, r5
 80043fe:	eb07 090e 	add.w	r9, r7, lr
 8004402:	b3c5      	cbz	r5, 8004476 <quorem+0xaa>
 8004404:	f04f 0a00 	mov.w	sl, #0
 8004408:	4638      	mov	r0, r7
 800440a:	46b4      	mov	ip, r6
 800440c:	46d3      	mov	fp, sl
 800440e:	f850 3b04 	ldr.w	r3, [r0], #4
 8004412:	b29a      	uxth	r2, r3
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	fb02 a205 	mla	r2, r2, r5, sl
 800441a:	436b      	muls	r3, r5
 800441c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004420:	b292      	uxth	r2, r2
 8004422:	ebc2 020b 	rsb	r2, r2, fp
 8004426:	f8bc b000 	ldrh.w	fp, [ip]
 800442a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800442e:	fa12 f28b 	uxtah	r2, r2, fp
 8004432:	fa1f fb83 	uxth.w	fp, r3
 8004436:	f8dc 3000 	ldr.w	r3, [ip]
 800443a:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 800443e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8004442:	b292      	uxth	r2, r2
 8004444:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004448:	4548      	cmp	r0, r9
 800444a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800444e:	f84c 2b04 	str.w	r2, [ip], #4
 8004452:	d9dc      	bls.n	800440e <quorem+0x42>
 8004454:	f856 300e 	ldr.w	r3, [r6, lr]
 8004458:	b96b      	cbnz	r3, 8004476 <quorem+0xaa>
 800445a:	9b01      	ldr	r3, [sp, #4]
 800445c:	3b04      	subs	r3, #4
 800445e:	42b3      	cmp	r3, r6
 8004460:	461a      	mov	r2, r3
 8004462:	d802      	bhi.n	800446a <quorem+0x9e>
 8004464:	f8c8 4010 	str.w	r4, [r8, #16]
 8004468:	e005      	b.n	8004476 <quorem+0xaa>
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	3b04      	subs	r3, #4
 800446e:	2a00      	cmp	r2, #0
 8004470:	d1f8      	bne.n	8004464 <quorem+0x98>
 8004472:	3c01      	subs	r4, #1
 8004474:	e7f3      	b.n	800445e <quorem+0x92>
 8004476:	4640      	mov	r0, r8
 8004478:	f001 f827 	bl	80054ca <__mcmp>
 800447c:	2800      	cmp	r0, #0
 800447e:	db2c      	blt.n	80044da <quorem+0x10e>
 8004480:	3501      	adds	r5, #1
 8004482:	4630      	mov	r0, r6
 8004484:	f04f 0e00 	mov.w	lr, #0
 8004488:	f857 1b04 	ldr.w	r1, [r7], #4
 800448c:	f8d0 c000 	ldr.w	ip, [r0]
 8004490:	b28a      	uxth	r2, r1
 8004492:	ebc2 030e 	rsb	r3, r2, lr
 8004496:	0c09      	lsrs	r1, r1, #16
 8004498:	fa13 f38c 	uxtah	r3, r3, ip
 800449c:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 80044a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044aa:	454f      	cmp	r7, r9
 80044ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80044b0:	f840 3b04 	str.w	r3, [r0], #4
 80044b4:	d9e8      	bls.n	8004488 <quorem+0xbc>
 80044b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80044ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80044be:	b962      	cbnz	r2, 80044da <quorem+0x10e>
 80044c0:	3b04      	subs	r3, #4
 80044c2:	42b3      	cmp	r3, r6
 80044c4:	461a      	mov	r2, r3
 80044c6:	d802      	bhi.n	80044ce <quorem+0x102>
 80044c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80044cc:	e005      	b.n	80044da <quorem+0x10e>
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	3b04      	subs	r3, #4
 80044d2:	2a00      	cmp	r2, #0
 80044d4:	d1f8      	bne.n	80044c8 <quorem+0xfc>
 80044d6:	3c01      	subs	r4, #1
 80044d8:	e7f3      	b.n	80044c2 <quorem+0xf6>
 80044da:	4628      	mov	r0, r5
 80044dc:	e000      	b.n	80044e0 <quorem+0x114>
 80044de:	2000      	movs	r0, #0
 80044e0:	b003      	add	sp, #12
 80044e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080044e8 <_dtoa_r>:
 80044e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80044ee:	b097      	sub	sp, #92	; 0x5c
 80044f0:	4682      	mov	sl, r0
 80044f2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80044f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044f8:	b945      	cbnz	r5, 800450c <_dtoa_r+0x24>
 80044fa:	2010      	movs	r0, #16
 80044fc:	f000 fdbc 	bl	8005078 <malloc>
 8004500:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8004504:	6045      	str	r5, [r0, #4]
 8004506:	6085      	str	r5, [r0, #8]
 8004508:	6005      	str	r5, [r0, #0]
 800450a:	60c5      	str	r5, [r0, #12]
 800450c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	b159      	cbz	r1, 800452c <_dtoa_r+0x44>
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	604a      	str	r2, [r1, #4]
 8004518:	2301      	movs	r3, #1
 800451a:	4093      	lsls	r3, r2
 800451c:	608b      	str	r3, [r1, #8]
 800451e:	4650      	mov	r0, sl
 8004520:	f000 fdf6 	bl	8005110 <_Bfree>
 8004524:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	9b03      	ldr	r3, [sp, #12]
 800452e:	4aa2      	ldr	r2, [pc, #648]	; (80047b8 <_dtoa_r+0x2d0>)
 8004530:	2b00      	cmp	r3, #0
 8004532:	bfbf      	itttt	lt
 8004534:	2301      	movlt	r3, #1
 8004536:	6023      	strlt	r3, [r4, #0]
 8004538:	9b03      	ldrlt	r3, [sp, #12]
 800453a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800453e:	bfb8      	it	lt
 8004540:	9303      	strlt	r3, [sp, #12]
 8004542:	9f03      	ldr	r7, [sp, #12]
 8004544:	bfa4      	itt	ge
 8004546:	2300      	movge	r3, #0
 8004548:	6023      	strge	r3, [r4, #0]
 800454a:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800454e:	0d1b      	lsrs	r3, r3, #20
 8004550:	051b      	lsls	r3, r3, #20
 8004552:	4293      	cmp	r3, r2
 8004554:	d11d      	bne.n	8004592 <_dtoa_r+0xaa>
 8004556:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004558:	f242 730f 	movw	r3, #9999	; 0x270f
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	9b02      	ldr	r3, [sp, #8]
 8004560:	b943      	cbnz	r3, 8004574 <_dtoa_r+0x8c>
 8004562:	4a96      	ldr	r2, [pc, #600]	; (80047bc <_dtoa_r+0x2d4>)
 8004564:	4b96      	ldr	r3, [pc, #600]	; (80047c0 <_dtoa_r+0x2d8>)
 8004566:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800456a:	2800      	cmp	r0, #0
 800456c:	bf14      	ite	ne
 800456e:	4618      	movne	r0, r3
 8004570:	4610      	moveq	r0, r2
 8004572:	e000      	b.n	8004576 <_dtoa_r+0x8e>
 8004574:	4892      	ldr	r0, [pc, #584]	; (80047c0 <_dtoa_r+0x2d8>)
 8004576:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8573 	beq.w	8005064 <_dtoa_r+0xb7c>
 800457e:	78c3      	ldrb	r3, [r0, #3]
 8004580:	b113      	cbz	r3, 8004588 <_dtoa_r+0xa0>
 8004582:	f100 0308 	add.w	r3, r0, #8
 8004586:	e000      	b.n	800458a <_dtoa_r+0xa2>
 8004588:	1cc3      	adds	r3, r0, #3
 800458a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	f000 bd69 	b.w	8005064 <_dtoa_r+0xb7c>
 8004592:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	4620      	mov	r0, r4
 800459a:	4629      	mov	r1, r5
 800459c:	2300      	movs	r3, #0
 800459e:	f001 fd19 	bl	8005fd4 <__aeabi_dcmpeq>
 80045a2:	4680      	mov	r8, r0
 80045a4:	b158      	cbz	r0, 80045be <_dtoa_r+0xd6>
 80045a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80045a8:	2301      	movs	r3, #1
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 8546 	beq.w	8005040 <_dtoa_r+0xb58>
 80045b4:	4883      	ldr	r0, [pc, #524]	; (80047c4 <_dtoa_r+0x2dc>)
 80045b6:	6018      	str	r0, [r3, #0]
 80045b8:	3801      	subs	r0, #1
 80045ba:	f000 bd53 	b.w	8005064 <_dtoa_r+0xb7c>
 80045be:	ab15      	add	r3, sp, #84	; 0x54
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	ab14      	add	r3, sp, #80	; 0x50
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	4650      	mov	r0, sl
 80045c8:	4622      	mov	r2, r4
 80045ca:	462b      	mov	r3, r5
 80045cc:	f000 fff8 	bl	80055c0 <__d2b>
 80045d0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80045d4:	9007      	str	r0, [sp, #28]
 80045d6:	b15e      	cbz	r6, 80045f0 <_dtoa_r+0x108>
 80045d8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80045dc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80045e0:	4620      	mov	r0, r4
 80045e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80045e6:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80045ea:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80045ee:	e01d      	b.n	800462c <_dtoa_r+0x144>
 80045f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80045f2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80045f4:	441e      	add	r6, r3
 80045f6:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80045fa:	429e      	cmp	r6, r3
 80045fc:	bfad      	iteet	ge
 80045fe:	9a02      	ldrge	r2, [sp, #8]
 8004600:	4b71      	ldrlt	r3, [pc, #452]	; (80047c8 <_dtoa_r+0x2e0>)
 8004602:	9a02      	ldrlt	r2, [sp, #8]
 8004604:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 8004608:	bfa3      	ittte	ge
 800460a:	fa22 f003 	lsrge.w	r0, r2, r3
 800460e:	4b6f      	ldrge	r3, [pc, #444]	; (80047cc <_dtoa_r+0x2e4>)
 8004610:	1b9b      	subge	r3, r3, r6
 8004612:	1b9b      	sublt	r3, r3, r6
 8004614:	bfaa      	itet	ge
 8004616:	409f      	lslge	r7, r3
 8004618:	fa02 f003 	lsllt.w	r0, r2, r3
 800461c:	4338      	orrge	r0, r7
 800461e:	f7ff f899 	bl	8003754 <__aeabi_ui2d>
 8004622:	2301      	movs	r3, #1
 8004624:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004628:	3e01      	subs	r6, #1
 800462a:	9313      	str	r3, [sp, #76]	; 0x4c
 800462c:	2200      	movs	r2, #0
 800462e:	4b68      	ldr	r3, [pc, #416]	; (80047d0 <_dtoa_r+0x2e8>)
 8004630:	f7fe ff52 	bl	80034d8 <__aeabi_dsub>
 8004634:	a35a      	add	r3, pc, #360	; (adr r3, 80047a0 <_dtoa_r+0x2b8>)
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f001 fa63 	bl	8005b04 <__aeabi_dmul>
 800463e:	a35a      	add	r3, pc, #360	; (adr r3, 80047a8 <_dtoa_r+0x2c0>)
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f7fe ff4a 	bl	80034dc <__adddf3>
 8004648:	4604      	mov	r4, r0
 800464a:	4630      	mov	r0, r6
 800464c:	460d      	mov	r5, r1
 800464e:	f7ff f891 	bl	8003774 <__aeabi_i2d>
 8004652:	a357      	add	r3, pc, #348	; (adr r3, 80047b0 <_dtoa_r+0x2c8>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f001 fa54 	bl	8005b04 <__aeabi_dmul>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4620      	mov	r0, r4
 8004662:	4629      	mov	r1, r5
 8004664:	f7fe ff3a 	bl	80034dc <__adddf3>
 8004668:	4604      	mov	r4, r0
 800466a:	460d      	mov	r5, r1
 800466c:	f001 fce4 	bl	8006038 <__aeabi_d2iz>
 8004670:	4629      	mov	r1, r5
 8004672:	4683      	mov	fp, r0
 8004674:	2200      	movs	r2, #0
 8004676:	4620      	mov	r0, r4
 8004678:	2300      	movs	r3, #0
 800467a:	f001 fcb5 	bl	8005fe8 <__aeabi_dcmplt>
 800467e:	b158      	cbz	r0, 8004698 <_dtoa_r+0x1b0>
 8004680:	4658      	mov	r0, fp
 8004682:	f7ff f877 	bl	8003774 <__aeabi_i2d>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4620      	mov	r0, r4
 800468c:	4629      	mov	r1, r5
 800468e:	f001 fca1 	bl	8005fd4 <__aeabi_dcmpeq>
 8004692:	b908      	cbnz	r0, 8004698 <_dtoa_r+0x1b0>
 8004694:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004698:	f1bb 0f16 	cmp.w	fp, #22
 800469c:	d80d      	bhi.n	80046ba <_dtoa_r+0x1d2>
 800469e:	4b4d      	ldr	r3, [pc, #308]	; (80047d4 <_dtoa_r+0x2ec>)
 80046a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046ac:	f001 fcba 	bl	8006024 <__aeabi_dcmpgt>
 80046b0:	b130      	cbz	r0, 80046c0 <_dtoa_r+0x1d8>
 80046b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <_dtoa_r+0x1d4>
 80046ba:	2301      	movs	r3, #1
 80046bc:	9312      	str	r3, [sp, #72]	; 0x48
 80046be:	e000      	b.n	80046c2 <_dtoa_r+0x1da>
 80046c0:	9012      	str	r0, [sp, #72]	; 0x48
 80046c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046c4:	1b9e      	subs	r6, r3, r6
 80046c6:	1e73      	subs	r3, r6, #1
 80046c8:	930a      	str	r3, [sp, #40]	; 0x28
 80046ca:	bf45      	ittet	mi
 80046cc:	425b      	negmi	r3, r3
 80046ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80046d0:	2300      	movpl	r3, #0
 80046d2:	2300      	movmi	r3, #0
 80046d4:	bf4c      	ite	mi
 80046d6:	930a      	strmi	r3, [sp, #40]	; 0x28
 80046d8:	9309      	strpl	r3, [sp, #36]	; 0x24
 80046da:	f1bb 0f00 	cmp.w	fp, #0
 80046de:	db07      	blt.n	80046f0 <_dtoa_r+0x208>
 80046e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046e2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80046e6:	445b      	add	r3, fp
 80046e8:	930a      	str	r3, [sp, #40]	; 0x28
 80046ea:	2300      	movs	r3, #0
 80046ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80046ee:	e008      	b.n	8004702 <_dtoa_r+0x21a>
 80046f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f2:	ebcb 0303 	rsb	r3, fp, r3
 80046f6:	9309      	str	r3, [sp, #36]	; 0x24
 80046f8:	f1cb 0300 	rsb	r3, fp, #0
 80046fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80046fe:	2300      	movs	r3, #0
 8004700:	930d      	str	r3, [sp, #52]	; 0x34
 8004702:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004704:	2b09      	cmp	r3, #9
 8004706:	d828      	bhi.n	800475a <_dtoa_r+0x272>
 8004708:	2b05      	cmp	r3, #5
 800470a:	bfc4      	itt	gt
 800470c:	3b04      	subgt	r3, #4
 800470e:	9320      	strgt	r3, [sp, #128]	; 0x80
 8004710:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004712:	f1a3 0302 	sub.w	r3, r3, #2
 8004716:	bfcc      	ite	gt
 8004718:	2500      	movgt	r5, #0
 800471a:	2501      	movle	r5, #1
 800471c:	2b03      	cmp	r3, #3
 800471e:	d821      	bhi.n	8004764 <_dtoa_r+0x27c>
 8004720:	e8df f003 	tbb	[pc, r3]
 8004724:	10040e02 	.word	0x10040e02
 8004728:	2300      	movs	r3, #0
 800472a:	e000      	b.n	800472e <_dtoa_r+0x246>
 800472c:	2301      	movs	r3, #1
 800472e:	930c      	str	r3, [sp, #48]	; 0x30
 8004730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004732:	2b00      	cmp	r3, #0
 8004734:	dc20      	bgt.n	8004778 <_dtoa_r+0x290>
 8004736:	2301      	movs	r3, #1
 8004738:	9306      	str	r3, [sp, #24]
 800473a:	9305      	str	r3, [sp, #20]
 800473c:	461a      	mov	r2, r3
 800473e:	e019      	b.n	8004774 <_dtoa_r+0x28c>
 8004740:	2300      	movs	r3, #0
 8004742:	e000      	b.n	8004746 <_dtoa_r+0x25e>
 8004744:	2301      	movs	r3, #1
 8004746:	930c      	str	r3, [sp, #48]	; 0x30
 8004748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800474a:	445b      	add	r3, fp
 800474c:	9306      	str	r3, [sp, #24]
 800474e:	3301      	adds	r3, #1
 8004750:	2b01      	cmp	r3, #1
 8004752:	9305      	str	r3, [sp, #20]
 8004754:	bfb8      	it	lt
 8004756:	2301      	movlt	r3, #1
 8004758:	e011      	b.n	800477e <_dtoa_r+0x296>
 800475a:	2501      	movs	r5, #1
 800475c:	2300      	movs	r3, #0
 800475e:	9320      	str	r3, [sp, #128]	; 0x80
 8004760:	950c      	str	r5, [sp, #48]	; 0x30
 8004762:	e001      	b.n	8004768 <_dtoa_r+0x280>
 8004764:	2301      	movs	r3, #1
 8004766:	930c      	str	r3, [sp, #48]	; 0x30
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	9306      	str	r3, [sp, #24]
 800476e:	9305      	str	r3, [sp, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	2312      	movs	r3, #18
 8004774:	9221      	str	r2, [sp, #132]	; 0x84
 8004776:	e002      	b.n	800477e <_dtoa_r+0x296>
 8004778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800477a:	9306      	str	r3, [sp, #24]
 800477c:	9305      	str	r3, [sp, #20]
 800477e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8004782:	2200      	movs	r2, #0
 8004784:	6062      	str	r2, [r4, #4]
 8004786:	2104      	movs	r1, #4
 8004788:	f101 0214 	add.w	r2, r1, #20
 800478c:	429a      	cmp	r2, r3
 800478e:	d823      	bhi.n	80047d8 <_dtoa_r+0x2f0>
 8004790:	6862      	ldr	r2, [r4, #4]
 8004792:	3201      	adds	r2, #1
 8004794:	6062      	str	r2, [r4, #4]
 8004796:	0049      	lsls	r1, r1, #1
 8004798:	e7f6      	b.n	8004788 <_dtoa_r+0x2a0>
 800479a:	bf00      	nop
 800479c:	f3af 8000 	nop.w
 80047a0:	636f4361 	.word	0x636f4361
 80047a4:	3fd287a7 	.word	0x3fd287a7
 80047a8:	8b60c8b3 	.word	0x8b60c8b3
 80047ac:	3fc68a28 	.word	0x3fc68a28
 80047b0:	509f79fb 	.word	0x509f79fb
 80047b4:	3fd34413 	.word	0x3fd34413
 80047b8:	7ff00000 	.word	0x7ff00000
 80047bc:	08006a36 	.word	0x08006a36
 80047c0:	08006a3f 	.word	0x08006a3f
 80047c4:	08006a13 	.word	0x08006a13
 80047c8:	fffffbee 	.word	0xfffffbee
 80047cc:	fffffc0e 	.word	0xfffffc0e
 80047d0:	3ff80000 	.word	0x3ff80000
 80047d4:	08006a50 	.word	0x08006a50
 80047d8:	4650      	mov	r0, sl
 80047da:	6861      	ldr	r1, [r4, #4]
 80047dc:	f000 fc63 	bl	80050a6 <_Balloc>
 80047e0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80047e4:	6020      	str	r0, [r4, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	9308      	str	r3, [sp, #32]
 80047ea:	9b05      	ldr	r3, [sp, #20]
 80047ec:	2b0e      	cmp	r3, #14
 80047ee:	f200 814b 	bhi.w	8004a88 <_dtoa_r+0x5a0>
 80047f2:	2d00      	cmp	r5, #0
 80047f4:	f000 8148 	beq.w	8004a88 <_dtoa_r+0x5a0>
 80047f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80047fc:	f1bb 0f00 	cmp.w	fp, #0
 8004800:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004804:	dd31      	ble.n	800486a <_dtoa_r+0x382>
 8004806:	4ab3      	ldr	r2, [pc, #716]	; (8004ad4 <_dtoa_r+0x5ec>)
 8004808:	f00b 030f 	and.w	r3, fp, #15
 800480c:	ea4f 172b 	mov.w	r7, fp, asr #4
 8004810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004814:	06f8      	lsls	r0, r7, #27
 8004816:	e9d3 4500 	ldrd	r4, r5, [r3]
 800481a:	d50c      	bpl.n	8004836 <_dtoa_r+0x34e>
 800481c:	4bae      	ldr	r3, [pc, #696]	; (8004ad8 <_dtoa_r+0x5f0>)
 800481e:	ec51 0b17 	vmov	r0, r1, d7
 8004822:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004826:	f001 fa97 	bl	8005d58 <__aeabi_ddiv>
 800482a:	f007 070f 	and.w	r7, r7, #15
 800482e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004832:	2603      	movs	r6, #3
 8004834:	e000      	b.n	8004838 <_dtoa_r+0x350>
 8004836:	2602      	movs	r6, #2
 8004838:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8004ad8 <_dtoa_r+0x5f0>
 800483c:	b177      	cbz	r7, 800485c <_dtoa_r+0x374>
 800483e:	07f9      	lsls	r1, r7, #31
 8004840:	d508      	bpl.n	8004854 <_dtoa_r+0x36c>
 8004842:	4620      	mov	r0, r4
 8004844:	4629      	mov	r1, r5
 8004846:	e9d8 2300 	ldrd	r2, r3, [r8]
 800484a:	f001 f95b 	bl	8005b04 <__aeabi_dmul>
 800484e:	3601      	adds	r6, #1
 8004850:	4604      	mov	r4, r0
 8004852:	460d      	mov	r5, r1
 8004854:	107f      	asrs	r7, r7, #1
 8004856:	f108 0808 	add.w	r8, r8, #8
 800485a:	e7ef      	b.n	800483c <_dtoa_r+0x354>
 800485c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004860:	4622      	mov	r2, r4
 8004862:	462b      	mov	r3, r5
 8004864:	f001 fa78 	bl	8005d58 <__aeabi_ddiv>
 8004868:	e01b      	b.n	80048a2 <_dtoa_r+0x3ba>
 800486a:	f1cb 0400 	rsb	r4, fp, #0
 800486e:	b1dc      	cbz	r4, 80048a8 <_dtoa_r+0x3c0>
 8004870:	4b98      	ldr	r3, [pc, #608]	; (8004ad4 <_dtoa_r+0x5ec>)
 8004872:	4d99      	ldr	r5, [pc, #612]	; (8004ad8 <_dtoa_r+0x5f0>)
 8004874:	f004 020f 	and.w	r2, r4, #15
 8004878:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800487c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f001 f93e 	bl	8005b04 <__aeabi_dmul>
 8004888:	1124      	asrs	r4, r4, #4
 800488a:	2602      	movs	r6, #2
 800488c:	b14c      	cbz	r4, 80048a2 <_dtoa_r+0x3ba>
 800488e:	07e2      	lsls	r2, r4, #31
 8004890:	d504      	bpl.n	800489c <_dtoa_r+0x3b4>
 8004892:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004896:	3601      	adds	r6, #1
 8004898:	f001 f934 	bl	8005b04 <__aeabi_dmul>
 800489c:	1064      	asrs	r4, r4, #1
 800489e:	3508      	adds	r5, #8
 80048a0:	e7f4      	b.n	800488c <_dtoa_r+0x3a4>
 80048a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048a6:	e000      	b.n	80048aa <_dtoa_r+0x3c2>
 80048a8:	2602      	movs	r6, #2
 80048aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048ac:	b1db      	cbz	r3, 80048e6 <_dtoa_r+0x3fe>
 80048ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	4620      	mov	r0, r4
 80048b6:	4629      	mov	r1, r5
 80048b8:	4b88      	ldr	r3, [pc, #544]	; (8004adc <_dtoa_r+0x5f4>)
 80048ba:	f001 fb95 	bl	8005fe8 <__aeabi_dcmplt>
 80048be:	b190      	cbz	r0, 80048e6 <_dtoa_r+0x3fe>
 80048c0:	9b05      	ldr	r3, [sp, #20]
 80048c2:	b183      	cbz	r3, 80048e6 <_dtoa_r+0x3fe>
 80048c4:	9b06      	ldr	r3, [sp, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f340 80da 	ble.w	8004a80 <_dtoa_r+0x598>
 80048cc:	4629      	mov	r1, r5
 80048ce:	4620      	mov	r0, r4
 80048d0:	2200      	movs	r2, #0
 80048d2:	4b83      	ldr	r3, [pc, #524]	; (8004ae0 <_dtoa_r+0x5f8>)
 80048d4:	f001 f916 	bl	8005b04 <__aeabi_dmul>
 80048d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80048dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e0:	3601      	adds	r6, #1
 80048e2:	9d06      	ldr	r5, [sp, #24]
 80048e4:	e001      	b.n	80048ea <_dtoa_r+0x402>
 80048e6:	9d05      	ldr	r5, [sp, #20]
 80048e8:	465f      	mov	r7, fp
 80048ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048ee:	4630      	mov	r0, r6
 80048f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80048f4:	f7fe ff3e 	bl	8003774 <__aeabi_i2d>
 80048f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80048fc:	f001 f902 	bl	8005b04 <__aeabi_dmul>
 8004900:	2200      	movs	r2, #0
 8004902:	4b78      	ldr	r3, [pc, #480]	; (8004ae4 <_dtoa_r+0x5fc>)
 8004904:	f7fe fdea 	bl	80034dc <__adddf3>
 8004908:	4680      	mov	r8, r0
 800490a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800490e:	b9cd      	cbnz	r5, 8004944 <_dtoa_r+0x45c>
 8004910:	2200      	movs	r2, #0
 8004912:	4b75      	ldr	r3, [pc, #468]	; (8004ae8 <_dtoa_r+0x600>)
 8004914:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004918:	f7fe fdde 	bl	80034d8 <__aeabi_dsub>
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004924:	f001 fb7e 	bl	8006024 <__aeabi_dcmpgt>
 8004928:	2800      	cmp	r0, #0
 800492a:	f040 8246 	bne.w	8004dba <_dtoa_r+0x8d2>
 800492e:	4642      	mov	r2, r8
 8004930:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004938:	f001 fb56 	bl	8005fe8 <__aeabi_dcmplt>
 800493c:	2800      	cmp	r0, #0
 800493e:	f040 8236 	bne.w	8004dae <_dtoa_r+0x8c6>
 8004942:	e09d      	b.n	8004a80 <_dtoa_r+0x598>
 8004944:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <_dtoa_r+0x5ec>)
 8004946:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004948:	1e6a      	subs	r2, r5, #1
 800494a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800494e:	2900      	cmp	r1, #0
 8004950:	d049      	beq.n	80049e6 <_dtoa_r+0x4fe>
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	2000      	movs	r0, #0
 8004958:	4964      	ldr	r1, [pc, #400]	; (8004aec <_dtoa_r+0x604>)
 800495a:	f001 f9fd 	bl	8005d58 <__aeabi_ddiv>
 800495e:	4642      	mov	r2, r8
 8004960:	464b      	mov	r3, r9
 8004962:	f7fe fdb9 	bl	80034d8 <__aeabi_dsub>
 8004966:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800496a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800496e:	9c08      	ldr	r4, [sp, #32]
 8004970:	4649      	mov	r1, r9
 8004972:	4640      	mov	r0, r8
 8004974:	f001 fb60 	bl	8006038 <__aeabi_d2iz>
 8004978:	4606      	mov	r6, r0
 800497a:	f7fe fefb 	bl	8003774 <__aeabi_i2d>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4640      	mov	r0, r8
 8004984:	4649      	mov	r1, r9
 8004986:	f7fe fda7 	bl	80034d8 <__aeabi_dsub>
 800498a:	3630      	adds	r6, #48	; 0x30
 800498c:	f804 6b01 	strb.w	r6, [r4], #1
 8004990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004994:	4680      	mov	r8, r0
 8004996:	4689      	mov	r9, r1
 8004998:	f001 fb26 	bl	8005fe8 <__aeabi_dcmplt>
 800499c:	2800      	cmp	r0, #0
 800499e:	f040 8340 	bne.w	8005022 <_dtoa_r+0xb3a>
 80049a2:	4642      	mov	r2, r8
 80049a4:	464b      	mov	r3, r9
 80049a6:	2000      	movs	r0, #0
 80049a8:	494c      	ldr	r1, [pc, #304]	; (8004adc <_dtoa_r+0x5f4>)
 80049aa:	f7fe fd95 	bl	80034d8 <__aeabi_dsub>
 80049ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049b2:	f001 fb19 	bl	8005fe8 <__aeabi_dcmplt>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	f040 80d3 	bne.w	8004b62 <_dtoa_r+0x67a>
 80049bc:	9b08      	ldr	r3, [sp, #32]
 80049be:	1ae3      	subs	r3, r4, r3
 80049c0:	42ab      	cmp	r3, r5
 80049c2:	da5d      	bge.n	8004a80 <_dtoa_r+0x598>
 80049c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049c8:	2200      	movs	r2, #0
 80049ca:	4b45      	ldr	r3, [pc, #276]	; (8004ae0 <_dtoa_r+0x5f8>)
 80049cc:	f001 f89a 	bl	8005b04 <__aeabi_dmul>
 80049d0:	2200      	movs	r2, #0
 80049d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049d6:	4b42      	ldr	r3, [pc, #264]	; (8004ae0 <_dtoa_r+0x5f8>)
 80049d8:	4640      	mov	r0, r8
 80049da:	4649      	mov	r1, r9
 80049dc:	f001 f892 	bl	8005b04 <__aeabi_dmul>
 80049e0:	4680      	mov	r8, r0
 80049e2:	4689      	mov	r9, r1
 80049e4:	e7c4      	b.n	8004970 <_dtoa_r+0x488>
 80049e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049ea:	4642      	mov	r2, r8
 80049ec:	464b      	mov	r3, r9
 80049ee:	f001 f889 	bl	8005b04 <__aeabi_dmul>
 80049f2:	9b08      	ldr	r3, [sp, #32]
 80049f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049f8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80049fc:	195c      	adds	r4, r3, r5
 80049fe:	461d      	mov	r5, r3
 8004a00:	4649      	mov	r1, r9
 8004a02:	4640      	mov	r0, r8
 8004a04:	f001 fb18 	bl	8006038 <__aeabi_d2iz>
 8004a08:	4606      	mov	r6, r0
 8004a0a:	f7fe feb3 	bl	8003774 <__aeabi_i2d>
 8004a0e:	3630      	adds	r6, #48	; 0x30
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4640      	mov	r0, r8
 8004a16:	4649      	mov	r1, r9
 8004a18:	f7fe fd5e 	bl	80034d8 <__aeabi_dsub>
 8004a1c:	f805 6b01 	strb.w	r6, [r5], #1
 8004a20:	42a5      	cmp	r5, r4
 8004a22:	4680      	mov	r8, r0
 8004a24:	4689      	mov	r9, r1
 8004a26:	d124      	bne.n	8004a72 <_dtoa_r+0x58a>
 8004a28:	2200      	movs	r2, #0
 8004a2a:	4b30      	ldr	r3, [pc, #192]	; (8004aec <_dtoa_r+0x604>)
 8004a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a30:	f7fe fd54 	bl	80034dc <__adddf3>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4640      	mov	r0, r8
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	f001 faf2 	bl	8006024 <__aeabi_dcmpgt>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	f040 808e 	bne.w	8004b62 <_dtoa_r+0x67a>
 8004a46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	4927      	ldr	r1, [pc, #156]	; (8004aec <_dtoa_r+0x604>)
 8004a4e:	f7fe fd43 	bl	80034d8 <__aeabi_dsub>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4640      	mov	r0, r8
 8004a58:	4649      	mov	r1, r9
 8004a5a:	f001 fac5 	bl	8005fe8 <__aeabi_dcmplt>
 8004a5e:	b178      	cbz	r0, 8004a80 <_dtoa_r+0x598>
 8004a60:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8004a64:	2b30      	cmp	r3, #48	; 0x30
 8004a66:	f104 32ff 	add.w	r2, r4, #4294967295
 8004a6a:	f040 82da 	bne.w	8005022 <_dtoa_r+0xb3a>
 8004a6e:	4614      	mov	r4, r2
 8004a70:	e7f6      	b.n	8004a60 <_dtoa_r+0x578>
 8004a72:	2200      	movs	r2, #0
 8004a74:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <_dtoa_r+0x5f8>)
 8004a76:	f001 f845 	bl	8005b04 <__aeabi_dmul>
 8004a7a:	4680      	mov	r8, r0
 8004a7c:	4689      	mov	r9, r1
 8004a7e:	e7bf      	b.n	8004a00 <_dtoa_r+0x518>
 8004a80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f2c0 808b 	blt.w	8004ba6 <_dtoa_r+0x6be>
 8004a90:	f1bb 0f0e 	cmp.w	fp, #14
 8004a94:	f300 8087 	bgt.w	8004ba6 <_dtoa_r+0x6be>
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <_dtoa_r+0x5ec>)
 8004a9a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004a9e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	da23      	bge.n	8004af0 <_dtoa_r+0x608>
 8004aa8:	9b05      	ldr	r3, [sp, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	dc20      	bgt.n	8004af0 <_dtoa_r+0x608>
 8004aae:	f040 817d 	bne.w	8004dac <_dtoa_r+0x8c4>
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <_dtoa_r+0x600>)
 8004ab8:	4639      	mov	r1, r7
 8004aba:	f001 f823 	bl	8005b04 <__aeabi_dmul>
 8004abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ac2:	f001 faa5 	bl	8006010 <__aeabi_dcmpge>
 8004ac6:	9d05      	ldr	r5, [sp, #20]
 8004ac8:	462e      	mov	r6, r5
 8004aca:	2800      	cmp	r0, #0
 8004acc:	f040 8170 	bne.w	8004db0 <_dtoa_r+0x8c8>
 8004ad0:	e175      	b.n	8004dbe <_dtoa_r+0x8d6>
 8004ad2:	bf00      	nop
 8004ad4:	08006a50 	.word	0x08006a50
 8004ad8:	08006b18 	.word	0x08006b18
 8004adc:	3ff00000 	.word	0x3ff00000
 8004ae0:	40240000 	.word	0x40240000
 8004ae4:	401c0000 	.word	0x401c0000
 8004ae8:	40140000 	.word	0x40140000
 8004aec:	3fe00000 	.word	0x3fe00000
 8004af0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004af4:	9c08      	ldr	r4, [sp, #32]
 8004af6:	4632      	mov	r2, r6
 8004af8:	463b      	mov	r3, r7
 8004afa:	4640      	mov	r0, r8
 8004afc:	4649      	mov	r1, r9
 8004afe:	f001 f92b 	bl	8005d58 <__aeabi_ddiv>
 8004b02:	f001 fa99 	bl	8006038 <__aeabi_d2iz>
 8004b06:	4605      	mov	r5, r0
 8004b08:	f7fe fe34 	bl	8003774 <__aeabi_i2d>
 8004b0c:	4632      	mov	r2, r6
 8004b0e:	463b      	mov	r3, r7
 8004b10:	f000 fff8 	bl	8005b04 <__aeabi_dmul>
 8004b14:	460b      	mov	r3, r1
 8004b16:	4602      	mov	r2, r0
 8004b18:	4649      	mov	r1, r9
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f7fe fcdc 	bl	80034d8 <__aeabi_dsub>
 8004b20:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8004b24:	9b08      	ldr	r3, [sp, #32]
 8004b26:	f804 eb01 	strb.w	lr, [r4], #1
 8004b2a:	ebc3 0e04 	rsb	lr, r3, r4
 8004b2e:	9b05      	ldr	r3, [sp, #20]
 8004b30:	459e      	cmp	lr, r3
 8004b32:	d12b      	bne.n	8004b8c <_dtoa_r+0x6a4>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	f7fe fcd0 	bl	80034dc <__adddf3>
 8004b3c:	4632      	mov	r2, r6
 8004b3e:	463b      	mov	r3, r7
 8004b40:	4680      	mov	r8, r0
 8004b42:	4689      	mov	r9, r1
 8004b44:	f001 fa6e 	bl	8006024 <__aeabi_dcmpgt>
 8004b48:	b970      	cbnz	r0, 8004b68 <_dtoa_r+0x680>
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	4632      	mov	r2, r6
 8004b50:	463b      	mov	r3, r7
 8004b52:	f001 fa3f 	bl	8005fd4 <__aeabi_dcmpeq>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	f000 8264 	beq.w	8005024 <_dtoa_r+0xb3c>
 8004b5c:	07eb      	lsls	r3, r5, #31
 8004b5e:	d403      	bmi.n	8004b68 <_dtoa_r+0x680>
 8004b60:	e260      	b.n	8005024 <_dtoa_r+0xb3c>
 8004b62:	46bb      	mov	fp, r7
 8004b64:	e000      	b.n	8004b68 <_dtoa_r+0x680>
 8004b66:	461c      	mov	r4, r3
 8004b68:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8004b6c:	2a39      	cmp	r2, #57	; 0x39
 8004b6e:	f104 33ff 	add.w	r3, r4, #4294967295
 8004b72:	d107      	bne.n	8004b84 <_dtoa_r+0x69c>
 8004b74:	9a08      	ldr	r2, [sp, #32]
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d1f5      	bne.n	8004b66 <_dtoa_r+0x67e>
 8004b7a:	2330      	movs	r3, #48	; 0x30
 8004b7c:	7013      	strb	r3, [r2, #0]
 8004b7e:	f10b 0b01 	add.w	fp, fp, #1
 8004b82:	4613      	mov	r3, r2
 8004b84:	781a      	ldrb	r2, [r3, #0]
 8004b86:	3201      	adds	r2, #1
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e24b      	b.n	8005024 <_dtoa_r+0xb3c>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	4ba4      	ldr	r3, [pc, #656]	; (8004e20 <_dtoa_r+0x938>)
 8004b90:	f000 ffb8 	bl	8005b04 <__aeabi_dmul>
 8004b94:	2200      	movs	r2, #0
 8004b96:	2300      	movs	r3, #0
 8004b98:	4680      	mov	r8, r0
 8004b9a:	4689      	mov	r9, r1
 8004b9c:	f001 fa1a 	bl	8005fd4 <__aeabi_dcmpeq>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d0a8      	beq.n	8004af6 <_dtoa_r+0x60e>
 8004ba4:	e23e      	b.n	8005024 <_dtoa_r+0xb3c>
 8004ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ba8:	2a00      	cmp	r2, #0
 8004baa:	d032      	beq.n	8004c12 <_dtoa_r+0x72a>
 8004bac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004bae:	2a01      	cmp	r2, #1
 8004bb0:	dc0a      	bgt.n	8004bc8 <_dtoa_r+0x6e0>
 8004bb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004bb4:	b112      	cbz	r2, 8004bbc <_dtoa_r+0x6d4>
 8004bb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004bba:	e002      	b.n	8004bc2 <_dtoa_r+0x6da>
 8004bbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004bbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004bc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004bc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004bc6:	e018      	b.n	8004bfa <_dtoa_r+0x712>
 8004bc8:	9b05      	ldr	r3, [sp, #20]
 8004bca:	1e5d      	subs	r5, r3, #1
 8004bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bce:	42ab      	cmp	r3, r5
 8004bd0:	bfbf      	itttt	lt
 8004bd2:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8004bd4:	950b      	strlt	r5, [sp, #44]	; 0x2c
 8004bd6:	1aea      	sublt	r2, r5, r3
 8004bd8:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004bda:	bfb6      	itet	lt
 8004bdc:	189b      	addlt	r3, r3, r2
 8004bde:	1b5d      	subge	r5, r3, r5
 8004be0:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004be2:	9b05      	ldr	r3, [sp, #20]
 8004be4:	bfb8      	it	lt
 8004be6:	2500      	movlt	r5, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bfb9      	ittee	lt
 8004bec:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8004bee:	9a05      	ldrlt	r2, [sp, #20]
 8004bf0:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 8004bf2:	9b05      	ldrge	r3, [sp, #20]
 8004bf4:	bfbc      	itt	lt
 8004bf6:	1a9c      	sublt	r4, r3, r2
 8004bf8:	2300      	movlt	r3, #0
 8004bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bfc:	441a      	add	r2, r3
 8004bfe:	9209      	str	r2, [sp, #36]	; 0x24
 8004c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c02:	4650      	mov	r0, sl
 8004c04:	441a      	add	r2, r3
 8004c06:	2101      	movs	r1, #1
 8004c08:	920a      	str	r2, [sp, #40]	; 0x28
 8004c0a:	f000 fb23 	bl	8005254 <__i2b>
 8004c0e:	4606      	mov	r6, r0
 8004c10:	e002      	b.n	8004c18 <_dtoa_r+0x730>
 8004c12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004c14:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004c16:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004c18:	b164      	cbz	r4, 8004c34 <_dtoa_r+0x74c>
 8004c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	dd09      	ble.n	8004c34 <_dtoa_r+0x74c>
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c24:	bfa8      	it	ge
 8004c26:	4623      	movge	r3, r4
 8004c28:	1ad2      	subs	r2, r2, r3
 8004c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8004c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c2e:	1ae4      	subs	r4, r4, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	930a      	str	r3, [sp, #40]	; 0x28
 8004c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	dd20      	ble.n	8004c7c <_dtoa_r+0x794>
 8004c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c3c:	b1c3      	cbz	r3, 8004c70 <_dtoa_r+0x788>
 8004c3e:	2d00      	cmp	r5, #0
 8004c40:	dd10      	ble.n	8004c64 <_dtoa_r+0x77c>
 8004c42:	4631      	mov	r1, r6
 8004c44:	462a      	mov	r2, r5
 8004c46:	4650      	mov	r0, sl
 8004c48:	f000 fb9e 	bl	8005388 <__pow5mult>
 8004c4c:	4606      	mov	r6, r0
 8004c4e:	4631      	mov	r1, r6
 8004c50:	9a07      	ldr	r2, [sp, #28]
 8004c52:	4650      	mov	r0, sl
 8004c54:	f000 fb07 	bl	8005266 <__multiply>
 8004c58:	9907      	ldr	r1, [sp, #28]
 8004c5a:	4607      	mov	r7, r0
 8004c5c:	4650      	mov	r0, sl
 8004c5e:	f000 fa57 	bl	8005110 <_Bfree>
 8004c62:	9707      	str	r7, [sp, #28]
 8004c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c66:	1b5a      	subs	r2, r3, r5
 8004c68:	d008      	beq.n	8004c7c <_dtoa_r+0x794>
 8004c6a:	4650      	mov	r0, sl
 8004c6c:	9907      	ldr	r1, [sp, #28]
 8004c6e:	e002      	b.n	8004c76 <_dtoa_r+0x78e>
 8004c70:	9907      	ldr	r1, [sp, #28]
 8004c72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c74:	4650      	mov	r0, sl
 8004c76:	f000 fb87 	bl	8005388 <__pow5mult>
 8004c7a:	9007      	str	r0, [sp, #28]
 8004c7c:	4650      	mov	r0, sl
 8004c7e:	2101      	movs	r1, #1
 8004c80:	f000 fae8 	bl	8005254 <__i2b>
 8004c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	4605      	mov	r5, r0
 8004c8a:	dd0a      	ble.n	8004ca2 <_dtoa_r+0x7ba>
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4650      	mov	r0, sl
 8004c92:	f000 fb79 	bl	8005388 <__pow5mult>
 8004c96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	dd04      	ble.n	8004ca8 <_dtoa_r+0x7c0>
 8004c9e:	2700      	movs	r7, #0
 8004ca0:	e01b      	b.n	8004cda <_dtoa_r+0x7f2>
 8004ca2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	dc13      	bgt.n	8004cd0 <_dtoa_r+0x7e8>
 8004ca8:	9b02      	ldr	r3, [sp, #8]
 8004caa:	b98b      	cbnz	r3, 8004cd0 <_dtoa_r+0x7e8>
 8004cac:	9b03      	ldr	r3, [sp, #12]
 8004cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb2:	b97b      	cbnz	r3, 8004cd4 <_dtoa_r+0x7ec>
 8004cb4:	9b03      	ldr	r3, [sp, #12]
 8004cb6:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8004cba:	0d3f      	lsrs	r7, r7, #20
 8004cbc:	053f      	lsls	r7, r7, #20
 8004cbe:	b157      	cbz	r7, 8004cd6 <_dtoa_r+0x7ee>
 8004cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cc8:	3301      	adds	r3, #1
 8004cca:	930a      	str	r3, [sp, #40]	; 0x28
 8004ccc:	2701      	movs	r7, #1
 8004cce:	e002      	b.n	8004cd6 <_dtoa_r+0x7ee>
 8004cd0:	2700      	movs	r7, #0
 8004cd2:	e000      	b.n	8004cd6 <_dtoa_r+0x7ee>
 8004cd4:	9f02      	ldr	r7, [sp, #8]
 8004cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cd8:	b143      	cbz	r3, 8004cec <_dtoa_r+0x804>
 8004cda:	692b      	ldr	r3, [r5, #16]
 8004cdc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004ce0:	6918      	ldr	r0, [r3, #16]
 8004ce2:	f000 fa6a 	bl	80051ba <__hi0bits>
 8004ce6:	f1c0 0020 	rsb	r0, r0, #32
 8004cea:	e000      	b.n	8004cee <_dtoa_r+0x806>
 8004cec:	2001      	movs	r0, #1
 8004cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf0:	4418      	add	r0, r3
 8004cf2:	f010 001f 	ands.w	r0, r0, #31
 8004cf6:	d008      	beq.n	8004d0a <_dtoa_r+0x822>
 8004cf8:	f1c0 0320 	rsb	r3, r0, #32
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	dd02      	ble.n	8004d06 <_dtoa_r+0x81e>
 8004d00:	f1c0 001c 	rsb	r0, r0, #28
 8004d04:	e002      	b.n	8004d0c <_dtoa_r+0x824>
 8004d06:	d008      	beq.n	8004d1a <_dtoa_r+0x832>
 8004d08:	4618      	mov	r0, r3
 8004d0a:	301c      	adds	r0, #28
 8004d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d0e:	4403      	add	r3, r0
 8004d10:	9309      	str	r3, [sp, #36]	; 0x24
 8004d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d14:	4403      	add	r3, r0
 8004d16:	4404      	add	r4, r0
 8004d18:	930a      	str	r3, [sp, #40]	; 0x28
 8004d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	dd05      	ble.n	8004d2c <_dtoa_r+0x844>
 8004d20:	4650      	mov	r0, sl
 8004d22:	9907      	ldr	r1, [sp, #28]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f000 fb7d 	bl	8005424 <__lshift>
 8004d2a:	9007      	str	r0, [sp, #28]
 8004d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	dd05      	ble.n	8004d3e <_dtoa_r+0x856>
 8004d32:	4629      	mov	r1, r5
 8004d34:	4650      	mov	r0, sl
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 fb74 	bl	8005424 <__lshift>
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d40:	b1eb      	cbz	r3, 8004d7e <_dtoa_r+0x896>
 8004d42:	9807      	ldr	r0, [sp, #28]
 8004d44:	4629      	mov	r1, r5
 8004d46:	f000 fbc0 	bl	80054ca <__mcmp>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	da17      	bge.n	8004d7e <_dtoa_r+0x896>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	4650      	mov	r0, sl
 8004d52:	9907      	ldr	r1, [sp, #28]
 8004d54:	220a      	movs	r2, #10
 8004d56:	f000 f9f2 	bl	800513e <__multadd>
 8004d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d5c:	9007      	str	r0, [sp, #28]
 8004d5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 8170 	beq.w	8005048 <_dtoa_r+0xb60>
 8004d68:	4631      	mov	r1, r6
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	4650      	mov	r0, sl
 8004d6e:	220a      	movs	r2, #10
 8004d70:	f000 f9e5 	bl	800513e <__multadd>
 8004d74:	9b06      	ldr	r3, [sp, #24]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	4606      	mov	r6, r0
 8004d7a:	dc33      	bgt.n	8004de4 <_dtoa_r+0x8fc>
 8004d7c:	e16d      	b.n	800505a <_dtoa_r+0xb72>
 8004d7e:	9b05      	ldr	r3, [sp, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dc26      	bgt.n	8004dd2 <_dtoa_r+0x8ea>
 8004d84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	dd23      	ble.n	8004dd2 <_dtoa_r+0x8ea>
 8004d8a:	9b05      	ldr	r3, [sp, #20]
 8004d8c:	9306      	str	r3, [sp, #24]
 8004d8e:	9b06      	ldr	r3, [sp, #24]
 8004d90:	b973      	cbnz	r3, 8004db0 <_dtoa_r+0x8c8>
 8004d92:	4629      	mov	r1, r5
 8004d94:	2205      	movs	r2, #5
 8004d96:	4650      	mov	r0, sl
 8004d98:	f000 f9d1 	bl	800513e <__multadd>
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	4629      	mov	r1, r5
 8004da0:	9807      	ldr	r0, [sp, #28]
 8004da2:	f000 fb92 	bl	80054ca <__mcmp>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	dc09      	bgt.n	8004dbe <_dtoa_r+0x8d6>
 8004daa:	e001      	b.n	8004db0 <_dtoa_r+0x8c8>
 8004dac:	2500      	movs	r5, #0
 8004dae:	462e      	mov	r6, r5
 8004db0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004db2:	9c08      	ldr	r4, [sp, #32]
 8004db4:	ea6f 0b03 	mvn.w	fp, r3
 8004db8:	e008      	b.n	8004dcc <_dtoa_r+0x8e4>
 8004dba:	46bb      	mov	fp, r7
 8004dbc:	462e      	mov	r6, r5
 8004dbe:	9b08      	ldr	r3, [sp, #32]
 8004dc0:	9a08      	ldr	r2, [sp, #32]
 8004dc2:	1c5c      	adds	r4, r3, #1
 8004dc4:	2331      	movs	r3, #49	; 0x31
 8004dc6:	7013      	strb	r3, [r2, #0]
 8004dc8:	f10b 0b01 	add.w	fp, fp, #1
 8004dcc:	46b1      	mov	r9, r6
 8004dce:	2600      	movs	r6, #0
 8004dd0:	e114      	b.n	8004ffc <_dtoa_r+0xb14>
 8004dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dd4:	b923      	cbnz	r3, 8004de0 <_dtoa_r+0x8f8>
 8004dd6:	9b05      	ldr	r3, [sp, #20]
 8004dd8:	9306      	str	r3, [sp, #24]
 8004dda:	9f08      	ldr	r7, [sp, #32]
 8004ddc:	9c07      	ldr	r4, [sp, #28]
 8004dde:	e0cc      	b.n	8004f7a <_dtoa_r+0xa92>
 8004de0:	9b05      	ldr	r3, [sp, #20]
 8004de2:	9306      	str	r3, [sp, #24]
 8004de4:	2c00      	cmp	r4, #0
 8004de6:	dd05      	ble.n	8004df4 <_dtoa_r+0x90c>
 8004de8:	4631      	mov	r1, r6
 8004dea:	4650      	mov	r0, sl
 8004dec:	4622      	mov	r2, r4
 8004dee:	f000 fb19 	bl	8005424 <__lshift>
 8004df2:	4606      	mov	r6, r0
 8004df4:	b1b7      	cbz	r7, 8004e24 <_dtoa_r+0x93c>
 8004df6:	6871      	ldr	r1, [r6, #4]
 8004df8:	4650      	mov	r0, sl
 8004dfa:	f000 f954 	bl	80050a6 <_Balloc>
 8004dfe:	6932      	ldr	r2, [r6, #16]
 8004e00:	3202      	adds	r2, #2
 8004e02:	4604      	mov	r4, r0
 8004e04:	f106 010c 	add.w	r1, r6, #12
 8004e08:	0092      	lsls	r2, r2, #2
 8004e0a:	300c      	adds	r0, #12
 8004e0c:	f7fe fd44 	bl	8003898 <memcpy>
 8004e10:	4650      	mov	r0, sl
 8004e12:	4621      	mov	r1, r4
 8004e14:	2201      	movs	r2, #1
 8004e16:	f000 fb05 	bl	8005424 <__lshift>
 8004e1a:	4681      	mov	r9, r0
 8004e1c:	e003      	b.n	8004e26 <_dtoa_r+0x93e>
 8004e1e:	bf00      	nop
 8004e20:	40240000 	.word	0x40240000
 8004e24:	46b1      	mov	r9, r6
 8004e26:	9f08      	ldr	r7, [sp, #32]
 8004e28:	9c07      	ldr	r4, [sp, #28]
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f7ff facd 	bl	80043cc <quorem>
 8004e32:	4631      	mov	r1, r6
 8004e34:	9009      	str	r0, [sp, #36]	; 0x24
 8004e36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f000 fb45 	bl	80054ca <__mcmp>
 8004e40:	464a      	mov	r2, r9
 8004e42:	9005      	str	r0, [sp, #20]
 8004e44:	4629      	mov	r1, r5
 8004e46:	4650      	mov	r0, sl
 8004e48:	f000 fb5b 	bl	8005502 <__mdiff>
 8004e4c:	68c2      	ldr	r2, [r0, #12]
 8004e4e:	4603      	mov	r3, r0
 8004e50:	b93a      	cbnz	r2, 8004e62 <_dtoa_r+0x97a>
 8004e52:	4619      	mov	r1, r3
 8004e54:	4620      	mov	r0, r4
 8004e56:	9307      	str	r3, [sp, #28]
 8004e58:	f000 fb37 	bl	80054ca <__mcmp>
 8004e5c:	9b07      	ldr	r3, [sp, #28]
 8004e5e:	4602      	mov	r2, r0
 8004e60:	e000      	b.n	8004e64 <_dtoa_r+0x97c>
 8004e62:	2201      	movs	r2, #1
 8004e64:	4650      	mov	r0, sl
 8004e66:	4619      	mov	r1, r3
 8004e68:	9207      	str	r2, [sp, #28]
 8004e6a:	f000 f951 	bl	8005110 <_Bfree>
 8004e6e:	9a07      	ldr	r2, [sp, #28]
 8004e70:	b9a2      	cbnz	r2, 8004e9c <_dtoa_r+0x9b4>
 8004e72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e74:	b993      	cbnz	r3, 8004e9c <_dtoa_r+0x9b4>
 8004e76:	9b02      	ldr	r3, [sp, #8]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	b973      	cbnz	r3, 8004e9c <_dtoa_r+0x9b4>
 8004e7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004e82:	463b      	mov	r3, r7
 8004e84:	9407      	str	r4, [sp, #28]
 8004e86:	d040      	beq.n	8004f0a <_dtoa_r+0xa22>
 8004e88:	9b05      	ldr	r3, [sp, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bfc8      	it	gt
 8004e8e:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 8004e90:	f107 0401 	add.w	r4, r7, #1
 8004e94:	bfc8      	it	gt
 8004e96:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 8004e9a:	e03d      	b.n	8004f18 <_dtoa_r+0xa30>
 8004e9c:	9b05      	ldr	r3, [sp, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da04      	bge.n	8004eac <_dtoa_r+0x9c4>
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	46c4      	mov	ip, r8
 8004ea6:	9407      	str	r4, [sp, #28]
 8004ea8:	dc08      	bgt.n	8004ebc <_dtoa_r+0x9d4>
 8004eaa:	e021      	b.n	8004ef0 <_dtoa_r+0xa08>
 8004eac:	d124      	bne.n	8004ef8 <_dtoa_r+0xa10>
 8004eae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004eb0:	bb13      	cbnz	r3, 8004ef8 <_dtoa_r+0xa10>
 8004eb2:	9b02      	ldr	r3, [sp, #8]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	b9f3      	cbnz	r3, 8004ef8 <_dtoa_r+0xa10>
 8004eba:	e7f2      	b.n	8004ea2 <_dtoa_r+0x9ba>
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	4650      	mov	r0, sl
 8004ec2:	9705      	str	r7, [sp, #20]
 8004ec4:	f8cd 8008 	str.w	r8, [sp, #8]
 8004ec8:	f000 faac 	bl	8005424 <__lshift>
 8004ecc:	4629      	mov	r1, r5
 8004ece:	9007      	str	r0, [sp, #28]
 8004ed0:	f000 fafb 	bl	80054ca <__mcmp>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004eda:	9b05      	ldr	r3, [sp, #20]
 8004edc:	dc03      	bgt.n	8004ee6 <_dtoa_r+0x9fe>
 8004ede:	d107      	bne.n	8004ef0 <_dtoa_r+0xa08>
 8004ee0:	f018 0f01 	tst.w	r8, #1
 8004ee4:	d004      	beq.n	8004ef0 <_dtoa_r+0xa08>
 8004ee6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004eea:	d00e      	beq.n	8004f0a <_dtoa_r+0xa22>
 8004eec:	f108 0c01 	add.w	ip, r8, #1
 8004ef0:	1c7c      	adds	r4, r7, #1
 8004ef2:	f887 c000 	strb.w	ip, [r7]
 8004ef6:	e081      	b.n	8004ffc <_dtoa_r+0xb14>
 8004ef8:	2a00      	cmp	r2, #0
 8004efa:	f107 0201 	add.w	r2, r7, #1
 8004efe:	dd0e      	ble.n	8004f1e <_dtoa_r+0xa36>
 8004f00:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004f04:	463b      	mov	r3, r7
 8004f06:	9407      	str	r4, [sp, #28]
 8004f08:	d103      	bne.n	8004f12 <_dtoa_r+0xa2a>
 8004f0a:	2239      	movs	r2, #57	; 0x39
 8004f0c:	3701      	adds	r7, #1
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	e057      	b.n	8004fc2 <_dtoa_r+0xada>
 8004f12:	4614      	mov	r4, r2
 8004f14:	f108 0801 	add.w	r8, r8, #1
 8004f18:	f887 8000 	strb.w	r8, [r7]
 8004f1c:	e06e      	b.n	8004ffc <_dtoa_r+0xb14>
 8004f1e:	9b08      	ldr	r3, [sp, #32]
 8004f20:	f802 8c01 	strb.w	r8, [r2, #-1]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	4617      	mov	r7, r2
 8004f28:	9a06      	ldr	r2, [sp, #24]
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d03a      	beq.n	8004fa4 <_dtoa_r+0xabc>
 8004f2e:	4621      	mov	r1, r4
 8004f30:	220a      	movs	r2, #10
 8004f32:	2300      	movs	r3, #0
 8004f34:	4650      	mov	r0, sl
 8004f36:	f000 f902 	bl	800513e <__multadd>
 8004f3a:	454e      	cmp	r6, r9
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4650      	mov	r0, sl
 8004f42:	f04f 020a 	mov.w	r2, #10
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <_dtoa_r+0xa6e>
 8004f4c:	f000 f8f7 	bl	800513e <__multadd>
 8004f50:	4606      	mov	r6, r0
 8004f52:	4681      	mov	r9, r0
 8004f54:	e769      	b.n	8004e2a <_dtoa_r+0x942>
 8004f56:	f000 f8f2 	bl	800513e <__multadd>
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	220a      	movs	r2, #10
 8004f60:	4650      	mov	r0, sl
 8004f62:	2300      	movs	r3, #0
 8004f64:	f000 f8eb 	bl	800513e <__multadd>
 8004f68:	4681      	mov	r9, r0
 8004f6a:	e75e      	b.n	8004e2a <_dtoa_r+0x942>
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4650      	mov	r0, sl
 8004f70:	220a      	movs	r2, #10
 8004f72:	2300      	movs	r3, #0
 8004f74:	f000 f8e3 	bl	800513e <__multadd>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	f7ff fa25 	bl	80043cc <quorem>
 8004f82:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004f86:	f807 8b01 	strb.w	r8, [r7], #1
 8004f8a:	9b08      	ldr	r3, [sp, #32]
 8004f8c:	9a06      	ldr	r2, [sp, #24]
 8004f8e:	1afb      	subs	r3, r7, r3
 8004f90:	4293      	cmp	r3, r2
 8004f92:	dbeb      	blt.n	8004f6c <_dtoa_r+0xa84>
 8004f94:	9b08      	ldr	r3, [sp, #32]
 8004f96:	2a01      	cmp	r2, #1
 8004f98:	bfac      	ite	ge
 8004f9a:	189b      	addge	r3, r3, r2
 8004f9c:	3301      	addlt	r3, #1
 8004f9e:	46b1      	mov	r9, r6
 8004fa0:	461f      	mov	r7, r3
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	4650      	mov	r0, sl
 8004faa:	f000 fa3b 	bl	8005424 <__lshift>
 8004fae:	4629      	mov	r1, r5
 8004fb0:	9007      	str	r0, [sp, #28]
 8004fb2:	f000 fa8a 	bl	80054ca <__mcmp>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	dc03      	bgt.n	8004fc2 <_dtoa_r+0xada>
 8004fba:	d116      	bne.n	8004fea <_dtoa_r+0xb02>
 8004fbc:	f018 0f01 	tst.w	r8, #1
 8004fc0:	d013      	beq.n	8004fea <_dtoa_r+0xb02>
 8004fc2:	463c      	mov	r4, r7
 8004fc4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8004fc8:	2b39      	cmp	r3, #57	; 0x39
 8004fca:	f104 32ff 	add.w	r2, r4, #4294967295
 8004fce:	d109      	bne.n	8004fe4 <_dtoa_r+0xafc>
 8004fd0:	9b08      	ldr	r3, [sp, #32]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d104      	bne.n	8004fe0 <_dtoa_r+0xaf8>
 8004fd6:	f10b 0b01 	add.w	fp, fp, #1
 8004fda:	2331      	movs	r3, #49	; 0x31
 8004fdc:	9a08      	ldr	r2, [sp, #32]
 8004fde:	e002      	b.n	8004fe6 <_dtoa_r+0xafe>
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	e7ef      	b.n	8004fc4 <_dtoa_r+0xadc>
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	7013      	strb	r3, [r2, #0]
 8004fe8:	e008      	b.n	8004ffc <_dtoa_r+0xb14>
 8004fea:	463c      	mov	r4, r7
 8004fec:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8004ff0:	2b30      	cmp	r3, #48	; 0x30
 8004ff2:	f104 32ff 	add.w	r2, r4, #4294967295
 8004ff6:	d101      	bne.n	8004ffc <_dtoa_r+0xb14>
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	e7f7      	b.n	8004fec <_dtoa_r+0xb04>
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	4629      	mov	r1, r5
 8005000:	f000 f886 	bl	8005110 <_Bfree>
 8005004:	f1b9 0f00 	cmp.w	r9, #0
 8005008:	d00c      	beq.n	8005024 <_dtoa_r+0xb3c>
 800500a:	b12e      	cbz	r6, 8005018 <_dtoa_r+0xb30>
 800500c:	454e      	cmp	r6, r9
 800500e:	d003      	beq.n	8005018 <_dtoa_r+0xb30>
 8005010:	4650      	mov	r0, sl
 8005012:	4631      	mov	r1, r6
 8005014:	f000 f87c 	bl	8005110 <_Bfree>
 8005018:	4650      	mov	r0, sl
 800501a:	4649      	mov	r1, r9
 800501c:	f000 f878 	bl	8005110 <_Bfree>
 8005020:	e000      	b.n	8005024 <_dtoa_r+0xb3c>
 8005022:	46bb      	mov	fp, r7
 8005024:	4650      	mov	r0, sl
 8005026:	9907      	ldr	r1, [sp, #28]
 8005028:	f000 f872 	bl	8005110 <_Bfree>
 800502c:	2300      	movs	r3, #0
 800502e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005030:	7023      	strb	r3, [r4, #0]
 8005032:	f10b 0301 	add.w	r3, fp, #1
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800503a:	b11b      	cbz	r3, 8005044 <_dtoa_r+0xb5c>
 800503c:	601c      	str	r4, [r3, #0]
 800503e:	e001      	b.n	8005044 <_dtoa_r+0xb5c>
 8005040:	480a      	ldr	r0, [pc, #40]	; (800506c <_dtoa_r+0xb84>)
 8005042:	e00f      	b.n	8005064 <_dtoa_r+0xb7c>
 8005044:	9808      	ldr	r0, [sp, #32]
 8005046:	e00d      	b.n	8005064 <_dtoa_r+0xb7c>
 8005048:	9b06      	ldr	r3, [sp, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f73f aec5 	bgt.w	8004dda <_dtoa_r+0x8f2>
 8005050:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005052:	2b02      	cmp	r3, #2
 8005054:	f73f ae9b 	bgt.w	8004d8e <_dtoa_r+0x8a6>
 8005058:	e6bf      	b.n	8004dda <_dtoa_r+0x8f2>
 800505a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800505c:	2b02      	cmp	r3, #2
 800505e:	f73f ae96 	bgt.w	8004d8e <_dtoa_r+0x8a6>
 8005062:	e6bf      	b.n	8004de4 <_dtoa_r+0x8fc>
 8005064:	b017      	add	sp, #92	; 0x5c
 8005066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506a:	bf00      	nop
 800506c:	08006a12 	.word	0x08006a12

08005070 <_localeconv_r>:
 8005070:	4800      	ldr	r0, [pc, #0]	; (8005074 <_localeconv_r+0x4>)
 8005072:	4770      	bx	lr
 8005074:	1ffe89c8 	.word	0x1ffe89c8

08005078 <malloc>:
 8005078:	4b02      	ldr	r3, [pc, #8]	; (8005084 <malloc+0xc>)
 800507a:	4601      	mov	r1, r0
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	f000 bb43 	b.w	8005708 <_malloc_r>
 8005082:	bf00      	nop
 8005084:	1ffe89c4 	.word	0x1ffe89c4

08005088 <memchr>:
 8005088:	b510      	push	{r4, lr}
 800508a:	b2c9      	uxtb	r1, r1
 800508c:	4402      	add	r2, r0
 800508e:	4290      	cmp	r0, r2
 8005090:	4603      	mov	r3, r0
 8005092:	d006      	beq.n	80050a2 <memchr+0x1a>
 8005094:	781c      	ldrb	r4, [r3, #0]
 8005096:	428c      	cmp	r4, r1
 8005098:	f100 0001 	add.w	r0, r0, #1
 800509c:	d1f7      	bne.n	800508e <memchr+0x6>
 800509e:	4618      	mov	r0, r3
 80050a0:	bd10      	pop	{r4, pc}
 80050a2:	2000      	movs	r0, #0
 80050a4:	bd10      	pop	{r4, pc}

080050a6 <_Balloc>:
 80050a6:	b570      	push	{r4, r5, r6, lr}
 80050a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050aa:	4604      	mov	r4, r0
 80050ac:	460e      	mov	r6, r1
 80050ae:	b93d      	cbnz	r5, 80050c0 <_Balloc+0x1a>
 80050b0:	2010      	movs	r0, #16
 80050b2:	f7ff ffe1 	bl	8005078 <malloc>
 80050b6:	6260      	str	r0, [r4, #36]	; 0x24
 80050b8:	6045      	str	r5, [r0, #4]
 80050ba:	6085      	str	r5, [r0, #8]
 80050bc:	6005      	str	r5, [r0, #0]
 80050be:	60c5      	str	r5, [r0, #12]
 80050c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80050c2:	68eb      	ldr	r3, [r5, #12]
 80050c4:	b143      	cbz	r3, 80050d8 <_Balloc+0x32>
 80050c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80050ce:	b178      	cbz	r0, 80050f0 <_Balloc+0x4a>
 80050d0:	6802      	ldr	r2, [r0, #0]
 80050d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80050d6:	e017      	b.n	8005108 <_Balloc+0x62>
 80050d8:	4620      	mov	r0, r4
 80050da:	2104      	movs	r1, #4
 80050dc:	2221      	movs	r2, #33	; 0x21
 80050de:	f000 fac1 	bl	8005664 <_calloc_r>
 80050e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050e4:	60e8      	str	r0, [r5, #12]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ec      	bne.n	80050c6 <_Balloc+0x20>
 80050ec:	2000      	movs	r0, #0
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
 80050f0:	2101      	movs	r1, #1
 80050f2:	fa01 f506 	lsl.w	r5, r1, r6
 80050f6:	1d6a      	adds	r2, r5, #5
 80050f8:	4620      	mov	r0, r4
 80050fa:	0092      	lsls	r2, r2, #2
 80050fc:	f000 fab2 	bl	8005664 <_calloc_r>
 8005100:	2800      	cmp	r0, #0
 8005102:	d0f3      	beq.n	80050ec <_Balloc+0x46>
 8005104:	6046      	str	r6, [r0, #4]
 8005106:	6085      	str	r5, [r0, #8]
 8005108:	2300      	movs	r3, #0
 800510a:	6103      	str	r3, [r0, #16]
 800510c:	60c3      	str	r3, [r0, #12]
 800510e:	bd70      	pop	{r4, r5, r6, pc}

08005110 <_Bfree>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005114:	4606      	mov	r6, r0
 8005116:	460d      	mov	r5, r1
 8005118:	b93c      	cbnz	r4, 800512a <_Bfree+0x1a>
 800511a:	2010      	movs	r0, #16
 800511c:	f7ff ffac 	bl	8005078 <malloc>
 8005120:	6270      	str	r0, [r6, #36]	; 0x24
 8005122:	6044      	str	r4, [r0, #4]
 8005124:	6084      	str	r4, [r0, #8]
 8005126:	6004      	str	r4, [r0, #0]
 8005128:	60c4      	str	r4, [r0, #12]
 800512a:	b13d      	cbz	r5, 800513c <_Bfree+0x2c>
 800512c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800512e:	686a      	ldr	r2, [r5, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005136:	6029      	str	r1, [r5, #0]
 8005138:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800513c:	bd70      	pop	{r4, r5, r6, pc}

0800513e <__multadd>:
 800513e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005142:	690f      	ldr	r7, [r1, #16]
 8005144:	4698      	mov	r8, r3
 8005146:	4606      	mov	r6, r0
 8005148:	460c      	mov	r4, r1
 800514a:	f101 0e14 	add.w	lr, r1, #20
 800514e:	2300      	movs	r3, #0
 8005150:	f8de 0000 	ldr.w	r0, [lr]
 8005154:	b285      	uxth	r5, r0
 8005156:	0c01      	lsrs	r1, r0, #16
 8005158:	fb02 8505 	mla	r5, r2, r5, r8
 800515c:	4351      	muls	r1, r2
 800515e:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8005162:	3301      	adds	r3, #1
 8005164:	b2ad      	uxth	r5, r5
 8005166:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800516a:	42bb      	cmp	r3, r7
 800516c:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 8005170:	f84e 1b04 	str.w	r1, [lr], #4
 8005174:	dbec      	blt.n	8005150 <__multadd+0x12>
 8005176:	f1b8 0f00 	cmp.w	r8, #0
 800517a:	d01b      	beq.n	80051b4 <__multadd+0x76>
 800517c:	68a3      	ldr	r3, [r4, #8]
 800517e:	429f      	cmp	r7, r3
 8005180:	db12      	blt.n	80051a8 <__multadd+0x6a>
 8005182:	6861      	ldr	r1, [r4, #4]
 8005184:	4630      	mov	r0, r6
 8005186:	3101      	adds	r1, #1
 8005188:	f7ff ff8d 	bl	80050a6 <_Balloc>
 800518c:	6922      	ldr	r2, [r4, #16]
 800518e:	3202      	adds	r2, #2
 8005190:	f104 010c 	add.w	r1, r4, #12
 8005194:	4605      	mov	r5, r0
 8005196:	0092      	lsls	r2, r2, #2
 8005198:	300c      	adds	r0, #12
 800519a:	f7fe fb7d 	bl	8003898 <memcpy>
 800519e:	4621      	mov	r1, r4
 80051a0:	4630      	mov	r0, r6
 80051a2:	f7ff ffb5 	bl	8005110 <_Bfree>
 80051a6:	462c      	mov	r4, r5
 80051a8:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 80051ac:	3701      	adds	r7, #1
 80051ae:	f8c3 8014 	str.w	r8, [r3, #20]
 80051b2:	6127      	str	r7, [r4, #16]
 80051b4:	4620      	mov	r0, r4
 80051b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080051ba <__hi0bits>:
 80051ba:	0c03      	lsrs	r3, r0, #16
 80051bc:	041b      	lsls	r3, r3, #16
 80051be:	b913      	cbnz	r3, 80051c6 <__hi0bits+0xc>
 80051c0:	0400      	lsls	r0, r0, #16
 80051c2:	2310      	movs	r3, #16
 80051c4:	e000      	b.n	80051c8 <__hi0bits+0xe>
 80051c6:	2300      	movs	r3, #0
 80051c8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80051cc:	bf04      	itt	eq
 80051ce:	0200      	lsleq	r0, r0, #8
 80051d0:	3308      	addeq	r3, #8
 80051d2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80051d6:	bf04      	itt	eq
 80051d8:	0100      	lsleq	r0, r0, #4
 80051da:	3304      	addeq	r3, #4
 80051dc:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80051e0:	bf04      	itt	eq
 80051e2:	0080      	lsleq	r0, r0, #2
 80051e4:	3302      	addeq	r3, #2
 80051e6:	2800      	cmp	r0, #0
 80051e8:	db03      	blt.n	80051f2 <__hi0bits+0x38>
 80051ea:	0042      	lsls	r2, r0, #1
 80051ec:	d503      	bpl.n	80051f6 <__hi0bits+0x3c>
 80051ee:	1c58      	adds	r0, r3, #1
 80051f0:	4770      	bx	lr
 80051f2:	4618      	mov	r0, r3
 80051f4:	4770      	bx	lr
 80051f6:	2020      	movs	r0, #32
 80051f8:	4770      	bx	lr

080051fa <__lo0bits>:
 80051fa:	6803      	ldr	r3, [r0, #0]
 80051fc:	f013 0207 	ands.w	r2, r3, #7
 8005200:	d00b      	beq.n	800521a <__lo0bits+0x20>
 8005202:	07d9      	lsls	r1, r3, #31
 8005204:	d422      	bmi.n	800524c <__lo0bits+0x52>
 8005206:	079a      	lsls	r2, r3, #30
 8005208:	bf4b      	itete	mi
 800520a:	085b      	lsrmi	r3, r3, #1
 800520c:	089b      	lsrpl	r3, r3, #2
 800520e:	6003      	strmi	r3, [r0, #0]
 8005210:	6003      	strpl	r3, [r0, #0]
 8005212:	bf4c      	ite	mi
 8005214:	2001      	movmi	r0, #1
 8005216:	2002      	movpl	r0, #2
 8005218:	4770      	bx	lr
 800521a:	b299      	uxth	r1, r3
 800521c:	b909      	cbnz	r1, 8005222 <__lo0bits+0x28>
 800521e:	0c1b      	lsrs	r3, r3, #16
 8005220:	2210      	movs	r2, #16
 8005222:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005226:	bf04      	itt	eq
 8005228:	0a1b      	lsreq	r3, r3, #8
 800522a:	3208      	addeq	r2, #8
 800522c:	0719      	lsls	r1, r3, #28
 800522e:	bf04      	itt	eq
 8005230:	091b      	lsreq	r3, r3, #4
 8005232:	3204      	addeq	r2, #4
 8005234:	0799      	lsls	r1, r3, #30
 8005236:	bf04      	itt	eq
 8005238:	089b      	lsreq	r3, r3, #2
 800523a:	3202      	addeq	r2, #2
 800523c:	07d9      	lsls	r1, r3, #31
 800523e:	d402      	bmi.n	8005246 <__lo0bits+0x4c>
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	d005      	beq.n	8005250 <__lo0bits+0x56>
 8005244:	3201      	adds	r2, #1
 8005246:	6003      	str	r3, [r0, #0]
 8005248:	4610      	mov	r0, r2
 800524a:	4770      	bx	lr
 800524c:	2000      	movs	r0, #0
 800524e:	4770      	bx	lr
 8005250:	2020      	movs	r0, #32
 8005252:	4770      	bx	lr

08005254 <__i2b>:
 8005254:	b510      	push	{r4, lr}
 8005256:	460c      	mov	r4, r1
 8005258:	2101      	movs	r1, #1
 800525a:	f7ff ff24 	bl	80050a6 <_Balloc>
 800525e:	2201      	movs	r2, #1
 8005260:	6144      	str	r4, [r0, #20]
 8005262:	6102      	str	r2, [r0, #16]
 8005264:	bd10      	pop	{r4, pc}

08005266 <__multiply>:
 8005266:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526a:	4614      	mov	r4, r2
 800526c:	690a      	ldr	r2, [r1, #16]
 800526e:	6923      	ldr	r3, [r4, #16]
 8005270:	429a      	cmp	r2, r3
 8005272:	bfb8      	it	lt
 8005274:	460b      	movlt	r3, r1
 8005276:	4688      	mov	r8, r1
 8005278:	bfbc      	itt	lt
 800527a:	46a0      	movlt	r8, r4
 800527c:	461c      	movlt	r4, r3
 800527e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005282:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005286:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800528a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800528e:	eb07 0609 	add.w	r6, r7, r9
 8005292:	429e      	cmp	r6, r3
 8005294:	bfc8      	it	gt
 8005296:	3101      	addgt	r1, #1
 8005298:	f7ff ff05 	bl	80050a6 <_Balloc>
 800529c:	f100 0514 	add.w	r5, r0, #20
 80052a0:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80052a4:	462b      	mov	r3, r5
 80052a6:	4563      	cmp	r3, ip
 80052a8:	d203      	bcs.n	80052b2 <__multiply+0x4c>
 80052aa:	2200      	movs	r2, #0
 80052ac:	f843 2b04 	str.w	r2, [r3], #4
 80052b0:	e7f9      	b.n	80052a6 <__multiply+0x40>
 80052b2:	f104 0214 	add.w	r2, r4, #20
 80052b6:	f108 0114 	add.w	r1, r8, #20
 80052ba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80052be:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	9b00      	ldr	r3, [sp, #0]
 80052c6:	9201      	str	r2, [sp, #4]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d257      	bcs.n	800537c <__multiply+0x116>
 80052cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80052d0:	f1bb 0f00 	cmp.w	fp, #0
 80052d4:	d023      	beq.n	800531e <__multiply+0xb8>
 80052d6:	4689      	mov	r9, r1
 80052d8:	46ae      	mov	lr, r5
 80052da:	f04f 0800 	mov.w	r8, #0
 80052de:	f859 4b04 	ldr.w	r4, [r9], #4
 80052e2:	f8be a000 	ldrh.w	sl, [lr]
 80052e6:	b2a3      	uxth	r3, r4
 80052e8:	fb0b a303 	mla	r3, fp, r3, sl
 80052ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80052f0:	f8de 4000 	ldr.w	r4, [lr]
 80052f4:	4443      	add	r3, r8
 80052f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80052fa:	fb0b 840a 	mla	r4, fp, sl, r8
 80052fe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005302:	46f2      	mov	sl, lr
 8005304:	b29b      	uxth	r3, r3
 8005306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800530a:	454f      	cmp	r7, r9
 800530c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005310:	f84a 3b04 	str.w	r3, [sl], #4
 8005314:	d901      	bls.n	800531a <__multiply+0xb4>
 8005316:	46d6      	mov	lr, sl
 8005318:	e7e1      	b.n	80052de <__multiply+0x78>
 800531a:	f8ce 8004 	str.w	r8, [lr, #4]
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005324:	3204      	adds	r2, #4
 8005326:	f1ba 0f00 	cmp.w	sl, #0
 800532a:	d021      	beq.n	8005370 <__multiply+0x10a>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	462c      	mov	r4, r5
 8005330:	4689      	mov	r9, r1
 8005332:	f04f 0800 	mov.w	r8, #0
 8005336:	f8b9 e000 	ldrh.w	lr, [r9]
 800533a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800533e:	fb0a be0e 	mla	lr, sl, lr, fp
 8005342:	44f0      	add	r8, lr
 8005344:	46a3      	mov	fp, r4
 8005346:	b29b      	uxth	r3, r3
 8005348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800534c:	f84b 3b04 	str.w	r3, [fp], #4
 8005350:	f859 3b04 	ldr.w	r3, [r9], #4
 8005354:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8005358:	0c1b      	lsrs	r3, r3, #16
 800535a:	fb0a e303 	mla	r3, sl, r3, lr
 800535e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8005362:	45b9      	cmp	r9, r7
 8005364:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8005368:	d201      	bcs.n	800536e <__multiply+0x108>
 800536a:	465c      	mov	r4, fp
 800536c:	e7e3      	b.n	8005336 <__multiply+0xd0>
 800536e:	6063      	str	r3, [r4, #4]
 8005370:	3504      	adds	r5, #4
 8005372:	e7a7      	b.n	80052c4 <__multiply+0x5e>
 8005374:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8005378:	b913      	cbnz	r3, 8005380 <__multiply+0x11a>
 800537a:	3e01      	subs	r6, #1
 800537c:	2e00      	cmp	r6, #0
 800537e:	dcf9      	bgt.n	8005374 <__multiply+0x10e>
 8005380:	6106      	str	r6, [r0, #16]
 8005382:	b003      	add	sp, #12
 8005384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005388 <__pow5mult>:
 8005388:	f012 0303 	ands.w	r3, r2, #3
 800538c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005390:	4606      	mov	r6, r0
 8005392:	460f      	mov	r7, r1
 8005394:	4615      	mov	r5, r2
 8005396:	d007      	beq.n	80053a8 <__pow5mult+0x20>
 8005398:	3b01      	subs	r3, #1
 800539a:	4a21      	ldr	r2, [pc, #132]	; (8005420 <__pow5mult+0x98>)
 800539c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80053a0:	2300      	movs	r3, #0
 80053a2:	f7ff fecc 	bl	800513e <__multadd>
 80053a6:	4607      	mov	r7, r0
 80053a8:	10ad      	asrs	r5, r5, #2
 80053aa:	d035      	beq.n	8005418 <__pow5mult+0x90>
 80053ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80053ae:	b93c      	cbnz	r4, 80053c0 <__pow5mult+0x38>
 80053b0:	2010      	movs	r0, #16
 80053b2:	f7ff fe61 	bl	8005078 <malloc>
 80053b6:	6270      	str	r0, [r6, #36]	; 0x24
 80053b8:	6044      	str	r4, [r0, #4]
 80053ba:	6084      	str	r4, [r0, #8]
 80053bc:	6004      	str	r4, [r0, #0]
 80053be:	60c4      	str	r4, [r0, #12]
 80053c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80053c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053c8:	b97c      	cbnz	r4, 80053ea <__pow5mult+0x62>
 80053ca:	4630      	mov	r0, r6
 80053cc:	f240 2171 	movw	r1, #625	; 0x271
 80053d0:	f7ff ff40 	bl	8005254 <__i2b>
 80053d4:	2300      	movs	r3, #0
 80053d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80053da:	4604      	mov	r4, r0
 80053dc:	6003      	str	r3, [r0, #0]
 80053de:	e004      	b.n	80053ea <__pow5mult+0x62>
 80053e0:	106d      	asrs	r5, r5, #1
 80053e2:	d019      	beq.n	8005418 <__pow5mult+0x90>
 80053e4:	6820      	ldr	r0, [r4, #0]
 80053e6:	b170      	cbz	r0, 8005406 <__pow5mult+0x7e>
 80053e8:	4604      	mov	r4, r0
 80053ea:	07eb      	lsls	r3, r5, #31
 80053ec:	d5f8      	bpl.n	80053e0 <__pow5mult+0x58>
 80053ee:	4639      	mov	r1, r7
 80053f0:	4622      	mov	r2, r4
 80053f2:	4630      	mov	r0, r6
 80053f4:	f7ff ff37 	bl	8005266 <__multiply>
 80053f8:	4639      	mov	r1, r7
 80053fa:	4680      	mov	r8, r0
 80053fc:	4630      	mov	r0, r6
 80053fe:	f7ff fe87 	bl	8005110 <_Bfree>
 8005402:	4647      	mov	r7, r8
 8005404:	e7ec      	b.n	80053e0 <__pow5mult+0x58>
 8005406:	4630      	mov	r0, r6
 8005408:	4621      	mov	r1, r4
 800540a:	4622      	mov	r2, r4
 800540c:	f7ff ff2b 	bl	8005266 <__multiply>
 8005410:	2300      	movs	r3, #0
 8005412:	6020      	str	r0, [r4, #0]
 8005414:	6003      	str	r3, [r0, #0]
 8005416:	e7e7      	b.n	80053e8 <__pow5mult+0x60>
 8005418:	4638      	mov	r0, r7
 800541a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800541e:	bf00      	nop
 8005420:	08006b40 	.word	0x08006b40

08005424 <__lshift>:
 8005424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	460c      	mov	r4, r1
 800542a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800542e:	6923      	ldr	r3, [r4, #16]
 8005430:	6849      	ldr	r1, [r1, #4]
 8005432:	eb0a 0903 	add.w	r9, sl, r3
 8005436:	68a3      	ldr	r3, [r4, #8]
 8005438:	4607      	mov	r7, r0
 800543a:	4616      	mov	r6, r2
 800543c:	f109 0501 	add.w	r5, r9, #1
 8005440:	429d      	cmp	r5, r3
 8005442:	dd02      	ble.n	800544a <__lshift+0x26>
 8005444:	3101      	adds	r1, #1
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	e7fa      	b.n	8005440 <__lshift+0x1c>
 800544a:	4638      	mov	r0, r7
 800544c:	f7ff fe2b 	bl	80050a6 <_Balloc>
 8005450:	2300      	movs	r3, #0
 8005452:	4680      	mov	r8, r0
 8005454:	f100 0114 	add.w	r1, r0, #20
 8005458:	4553      	cmp	r3, sl
 800545a:	da04      	bge.n	8005466 <__lshift+0x42>
 800545c:	2200      	movs	r2, #0
 800545e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005462:	3301      	adds	r3, #1
 8005464:	e7f8      	b.n	8005458 <__lshift+0x34>
 8005466:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800546a:	6920      	ldr	r0, [r4, #16]
 800546c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005470:	f016 021f 	ands.w	r2, r6, #31
 8005474:	f104 0114 	add.w	r1, r4, #20
 8005478:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800547c:	d014      	beq.n	80054a8 <__lshift+0x84>
 800547e:	f1c2 0c20 	rsb	ip, r2, #32
 8005482:	2000      	movs	r0, #0
 8005484:	680e      	ldr	r6, [r1, #0]
 8005486:	4096      	lsls	r6, r2
 8005488:	4330      	orrs	r0, r6
 800548a:	469a      	mov	sl, r3
 800548c:	f843 0b04 	str.w	r0, [r3], #4
 8005490:	f851 0b04 	ldr.w	r0, [r1], #4
 8005494:	4571      	cmp	r1, lr
 8005496:	fa20 f00c 	lsr.w	r0, r0, ip
 800549a:	d3f3      	bcc.n	8005484 <__lshift+0x60>
 800549c:	f8ca 0004 	str.w	r0, [sl, #4]
 80054a0:	b148      	cbz	r0, 80054b6 <__lshift+0x92>
 80054a2:	f109 0502 	add.w	r5, r9, #2
 80054a6:	e006      	b.n	80054b6 <__lshift+0x92>
 80054a8:	3b04      	subs	r3, #4
 80054aa:	f851 2b04 	ldr.w	r2, [r1], #4
 80054ae:	f843 2f04 	str.w	r2, [r3, #4]!
 80054b2:	4571      	cmp	r1, lr
 80054b4:	d3f9      	bcc.n	80054aa <__lshift+0x86>
 80054b6:	3d01      	subs	r5, #1
 80054b8:	4638      	mov	r0, r7
 80054ba:	f8c8 5010 	str.w	r5, [r8, #16]
 80054be:	4621      	mov	r1, r4
 80054c0:	f7ff fe26 	bl	8005110 <_Bfree>
 80054c4:	4640      	mov	r0, r8
 80054c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080054ca <__mcmp>:
 80054ca:	6903      	ldr	r3, [r0, #16]
 80054cc:	690a      	ldr	r2, [r1, #16]
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	b510      	push	{r4, lr}
 80054d2:	d111      	bne.n	80054f8 <__mcmp+0x2e>
 80054d4:	0092      	lsls	r2, r2, #2
 80054d6:	3014      	adds	r0, #20
 80054d8:	3114      	adds	r1, #20
 80054da:	1883      	adds	r3, r0, r2
 80054dc:	440a      	add	r2, r1
 80054de:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80054e2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80054e6:	428c      	cmp	r4, r1
 80054e8:	d002      	beq.n	80054f0 <__mcmp+0x26>
 80054ea:	d307      	bcc.n	80054fc <__mcmp+0x32>
 80054ec:	2001      	movs	r0, #1
 80054ee:	bd10      	pop	{r4, pc}
 80054f0:	4283      	cmp	r3, r0
 80054f2:	d8f4      	bhi.n	80054de <__mcmp+0x14>
 80054f4:	2000      	movs	r0, #0
 80054f6:	bd10      	pop	{r4, pc}
 80054f8:	4618      	mov	r0, r3
 80054fa:	bd10      	pop	{r4, pc}
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	bd10      	pop	{r4, pc}

08005502 <__mdiff>:
 8005502:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005506:	4607      	mov	r7, r0
 8005508:	460c      	mov	r4, r1
 800550a:	4608      	mov	r0, r1
 800550c:	4611      	mov	r1, r2
 800550e:	4615      	mov	r5, r2
 8005510:	f7ff ffdb 	bl	80054ca <__mcmp>
 8005514:	1e06      	subs	r6, r0, #0
 8005516:	d108      	bne.n	800552a <__mdiff+0x28>
 8005518:	4638      	mov	r0, r7
 800551a:	4631      	mov	r1, r6
 800551c:	f7ff fdc3 	bl	80050a6 <_Balloc>
 8005520:	2301      	movs	r3, #1
 8005522:	6103      	str	r3, [r0, #16]
 8005524:	6146      	str	r6, [r0, #20]
 8005526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800552a:	bfbc      	itt	lt
 800552c:	4623      	movlt	r3, r4
 800552e:	462c      	movlt	r4, r5
 8005530:	4638      	mov	r0, r7
 8005532:	6861      	ldr	r1, [r4, #4]
 8005534:	bfba      	itte	lt
 8005536:	461d      	movlt	r5, r3
 8005538:	2601      	movlt	r6, #1
 800553a:	2600      	movge	r6, #0
 800553c:	f7ff fdb3 	bl	80050a6 <_Balloc>
 8005540:	692b      	ldr	r3, [r5, #16]
 8005542:	60c6      	str	r6, [r0, #12]
 8005544:	6926      	ldr	r6, [r4, #16]
 8005546:	f105 0914 	add.w	r9, r5, #20
 800554a:	3414      	adds	r4, #20
 800554c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8005550:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005554:	f100 0514 	add.w	r5, r0, #20
 8005558:	f04f 0c00 	mov.w	ip, #0
 800555c:	f854 3b04 	ldr.w	r3, [r4], #4
 8005560:	f859 2b04 	ldr.w	r2, [r9], #4
 8005564:	fa1c f183 	uxtah	r1, ip, r3
 8005568:	fa1f fe82 	uxth.w	lr, r2
 800556c:	0c12      	lsrs	r2, r2, #16
 800556e:	ebce 0101 	rsb	r1, lr, r1
 8005572:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8005576:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800557a:	b289      	uxth	r1, r1
 800557c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005580:	45c8      	cmp	r8, r9
 8005582:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005586:	46a6      	mov	lr, r4
 8005588:	f845 3b04 	str.w	r3, [r5], #4
 800558c:	d8e6      	bhi.n	800555c <__mdiff+0x5a>
 800558e:	45be      	cmp	lr, r7
 8005590:	d20e      	bcs.n	80055b0 <__mdiff+0xae>
 8005592:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005596:	fa1c f482 	uxtah	r4, ip, r2
 800559a:	0c12      	lsrs	r2, r2, #16
 800559c:	eb02 4224 	add.w	r2, r2, r4, asr #16
 80055a0:	b2a4      	uxth	r4, r4
 80055a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055a6:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80055aa:	f845 2b04 	str.w	r2, [r5], #4
 80055ae:	e7ee      	b.n	800558e <__mdiff+0x8c>
 80055b0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80055b4:	b90b      	cbnz	r3, 80055ba <__mdiff+0xb8>
 80055b6:	3e01      	subs	r6, #1
 80055b8:	e7fa      	b.n	80055b0 <__mdiff+0xae>
 80055ba:	6106      	str	r6, [r0, #16]
 80055bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080055c0 <__d2b>:
 80055c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80055c4:	2101      	movs	r1, #1
 80055c6:	461d      	mov	r5, r3
 80055c8:	9f08      	ldr	r7, [sp, #32]
 80055ca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80055cc:	4614      	mov	r4, r2
 80055ce:	f7ff fd6a 	bl	80050a6 <_Balloc>
 80055d2:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80055d6:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80055da:	4680      	mov	r8, r0
 80055dc:	b10d      	cbz	r5, 80055e2 <__d2b+0x22>
 80055de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	b1ec      	cbz	r4, 8005622 <__d2b+0x62>
 80055e6:	a802      	add	r0, sp, #8
 80055e8:	f840 4d08 	str.w	r4, [r0, #-8]!
 80055ec:	f7ff fe05 	bl	80051fa <__lo0bits>
 80055f0:	9b00      	ldr	r3, [sp, #0]
 80055f2:	b150      	cbz	r0, 800560a <__d2b+0x4a>
 80055f4:	9a01      	ldr	r2, [sp, #4]
 80055f6:	f1c0 0120 	rsb	r1, r0, #32
 80055fa:	fa02 f101 	lsl.w	r1, r2, r1
 80055fe:	430b      	orrs	r3, r1
 8005600:	40c2      	lsrs	r2, r0
 8005602:	f8c8 3014 	str.w	r3, [r8, #20]
 8005606:	9201      	str	r2, [sp, #4]
 8005608:	e001      	b.n	800560e <__d2b+0x4e>
 800560a:	f8c8 3014 	str.w	r3, [r8, #20]
 800560e:	9b01      	ldr	r3, [sp, #4]
 8005610:	f8c8 3018 	str.w	r3, [r8, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	bf14      	ite	ne
 8005618:	2402      	movne	r4, #2
 800561a:	2401      	moveq	r4, #1
 800561c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005620:	e009      	b.n	8005636 <__d2b+0x76>
 8005622:	a801      	add	r0, sp, #4
 8005624:	f7ff fde9 	bl	80051fa <__lo0bits>
 8005628:	2401      	movs	r4, #1
 800562a:	9b01      	ldr	r3, [sp, #4]
 800562c:	f8c8 3014 	str.w	r3, [r8, #20]
 8005630:	f8c8 4010 	str.w	r4, [r8, #16]
 8005634:	3020      	adds	r0, #32
 8005636:	b135      	cbz	r5, 8005646 <__d2b+0x86>
 8005638:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800563c:	4405      	add	r5, r0
 800563e:	603d      	str	r5, [r7, #0]
 8005640:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005644:	e009      	b.n	800565a <__d2b+0x9a>
 8005646:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800564a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800564e:	6038      	str	r0, [r7, #0]
 8005650:	6918      	ldr	r0, [r3, #16]
 8005652:	f7ff fdb2 	bl	80051ba <__hi0bits>
 8005656:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800565a:	6030      	str	r0, [r6, #0]
 800565c:	4640      	mov	r0, r8
 800565e:	b002      	add	sp, #8
 8005660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005664 <_calloc_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	fb02 f401 	mul.w	r4, r2, r1
 800566a:	4621      	mov	r1, r4
 800566c:	f000 f84c 	bl	8005708 <_malloc_r>
 8005670:	4605      	mov	r5, r0
 8005672:	b118      	cbz	r0, 800567c <_calloc_r+0x18>
 8005674:	2100      	movs	r1, #0
 8005676:	4622      	mov	r2, r4
 8005678:	f7fe f919 	bl	80038ae <memset>
 800567c:	4628      	mov	r0, r5
 800567e:	bd38      	pop	{r3, r4, r5, pc}

08005680 <_free_r>:
 8005680:	b530      	push	{r4, r5, lr}
 8005682:	2900      	cmp	r1, #0
 8005684:	d03d      	beq.n	8005702 <_free_r+0x82>
 8005686:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800568a:	1f0b      	subs	r3, r1, #4
 800568c:	491d      	ldr	r1, [pc, #116]	; (8005704 <_free_r+0x84>)
 800568e:	2a00      	cmp	r2, #0
 8005690:	bfb8      	it	lt
 8005692:	189b      	addlt	r3, r3, r2
 8005694:	680a      	ldr	r2, [r1, #0]
 8005696:	460c      	mov	r4, r1
 8005698:	b912      	cbnz	r2, 80056a0 <_free_r+0x20>
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	600b      	str	r3, [r1, #0]
 800569e:	bd30      	pop	{r4, r5, pc}
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d20d      	bcs.n	80056c0 <_free_r+0x40>
 80056a4:	6819      	ldr	r1, [r3, #0]
 80056a6:	1858      	adds	r0, r3, r1
 80056a8:	4290      	cmp	r0, r2
 80056aa:	bf01      	itttt	eq
 80056ac:	585a      	ldreq	r2, [r3, r1]
 80056ae:	1852      	addeq	r2, r2, r1
 80056b0:	601a      	streq	r2, [r3, #0]
 80056b2:	6842      	ldreq	r2, [r0, #4]
 80056b4:	605a      	str	r2, [r3, #4]
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	bd30      	pop	{r4, r5, pc}
 80056ba:	4299      	cmp	r1, r3
 80056bc:	d803      	bhi.n	80056c6 <_free_r+0x46>
 80056be:	460a      	mov	r2, r1
 80056c0:	6851      	ldr	r1, [r2, #4]
 80056c2:	2900      	cmp	r1, #0
 80056c4:	d1f9      	bne.n	80056ba <_free_r+0x3a>
 80056c6:	6814      	ldr	r4, [r2, #0]
 80056c8:	1915      	adds	r5, r2, r4
 80056ca:	429d      	cmp	r5, r3
 80056cc:	d10a      	bne.n	80056e4 <_free_r+0x64>
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4423      	add	r3, r4
 80056d2:	18d0      	adds	r0, r2, r3
 80056d4:	4288      	cmp	r0, r1
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	d113      	bne.n	8005702 <_free_r+0x82>
 80056da:	6808      	ldr	r0, [r1, #0]
 80056dc:	4403      	add	r3, r0
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	684b      	ldr	r3, [r1, #4]
 80056e2:	e00d      	b.n	8005700 <_free_r+0x80>
 80056e4:	d902      	bls.n	80056ec <_free_r+0x6c>
 80056e6:	230c      	movs	r3, #12
 80056e8:	6003      	str	r3, [r0, #0]
 80056ea:	bd30      	pop	{r4, r5, pc}
 80056ec:	681c      	ldr	r4, [r3, #0]
 80056ee:	1918      	adds	r0, r3, r4
 80056f0:	4288      	cmp	r0, r1
 80056f2:	bf04      	itt	eq
 80056f4:	6808      	ldreq	r0, [r1, #0]
 80056f6:	6849      	ldreq	r1, [r1, #4]
 80056f8:	6059      	str	r1, [r3, #4]
 80056fa:	bf04      	itt	eq
 80056fc:	1900      	addeq	r0, r0, r4
 80056fe:	6018      	streq	r0, [r3, #0]
 8005700:	6053      	str	r3, [r2, #4]
 8005702:	bd30      	pop	{r4, r5, pc}
 8005704:	1ffe8a44 	.word	0x1ffe8a44

08005708 <_malloc_r>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	1ccc      	adds	r4, r1, #3
 800570c:	f024 0403 	bic.w	r4, r4, #3
 8005710:	3408      	adds	r4, #8
 8005712:	2c0c      	cmp	r4, #12
 8005714:	bf38      	it	cc
 8005716:	240c      	movcc	r4, #12
 8005718:	2c00      	cmp	r4, #0
 800571a:	4606      	mov	r6, r0
 800571c:	da03      	bge.n	8005726 <_malloc_r+0x1e>
 800571e:	230c      	movs	r3, #12
 8005720:	6033      	str	r3, [r6, #0]
 8005722:	2000      	movs	r0, #0
 8005724:	bd70      	pop	{r4, r5, r6, pc}
 8005726:	428c      	cmp	r4, r1
 8005728:	d3f9      	bcc.n	800571e <_malloc_r+0x16>
 800572a:	4a20      	ldr	r2, [pc, #128]	; (80057ac <_malloc_r+0xa4>)
 800572c:	6813      	ldr	r3, [r2, #0]
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	b1a1      	cbz	r1, 800575e <_malloc_r+0x56>
 8005734:	680a      	ldr	r2, [r1, #0]
 8005736:	1b12      	subs	r2, r2, r4
 8005738:	d40e      	bmi.n	8005758 <_malloc_r+0x50>
 800573a:	2a0b      	cmp	r2, #11
 800573c:	d903      	bls.n	8005746 <_malloc_r+0x3e>
 800573e:	600a      	str	r2, [r1, #0]
 8005740:	188b      	adds	r3, r1, r2
 8005742:	508c      	str	r4, [r1, r2]
 8005744:	e01f      	b.n	8005786 <_malloc_r+0x7e>
 8005746:	428b      	cmp	r3, r1
 8005748:	bf0d      	iteet	eq
 800574a:	685a      	ldreq	r2, [r3, #4]
 800574c:	684a      	ldrne	r2, [r1, #4]
 800574e:	605a      	strne	r2, [r3, #4]
 8005750:	6002      	streq	r2, [r0, #0]
 8005752:	bf18      	it	ne
 8005754:	460b      	movne	r3, r1
 8005756:	e016      	b.n	8005786 <_malloc_r+0x7e>
 8005758:	460b      	mov	r3, r1
 800575a:	6849      	ldr	r1, [r1, #4]
 800575c:	e7e9      	b.n	8005732 <_malloc_r+0x2a>
 800575e:	4d14      	ldr	r5, [pc, #80]	; (80057b0 <_malloc_r+0xa8>)
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b91b      	cbnz	r3, 800576c <_malloc_r+0x64>
 8005764:	4630      	mov	r0, r6
 8005766:	f000 f971 	bl	8005a4c <_sbrk_r>
 800576a:	6028      	str	r0, [r5, #0]
 800576c:	4630      	mov	r0, r6
 800576e:	4621      	mov	r1, r4
 8005770:	f000 f96c 	bl	8005a4c <_sbrk_r>
 8005774:	1c42      	adds	r2, r0, #1
 8005776:	4603      	mov	r3, r0
 8005778:	d0d1      	beq.n	800571e <_malloc_r+0x16>
 800577a:	1cc5      	adds	r5, r0, #3
 800577c:	f025 0503 	bic.w	r5, r5, #3
 8005780:	4285      	cmp	r5, r0
 8005782:	d10a      	bne.n	800579a <_malloc_r+0x92>
 8005784:	601c      	str	r4, [r3, #0]
 8005786:	f103 000b 	add.w	r0, r3, #11
 800578a:	1d1a      	adds	r2, r3, #4
 800578c:	f020 0007 	bic.w	r0, r0, #7
 8005790:	1a82      	subs	r2, r0, r2
 8005792:	d00a      	beq.n	80057aa <_malloc_r+0xa2>
 8005794:	4251      	negs	r1, r2
 8005796:	5099      	str	r1, [r3, r2]
 8005798:	bd70      	pop	{r4, r5, r6, pc}
 800579a:	4630      	mov	r0, r6
 800579c:	1ae9      	subs	r1, r5, r3
 800579e:	f000 f955 	bl	8005a4c <_sbrk_r>
 80057a2:	3001      	adds	r0, #1
 80057a4:	d0bb      	beq.n	800571e <_malloc_r+0x16>
 80057a6:	462b      	mov	r3, r5
 80057a8:	e7ec      	b.n	8005784 <_malloc_r+0x7c>
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	1ffe8a44 	.word	0x1ffe8a44
 80057b0:	1ffe8a40 	.word	0x1ffe8a40

080057b4 <__ssputs_r>:
 80057b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b8:	688e      	ldr	r6, [r1, #8]
 80057ba:	42b3      	cmp	r3, r6
 80057bc:	4682      	mov	sl, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	4690      	mov	r8, r2
 80057c2:	4699      	mov	r9, r3
 80057c4:	d340      	bcc.n	8005848 <__ssputs_r+0x94>
 80057c6:	898a      	ldrh	r2, [r1, #12]
 80057c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057cc:	d03a      	beq.n	8005844 <__ssputs_r+0x90>
 80057ce:	6825      	ldr	r5, [r4, #0]
 80057d0:	6909      	ldr	r1, [r1, #16]
 80057d2:	1a6f      	subs	r7, r5, r1
 80057d4:	6965      	ldr	r5, [r4, #20]
 80057d6:	2302      	movs	r3, #2
 80057d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80057e0:	1c7b      	adds	r3, r7, #1
 80057e2:	444b      	add	r3, r9
 80057e4:	429d      	cmp	r5, r3
 80057e6:	bf38      	it	cc
 80057e8:	461d      	movcc	r5, r3
 80057ea:	0553      	lsls	r3, r2, #21
 80057ec:	d50f      	bpl.n	800580e <__ssputs_r+0x5a>
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7ff ff8a 	bl	8005708 <_malloc_r>
 80057f4:	4606      	mov	r6, r0
 80057f6:	b198      	cbz	r0, 8005820 <__ssputs_r+0x6c>
 80057f8:	6921      	ldr	r1, [r4, #16]
 80057fa:	463a      	mov	r2, r7
 80057fc:	f7fe f84c 	bl	8003898 <memcpy>
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	e013      	b.n	8005836 <__ssputs_r+0x82>
 800580e:	462a      	mov	r2, r5
 8005810:	f000 f947 	bl	8005aa2 <_realloc_r>
 8005814:	4606      	mov	r6, r0
 8005816:	b970      	cbnz	r0, 8005836 <__ssputs_r+0x82>
 8005818:	4650      	mov	r0, sl
 800581a:	6921      	ldr	r1, [r4, #16]
 800581c:	f7ff ff30 	bl	8005680 <_free_r>
 8005820:	230c      	movs	r3, #12
 8005822:	f8ca 3000 	str.w	r3, [sl]
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800582c:	81a3      	strh	r3, [r4, #12]
 800582e:	f04f 30ff 	mov.w	r0, #4294967295
 8005832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005836:	6126      	str	r6, [r4, #16]
 8005838:	6165      	str	r5, [r4, #20]
 800583a:	443e      	add	r6, r7
 800583c:	1bed      	subs	r5, r5, r7
 800583e:	6026      	str	r6, [r4, #0]
 8005840:	60a5      	str	r5, [r4, #8]
 8005842:	464e      	mov	r6, r9
 8005844:	45b1      	cmp	r9, r6
 8005846:	d200      	bcs.n	800584a <__ssputs_r+0x96>
 8005848:	464e      	mov	r6, r9
 800584a:	4632      	mov	r2, r6
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	4641      	mov	r1, r8
 8005850:	f000 f90c 	bl	8005a6c <memmove>
 8005854:	68a3      	ldr	r3, [r4, #8]
 8005856:	1b9b      	subs	r3, r3, r6
 8005858:	60a3      	str	r3, [r4, #8]
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	441e      	add	r6, r3
 800585e:	6026      	str	r6, [r4, #0]
 8005860:	2000      	movs	r0, #0
 8005862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005868 <_svfiprintf_r>:
 8005868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800586c:	b09d      	sub	sp, #116	; 0x74
 800586e:	4606      	mov	r6, r0
 8005870:	9303      	str	r3, [sp, #12]
 8005872:	898b      	ldrh	r3, [r1, #12]
 8005874:	061c      	lsls	r4, r3, #24
 8005876:	460d      	mov	r5, r1
 8005878:	4690      	mov	r8, r2
 800587a:	d50c      	bpl.n	8005896 <_svfiprintf_r+0x2e>
 800587c:	690b      	ldr	r3, [r1, #16]
 800587e:	b953      	cbnz	r3, 8005896 <_svfiprintf_r+0x2e>
 8005880:	2140      	movs	r1, #64	; 0x40
 8005882:	f7ff ff41 	bl	8005708 <_malloc_r>
 8005886:	6028      	str	r0, [r5, #0]
 8005888:	6128      	str	r0, [r5, #16]
 800588a:	b910      	cbnz	r0, 8005892 <_svfiprintf_r+0x2a>
 800588c:	230c      	movs	r3, #12
 800588e:	6033      	str	r3, [r6, #0]
 8005890:	e0cc      	b.n	8005a2c <_svfiprintf_r+0x1c4>
 8005892:	2340      	movs	r3, #64	; 0x40
 8005894:	616b      	str	r3, [r5, #20]
 8005896:	2300      	movs	r3, #0
 8005898:	9309      	str	r3, [sp, #36]	; 0x24
 800589a:	2320      	movs	r3, #32
 800589c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058a0:	2330      	movs	r3, #48	; 0x30
 80058a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058a6:	4643      	mov	r3, r8
 80058a8:	461c      	mov	r4, r3
 80058aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ae:	b91a      	cbnz	r2, 80058b8 <_svfiprintf_r+0x50>
 80058b0:	ebb4 0908 	subs.w	r9, r4, r8
 80058b4:	d00f      	beq.n	80058d6 <_svfiprintf_r+0x6e>
 80058b6:	e002      	b.n	80058be <_svfiprintf_r+0x56>
 80058b8:	2a25      	cmp	r2, #37	; 0x25
 80058ba:	d1f5      	bne.n	80058a8 <_svfiprintf_r+0x40>
 80058bc:	e7f8      	b.n	80058b0 <_svfiprintf_r+0x48>
 80058be:	4630      	mov	r0, r6
 80058c0:	4629      	mov	r1, r5
 80058c2:	4642      	mov	r2, r8
 80058c4:	464b      	mov	r3, r9
 80058c6:	f7ff ff75 	bl	80057b4 <__ssputs_r>
 80058ca:	3001      	adds	r0, #1
 80058cc:	f000 80a9 	beq.w	8005a22 <_svfiprintf_r+0x1ba>
 80058d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d2:	444b      	add	r3, r9
 80058d4:	9309      	str	r3, [sp, #36]	; 0x24
 80058d6:	7823      	ldrb	r3, [r4, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80a2 	beq.w	8005a22 <_svfiprintf_r+0x1ba>
 80058de:	2300      	movs	r3, #0
 80058e0:	f04f 32ff 	mov.w	r2, #4294967295
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	9307      	str	r3, [sp, #28]
 80058e8:	9205      	str	r2, [sp, #20]
 80058ea:	9306      	str	r3, [sp, #24]
 80058ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058f0:	931a      	str	r3, [sp, #104]	; 0x68
 80058f2:	f104 0801 	add.w	r8, r4, #1
 80058f6:	4644      	mov	r4, r8
 80058f8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8005a44 <_svfiprintf_r+0x1dc>
 80058fc:	7821      	ldrb	r1, [r4, #0]
 80058fe:	4648      	mov	r0, r9
 8005900:	2205      	movs	r2, #5
 8005902:	f7ff fbc1 	bl	8005088 <memchr>
 8005906:	f108 0801 	add.w	r8, r8, #1
 800590a:	9b04      	ldr	r3, [sp, #16]
 800590c:	b130      	cbz	r0, 800591c <_svfiprintf_r+0xb4>
 800590e:	ebc9 0000 	rsb	r0, r9, r0
 8005912:	2201      	movs	r2, #1
 8005914:	4082      	lsls	r2, r0
 8005916:	4313      	orrs	r3, r2
 8005918:	9304      	str	r3, [sp, #16]
 800591a:	e7ec      	b.n	80058f6 <_svfiprintf_r+0x8e>
 800591c:	06d8      	lsls	r0, r3, #27
 800591e:	bf44      	itt	mi
 8005920:	2220      	movmi	r2, #32
 8005922:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005926:	0719      	lsls	r1, r3, #28
 8005928:	bf44      	itt	mi
 800592a:	222b      	movmi	r2, #43	; 0x2b
 800592c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005930:	7822      	ldrb	r2, [r4, #0]
 8005932:	2a2a      	cmp	r2, #42	; 0x2a
 8005934:	d002      	beq.n	800593c <_svfiprintf_r+0xd4>
 8005936:	9907      	ldr	r1, [sp, #28]
 8005938:	4623      	mov	r3, r4
 800593a:	e00e      	b.n	800595a <_svfiprintf_r+0xf2>
 800593c:	9a03      	ldr	r2, [sp, #12]
 800593e:	1d11      	adds	r1, r2, #4
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	9103      	str	r1, [sp, #12]
 8005944:	2a00      	cmp	r2, #0
 8005946:	bfbb      	ittet	lt
 8005948:	4252      	neglt	r2, r2
 800594a:	f043 0302 	orrlt.w	r3, r3, #2
 800594e:	9207      	strge	r2, [sp, #28]
 8005950:	9207      	strlt	r2, [sp, #28]
 8005952:	bfb8      	it	lt
 8005954:	9304      	strlt	r3, [sp, #16]
 8005956:	3401      	adds	r4, #1
 8005958:	e00a      	b.n	8005970 <_svfiprintf_r+0x108>
 800595a:	461c      	mov	r4, r3
 800595c:	3301      	adds	r3, #1
 800595e:	7822      	ldrb	r2, [r4, #0]
 8005960:	3a30      	subs	r2, #48	; 0x30
 8005962:	2a09      	cmp	r2, #9
 8005964:	d803      	bhi.n	800596e <_svfiprintf_r+0x106>
 8005966:	200a      	movs	r0, #10
 8005968:	fb00 2101 	mla	r1, r0, r1, r2
 800596c:	e7f5      	b.n	800595a <_svfiprintf_r+0xf2>
 800596e:	9107      	str	r1, [sp, #28]
 8005970:	7823      	ldrb	r3, [r4, #0]
 8005972:	2b2e      	cmp	r3, #46	; 0x2e
 8005974:	d11a      	bne.n	80059ac <_svfiprintf_r+0x144>
 8005976:	7863      	ldrb	r3, [r4, #1]
 8005978:	2b2a      	cmp	r3, #42	; 0x2a
 800597a:	d10a      	bne.n	8005992 <_svfiprintf_r+0x12a>
 800597c:	9b03      	ldr	r3, [sp, #12]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	9203      	str	r2, [sp, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	bfb8      	it	lt
 8005988:	f04f 33ff 	movlt.w	r3, #4294967295
 800598c:	3402      	adds	r4, #2
 800598e:	9305      	str	r3, [sp, #20]
 8005990:	e00c      	b.n	80059ac <_svfiprintf_r+0x144>
 8005992:	1c61      	adds	r1, r4, #1
 8005994:	2200      	movs	r2, #0
 8005996:	460c      	mov	r4, r1
 8005998:	3101      	adds	r1, #1
 800599a:	7823      	ldrb	r3, [r4, #0]
 800599c:	3b30      	subs	r3, #48	; 0x30
 800599e:	2b09      	cmp	r3, #9
 80059a0:	d803      	bhi.n	80059aa <_svfiprintf_r+0x142>
 80059a2:	200a      	movs	r0, #10
 80059a4:	fb00 3202 	mla	r2, r0, r2, r3
 80059a8:	e7f5      	b.n	8005996 <_svfiprintf_r+0x12e>
 80059aa:	9205      	str	r2, [sp, #20]
 80059ac:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005a48 <_svfiprintf_r+0x1e0>
 80059b0:	7821      	ldrb	r1, [r4, #0]
 80059b2:	4640      	mov	r0, r8
 80059b4:	2203      	movs	r2, #3
 80059b6:	f7ff fb67 	bl	8005088 <memchr>
 80059ba:	b138      	cbz	r0, 80059cc <_svfiprintf_r+0x164>
 80059bc:	9a04      	ldr	r2, [sp, #16]
 80059be:	ebc8 0000 	rsb	r0, r8, r0
 80059c2:	2340      	movs	r3, #64	; 0x40
 80059c4:	4083      	lsls	r3, r0
 80059c6:	4313      	orrs	r3, r2
 80059c8:	9304      	str	r3, [sp, #16]
 80059ca:	3401      	adds	r4, #1
 80059cc:	7821      	ldrb	r1, [r4, #0]
 80059ce:	481a      	ldr	r0, [pc, #104]	; (8005a38 <_svfiprintf_r+0x1d0>)
 80059d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059d4:	2206      	movs	r2, #6
 80059d6:	f104 0801 	add.w	r8, r4, #1
 80059da:	f7ff fb55 	bl	8005088 <memchr>
 80059de:	b188      	cbz	r0, 8005a04 <_svfiprintf_r+0x19c>
 80059e0:	4b16      	ldr	r3, [pc, #88]	; (8005a3c <_svfiprintf_r+0x1d4>)
 80059e2:	b933      	cbnz	r3, 80059f2 <_svfiprintf_r+0x18a>
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	3307      	adds	r3, #7
 80059e8:	f023 0307 	bic.w	r3, r3, #7
 80059ec:	3308      	adds	r3, #8
 80059ee:	9303      	str	r3, [sp, #12]
 80059f0:	e013      	b.n	8005a1a <_svfiprintf_r+0x1b2>
 80059f2:	ab03      	add	r3, sp, #12
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4630      	mov	r0, r6
 80059f8:	a904      	add	r1, sp, #16
 80059fa:	462a      	mov	r2, r5
 80059fc:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <_svfiprintf_r+0x1d8>)
 80059fe:	f7fd ffef 	bl	80039e0 <_printf_float>
 8005a02:	e007      	b.n	8005a14 <_svfiprintf_r+0x1ac>
 8005a04:	ab03      	add	r3, sp, #12
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	4630      	mov	r0, r6
 8005a0a:	a904      	add	r1, sp, #16
 8005a0c:	462a      	mov	r2, r5
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <_svfiprintf_r+0x1d8>)
 8005a10:	f7fe faa0 	bl	8003f54 <_printf_i>
 8005a14:	1c42      	adds	r2, r0, #1
 8005a16:	4607      	mov	r7, r0
 8005a18:	d003      	beq.n	8005a22 <_svfiprintf_r+0x1ba>
 8005a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1c:	443b      	add	r3, r7
 8005a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a20:	e741      	b.n	80058a6 <_svfiprintf_r+0x3e>
 8005a22:	89ab      	ldrh	r3, [r5, #12]
 8005a24:	065b      	lsls	r3, r3, #25
 8005a26:	d401      	bmi.n	8005a2c <_svfiprintf_r+0x1c4>
 8005a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a2a:	e001      	b.n	8005a30 <_svfiprintf_r+0x1c8>
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	b01d      	add	sp, #116	; 0x74
 8005a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a36:	bf00      	nop
 8005a38:	08006b56 	.word	0x08006b56
 8005a3c:	080039e1 	.word	0x080039e1
 8005a40:	080057b5 	.word	0x080057b5
 8005a44:	08006b4c 	.word	0x08006b4c
 8005a48:	08006b52 	.word	0x08006b52

08005a4c <_sbrk_r>:
 8005a4c:	b538      	push	{r3, r4, r5, lr}
 8005a4e:	4c06      	ldr	r4, [pc, #24]	; (8005a68 <_sbrk_r+0x1c>)
 8005a50:	2300      	movs	r3, #0
 8005a52:	4605      	mov	r5, r0
 8005a54:	4608      	mov	r0, r1
 8005a56:	6023      	str	r3, [r4, #0]
 8005a58:	f7fb fe30 	bl	80016bc <_sbrk>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	d102      	bne.n	8005a66 <_sbrk_r+0x1a>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	b103      	cbz	r3, 8005a66 <_sbrk_r+0x1a>
 8005a64:	602b      	str	r3, [r5, #0]
 8005a66:	bd38      	pop	{r3, r4, r5, pc}
 8005a68:	1ffea274 	.word	0x1ffea274

08005a6c <memmove>:
 8005a6c:	4281      	cmp	r1, r0
 8005a6e:	b510      	push	{r4, lr}
 8005a70:	eb01 0302 	add.w	r3, r1, r2
 8005a74:	d301      	bcc.n	8005a7a <memmove+0xe>
 8005a76:	1e42      	subs	r2, r0, #1
 8005a78:	e00b      	b.n	8005a92 <memmove+0x26>
 8005a7a:	4298      	cmp	r0, r3
 8005a7c:	d2fb      	bcs.n	8005a76 <memmove+0xa>
 8005a7e:	1881      	adds	r1, r0, r2
 8005a80:	1ad2      	subs	r2, r2, r3
 8005a82:	42d3      	cmn	r3, r2
 8005a84:	d004      	beq.n	8005a90 <memmove+0x24>
 8005a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a8a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005a8e:	e7f8      	b.n	8005a82 <memmove+0x16>
 8005a90:	bd10      	pop	{r4, pc}
 8005a92:	4299      	cmp	r1, r3
 8005a94:	d004      	beq.n	8005aa0 <memmove+0x34>
 8005a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a9a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005a9e:	e7f8      	b.n	8005a92 <memmove+0x26>
 8005aa0:	bd10      	pop	{r4, pc}

08005aa2 <_realloc_r>:
 8005aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	4615      	mov	r5, r2
 8005aa8:	460e      	mov	r6, r1
 8005aaa:	b921      	cbnz	r1, 8005ab6 <_realloc_r+0x14>
 8005aac:	4611      	mov	r1, r2
 8005aae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ab2:	f7ff be29 	b.w	8005708 <_malloc_r>
 8005ab6:	b91a      	cbnz	r2, 8005ac0 <_realloc_r+0x1e>
 8005ab8:	f7ff fde2 	bl	8005680 <_free_r>
 8005abc:	4628      	mov	r0, r5
 8005abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac0:	f000 f815 	bl	8005aee <_malloc_usable_size_r>
 8005ac4:	42a8      	cmp	r0, r5
 8005ac6:	d20e      	bcs.n	8005ae6 <_realloc_r+0x44>
 8005ac8:	4638      	mov	r0, r7
 8005aca:	4629      	mov	r1, r5
 8005acc:	f7ff fe1c 	bl	8005708 <_malloc_r>
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	b150      	cbz	r0, 8005aea <_realloc_r+0x48>
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	462a      	mov	r2, r5
 8005ad8:	f7fd fede 	bl	8003898 <memcpy>
 8005adc:	4638      	mov	r0, r7
 8005ade:	4631      	mov	r1, r6
 8005ae0:	f7ff fdce 	bl	8005680 <_free_r>
 8005ae4:	e001      	b.n	8005aea <_realloc_r+0x48>
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aea:	4620      	mov	r0, r4
 8005aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005aee <_malloc_usable_size_r>:
 8005aee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005af2:	2800      	cmp	r0, #0
 8005af4:	bfbe      	ittt	lt
 8005af6:	1809      	addlt	r1, r1, r0
 8005af8:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8005afc:	18c0      	addlt	r0, r0, r3
 8005afe:	3804      	subs	r0, #4
 8005b00:	4770      	bx	lr
	...

08005b04 <__aeabi_dmul>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005b0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005b0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005b12:	bf1d      	ittte	ne
 8005b14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005b18:	ea94 0f0c 	teqne	r4, ip
 8005b1c:	ea95 0f0c 	teqne	r5, ip
 8005b20:	f000 f8de 	bleq	8005ce0 <__aeabi_dmul+0x1dc>
 8005b24:	442c      	add	r4, r5
 8005b26:	ea81 0603 	eor.w	r6, r1, r3
 8005b2a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005b2e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005b32:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005b36:	bf18      	it	ne
 8005b38:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005b3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b44:	d038      	beq.n	8005bb8 <__aeabi_dmul+0xb4>
 8005b46:	fba0 ce02 	umull	ip, lr, r0, r2
 8005b4a:	f04f 0500 	mov.w	r5, #0
 8005b4e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005b52:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005b56:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005b5a:	f04f 0600 	mov.w	r6, #0
 8005b5e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005b62:	f09c 0f00 	teq	ip, #0
 8005b66:	bf18      	it	ne
 8005b68:	f04e 0e01 	orrne.w	lr, lr, #1
 8005b6c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005b70:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005b74:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005b78:	d204      	bcs.n	8005b84 <__aeabi_dmul+0x80>
 8005b7a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005b7e:	416d      	adcs	r5, r5
 8005b80:	eb46 0606 	adc.w	r6, r6, r6
 8005b84:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005b88:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005b8c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005b90:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005b94:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005b98:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005b9c:	bf88      	it	hi
 8005b9e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005ba2:	d81e      	bhi.n	8005be2 <__aeabi_dmul+0xde>
 8005ba4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005ba8:	bf08      	it	eq
 8005baa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005bae:	f150 0000 	adcs.w	r0, r0, #0
 8005bb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005bbc:	ea46 0101 	orr.w	r1, r6, r1
 8005bc0:	ea40 0002 	orr.w	r0, r0, r2
 8005bc4:	ea81 0103 	eor.w	r1, r1, r3
 8005bc8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005bcc:	bfc2      	ittt	gt
 8005bce:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005bd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005bd6:	bd70      	popgt	{r4, r5, r6, pc}
 8005bd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005bdc:	f04f 0e00 	mov.w	lr, #0
 8005be0:	3c01      	subs	r4, #1
 8005be2:	f300 80ab 	bgt.w	8005d3c <__aeabi_dmul+0x238>
 8005be6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005bea:	bfde      	ittt	le
 8005bec:	2000      	movle	r0, #0
 8005bee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005bf2:	bd70      	pople	{r4, r5, r6, pc}
 8005bf4:	f1c4 0400 	rsb	r4, r4, #0
 8005bf8:	3c20      	subs	r4, #32
 8005bfa:	da35      	bge.n	8005c68 <__aeabi_dmul+0x164>
 8005bfc:	340c      	adds	r4, #12
 8005bfe:	dc1b      	bgt.n	8005c38 <__aeabi_dmul+0x134>
 8005c00:	f104 0414 	add.w	r4, r4, #20
 8005c04:	f1c4 0520 	rsb	r5, r4, #32
 8005c08:	fa00 f305 	lsl.w	r3, r0, r5
 8005c0c:	fa20 f004 	lsr.w	r0, r0, r4
 8005c10:	fa01 f205 	lsl.w	r2, r1, r5
 8005c14:	ea40 0002 	orr.w	r0, r0, r2
 8005c18:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005c1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005c20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005c24:	fa21 f604 	lsr.w	r6, r1, r4
 8005c28:	eb42 0106 	adc.w	r1, r2, r6
 8005c2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005c30:	bf08      	it	eq
 8005c32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
 8005c38:	f1c4 040c 	rsb	r4, r4, #12
 8005c3c:	f1c4 0520 	rsb	r5, r4, #32
 8005c40:	fa00 f304 	lsl.w	r3, r0, r4
 8005c44:	fa20 f005 	lsr.w	r0, r0, r5
 8005c48:	fa01 f204 	lsl.w	r2, r1, r4
 8005c4c:	ea40 0002 	orr.w	r0, r0, r2
 8005c50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005c54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005c58:	f141 0100 	adc.w	r1, r1, #0
 8005c5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005c60:	bf08      	it	eq
 8005c62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
 8005c68:	f1c4 0520 	rsb	r5, r4, #32
 8005c6c:	fa00 f205 	lsl.w	r2, r0, r5
 8005c70:	ea4e 0e02 	orr.w	lr, lr, r2
 8005c74:	fa20 f304 	lsr.w	r3, r0, r4
 8005c78:	fa01 f205 	lsl.w	r2, r1, r5
 8005c7c:	ea43 0302 	orr.w	r3, r3, r2
 8005c80:	fa21 f004 	lsr.w	r0, r1, r4
 8005c84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005c88:	fa21 f204 	lsr.w	r2, r1, r4
 8005c8c:	ea20 0002 	bic.w	r0, r0, r2
 8005c90:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005c94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005c98:	bf08      	it	eq
 8005c9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	f094 0f00 	teq	r4, #0
 8005ca4:	d10f      	bne.n	8005cc6 <__aeabi_dmul+0x1c2>
 8005ca6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005caa:	0040      	lsls	r0, r0, #1
 8005cac:	eb41 0101 	adc.w	r1, r1, r1
 8005cb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005cb4:	bf08      	it	eq
 8005cb6:	3c01      	subeq	r4, #1
 8005cb8:	d0f7      	beq.n	8005caa <__aeabi_dmul+0x1a6>
 8005cba:	ea41 0106 	orr.w	r1, r1, r6
 8005cbe:	f095 0f00 	teq	r5, #0
 8005cc2:	bf18      	it	ne
 8005cc4:	4770      	bxne	lr
 8005cc6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005cca:	0052      	lsls	r2, r2, #1
 8005ccc:	eb43 0303 	adc.w	r3, r3, r3
 8005cd0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005cd4:	bf08      	it	eq
 8005cd6:	3d01      	subeq	r5, #1
 8005cd8:	d0f7      	beq.n	8005cca <__aeabi_dmul+0x1c6>
 8005cda:	ea43 0306 	orr.w	r3, r3, r6
 8005cde:	4770      	bx	lr
 8005ce0:	ea94 0f0c 	teq	r4, ip
 8005ce4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005ce8:	bf18      	it	ne
 8005cea:	ea95 0f0c 	teqne	r5, ip
 8005cee:	d00c      	beq.n	8005d0a <__aeabi_dmul+0x206>
 8005cf0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005cf4:	bf18      	it	ne
 8005cf6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005cfa:	d1d1      	bne.n	8005ca0 <__aeabi_dmul+0x19c>
 8005cfc:	ea81 0103 	eor.w	r1, r1, r3
 8005d00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005d04:	f04f 0000 	mov.w	r0, #0
 8005d08:	bd70      	pop	{r4, r5, r6, pc}
 8005d0a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005d0e:	bf06      	itte	eq
 8005d10:	4610      	moveq	r0, r2
 8005d12:	4619      	moveq	r1, r3
 8005d14:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005d18:	d019      	beq.n	8005d4e <__aeabi_dmul+0x24a>
 8005d1a:	ea94 0f0c 	teq	r4, ip
 8005d1e:	d102      	bne.n	8005d26 <__aeabi_dmul+0x222>
 8005d20:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005d24:	d113      	bne.n	8005d4e <__aeabi_dmul+0x24a>
 8005d26:	ea95 0f0c 	teq	r5, ip
 8005d2a:	d105      	bne.n	8005d38 <__aeabi_dmul+0x234>
 8005d2c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005d30:	bf1c      	itt	ne
 8005d32:	4610      	movne	r0, r2
 8005d34:	4619      	movne	r1, r3
 8005d36:	d10a      	bne.n	8005d4e <__aeabi_dmul+0x24a>
 8005d38:	ea81 0103 	eor.w	r1, r1, r3
 8005d3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005d40:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005d44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d48:	f04f 0000 	mov.w	r0, #0
 8005d4c:	bd70      	pop	{r4, r5, r6, pc}
 8005d4e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005d52:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005d56:	bd70      	pop	{r4, r5, r6, pc}

08005d58 <__aeabi_ddiv>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005d5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005d62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005d66:	bf1d      	ittte	ne
 8005d68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005d6c:	ea94 0f0c 	teqne	r4, ip
 8005d70:	ea95 0f0c 	teqne	r5, ip
 8005d74:	f000 f8a7 	bleq	8005ec6 <__aeabi_ddiv+0x16e>
 8005d78:	eba4 0405 	sub.w	r4, r4, r5
 8005d7c:	ea81 0e03 	eor.w	lr, r1, r3
 8005d80:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005d84:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005d88:	f000 8088 	beq.w	8005e9c <__aeabi_ddiv+0x144>
 8005d8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005d90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005d94:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005d98:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005d9c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005da0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005da4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005da8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005dac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005db0:	429d      	cmp	r5, r3
 8005db2:	bf08      	it	eq
 8005db4:	4296      	cmpeq	r6, r2
 8005db6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005dba:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005dbe:	d202      	bcs.n	8005dc6 <__aeabi_ddiv+0x6e>
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8005dc6:	1ab6      	subs	r6, r6, r2
 8005dc8:	eb65 0503 	sbc.w	r5, r5, r3
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	ea4f 0232 	mov.w	r2, r2, rrx
 8005dd2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005dd6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005dda:	ebb6 0e02 	subs.w	lr, r6, r2
 8005dde:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005de2:	bf22      	ittt	cs
 8005de4:	1ab6      	subcs	r6, r6, r2
 8005de6:	4675      	movcs	r5, lr
 8005de8:	ea40 000c 	orrcs.w	r0, r0, ip
 8005dec:	085b      	lsrs	r3, r3, #1
 8005dee:	ea4f 0232 	mov.w	r2, r2, rrx
 8005df2:	ebb6 0e02 	subs.w	lr, r6, r2
 8005df6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005dfa:	bf22      	ittt	cs
 8005dfc:	1ab6      	subcs	r6, r6, r2
 8005dfe:	4675      	movcs	r5, lr
 8005e00:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005e04:	085b      	lsrs	r3, r3, #1
 8005e06:	ea4f 0232 	mov.w	r2, r2, rrx
 8005e0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8005e0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005e12:	bf22      	ittt	cs
 8005e14:	1ab6      	subcs	r6, r6, r2
 8005e16:	4675      	movcs	r5, lr
 8005e18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005e1c:	085b      	lsrs	r3, r3, #1
 8005e1e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005e22:	ebb6 0e02 	subs.w	lr, r6, r2
 8005e26:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005e2a:	bf22      	ittt	cs
 8005e2c:	1ab6      	subcs	r6, r6, r2
 8005e2e:	4675      	movcs	r5, lr
 8005e30:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005e34:	ea55 0e06 	orrs.w	lr, r5, r6
 8005e38:	d018      	beq.n	8005e6c <__aeabi_ddiv+0x114>
 8005e3a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005e3e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005e42:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005e46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005e4a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005e4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005e52:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005e56:	d1c0      	bne.n	8005dda <__aeabi_ddiv+0x82>
 8005e58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005e5c:	d10b      	bne.n	8005e76 <__aeabi_ddiv+0x11e>
 8005e5e:	ea41 0100 	orr.w	r1, r1, r0
 8005e62:	f04f 0000 	mov.w	r0, #0
 8005e66:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005e6a:	e7b6      	b.n	8005dda <__aeabi_ddiv+0x82>
 8005e6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005e70:	bf04      	itt	eq
 8005e72:	4301      	orreq	r1, r0
 8005e74:	2000      	moveq	r0, #0
 8005e76:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005e7a:	bf88      	it	hi
 8005e7c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005e80:	f63f aeaf 	bhi.w	8005be2 <__aeabi_dmul+0xde>
 8005e84:	ebb5 0c03 	subs.w	ip, r5, r3
 8005e88:	bf04      	itt	eq
 8005e8a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005e8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005e92:	f150 0000 	adcs.w	r0, r0, #0
 8005e96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}
 8005e9c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005ea0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005ea4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005ea8:	bfc2      	ittt	gt
 8005eaa:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005eae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005eb2:	bd70      	popgt	{r4, r5, r6, pc}
 8005eb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005eb8:	f04f 0e00 	mov.w	lr, #0
 8005ebc:	3c01      	subs	r4, #1
 8005ebe:	e690      	b.n	8005be2 <__aeabi_dmul+0xde>
 8005ec0:	ea45 0e06 	orr.w	lr, r5, r6
 8005ec4:	e68d      	b.n	8005be2 <__aeabi_dmul+0xde>
 8005ec6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005eca:	ea94 0f0c 	teq	r4, ip
 8005ece:	bf08      	it	eq
 8005ed0:	ea95 0f0c 	teqeq	r5, ip
 8005ed4:	f43f af3b 	beq.w	8005d4e <__aeabi_dmul+0x24a>
 8005ed8:	ea94 0f0c 	teq	r4, ip
 8005edc:	d10a      	bne.n	8005ef4 <__aeabi_ddiv+0x19c>
 8005ede:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005ee2:	f47f af34 	bne.w	8005d4e <__aeabi_dmul+0x24a>
 8005ee6:	ea95 0f0c 	teq	r5, ip
 8005eea:	f47f af25 	bne.w	8005d38 <__aeabi_dmul+0x234>
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	e72c      	b.n	8005d4e <__aeabi_dmul+0x24a>
 8005ef4:	ea95 0f0c 	teq	r5, ip
 8005ef8:	d106      	bne.n	8005f08 <__aeabi_ddiv+0x1b0>
 8005efa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005efe:	f43f aefd 	beq.w	8005cfc <__aeabi_dmul+0x1f8>
 8005f02:	4610      	mov	r0, r2
 8005f04:	4619      	mov	r1, r3
 8005f06:	e722      	b.n	8005d4e <__aeabi_dmul+0x24a>
 8005f08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005f0c:	bf18      	it	ne
 8005f0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005f12:	f47f aec5 	bne.w	8005ca0 <__aeabi_dmul+0x19c>
 8005f16:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005f1a:	f47f af0d 	bne.w	8005d38 <__aeabi_dmul+0x234>
 8005f1e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005f22:	f47f aeeb 	bne.w	8005cfc <__aeabi_dmul+0x1f8>
 8005f26:	e712      	b.n	8005d4e <__aeabi_dmul+0x24a>

08005f28 <__gedf2>:
 8005f28:	f04f 3cff 	mov.w	ip, #4294967295
 8005f2c:	e006      	b.n	8005f3c <__cmpdf2+0x4>
 8005f2e:	bf00      	nop

08005f30 <__ledf2>:
 8005f30:	f04f 0c01 	mov.w	ip, #1
 8005f34:	e002      	b.n	8005f3c <__cmpdf2+0x4>
 8005f36:	bf00      	nop

08005f38 <__cmpdf2>:
 8005f38:	f04f 0c01 	mov.w	ip, #1
 8005f3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005f40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005f48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005f4c:	bf18      	it	ne
 8005f4e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005f52:	d01b      	beq.n	8005f8c <__cmpdf2+0x54>
 8005f54:	b001      	add	sp, #4
 8005f56:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005f5a:	bf0c      	ite	eq
 8005f5c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005f60:	ea91 0f03 	teqne	r1, r3
 8005f64:	bf02      	ittt	eq
 8005f66:	ea90 0f02 	teqeq	r0, r2
 8005f6a:	2000      	moveq	r0, #0
 8005f6c:	4770      	bxeq	lr
 8005f6e:	f110 0f00 	cmn.w	r0, #0
 8005f72:	ea91 0f03 	teq	r1, r3
 8005f76:	bf58      	it	pl
 8005f78:	4299      	cmppl	r1, r3
 8005f7a:	bf08      	it	eq
 8005f7c:	4290      	cmpeq	r0, r2
 8005f7e:	bf2c      	ite	cs
 8005f80:	17d8      	asrcs	r0, r3, #31
 8005f82:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005f86:	f040 0001 	orr.w	r0, r0, #1
 8005f8a:	4770      	bx	lr
 8005f8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005f90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005f94:	d102      	bne.n	8005f9c <__cmpdf2+0x64>
 8005f96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005f9a:	d107      	bne.n	8005fac <__cmpdf2+0x74>
 8005f9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005fa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005fa4:	d1d6      	bne.n	8005f54 <__cmpdf2+0x1c>
 8005fa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005faa:	d0d3      	beq.n	8005f54 <__cmpdf2+0x1c>
 8005fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop

08005fb4 <__aeabi_cdrcmple>:
 8005fb4:	4684      	mov	ip, r0
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4662      	mov	r2, ip
 8005fba:	468c      	mov	ip, r1
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4663      	mov	r3, ip
 8005fc0:	e000      	b.n	8005fc4 <__aeabi_cdcmpeq>
 8005fc2:	bf00      	nop

08005fc4 <__aeabi_cdcmpeq>:
 8005fc4:	b501      	push	{r0, lr}
 8005fc6:	f7ff ffb7 	bl	8005f38 <__cmpdf2>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	bf48      	it	mi
 8005fce:	f110 0f00 	cmnmi.w	r0, #0
 8005fd2:	bd01      	pop	{r0, pc}

08005fd4 <__aeabi_dcmpeq>:
 8005fd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005fd8:	f7ff fff4 	bl	8005fc4 <__aeabi_cdcmpeq>
 8005fdc:	bf0c      	ite	eq
 8005fde:	2001      	moveq	r0, #1
 8005fe0:	2000      	movne	r0, #0
 8005fe2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005fe6:	bf00      	nop

08005fe8 <__aeabi_dcmplt>:
 8005fe8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005fec:	f7ff ffea 	bl	8005fc4 <__aeabi_cdcmpeq>
 8005ff0:	bf34      	ite	cc
 8005ff2:	2001      	movcc	r0, #1
 8005ff4:	2000      	movcs	r0, #0
 8005ff6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005ffa:	bf00      	nop

08005ffc <__aeabi_dcmple>:
 8005ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006000:	f7ff ffe0 	bl	8005fc4 <__aeabi_cdcmpeq>
 8006004:	bf94      	ite	ls
 8006006:	2001      	movls	r0, #1
 8006008:	2000      	movhi	r0, #0
 800600a:	f85d fb08 	ldr.w	pc, [sp], #8
 800600e:	bf00      	nop

08006010 <__aeabi_dcmpge>:
 8006010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006014:	f7ff ffce 	bl	8005fb4 <__aeabi_cdrcmple>
 8006018:	bf94      	ite	ls
 800601a:	2001      	movls	r0, #1
 800601c:	2000      	movhi	r0, #0
 800601e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006022:	bf00      	nop

08006024 <__aeabi_dcmpgt>:
 8006024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006028:	f7ff ffc4 	bl	8005fb4 <__aeabi_cdrcmple>
 800602c:	bf34      	ite	cc
 800602e:	2001      	movcc	r0, #1
 8006030:	2000      	movcs	r0, #0
 8006032:	f85d fb08 	ldr.w	pc, [sp], #8
 8006036:	bf00      	nop

08006038 <__aeabi_d2iz>:
 8006038:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800603c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006040:	d215      	bcs.n	800606e <__aeabi_d2iz+0x36>
 8006042:	d511      	bpl.n	8006068 <__aeabi_d2iz+0x30>
 8006044:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006048:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800604c:	d912      	bls.n	8006074 <__aeabi_d2iz+0x3c>
 800604e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006052:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006056:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800605a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800605e:	fa23 f002 	lsr.w	r0, r3, r2
 8006062:	bf18      	it	ne
 8006064:	4240      	negne	r0, r0
 8006066:	4770      	bx	lr
 8006068:	f04f 0000 	mov.w	r0, #0
 800606c:	4770      	bx	lr
 800606e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006072:	d105      	bne.n	8006080 <__aeabi_d2iz+0x48>
 8006074:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006078:	bf08      	it	eq
 800607a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800607e:	4770      	bx	lr
 8006080:	f04f 0000 	mov.w	r0, #0
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop

08006088 <UART_0_channel_config>:
 8006088:	8400 0003 0800 0108 0010 0000               ............

08006094 <UART_0_tx_pin_config>:
 8006094:	0088 0000 0001 0000 0002 0000               ............

080060a0 <UART_0_tx_pin>:
 80060a0:	8500 4802 0001 0000 6094 0800               ...H.....`..

080060ac <UART_0_config>:
 80060ac:	6088 0800 1f5d 0800 2c19 0800 2c31 0800     .`..]....,..1,..
	...
 80060d0:	60a0 0800 0000 0000 0300 0000               .`..........

080060dc <UART_0_rx_pin_config>:
 80060dc:	0000 0000 0001 0000 0002 0000               ............

080060e8 <Timer0_INT>:
 80060e8:	3f39 0100                                   9?..

080060ec <LED1>:
 80060ec:	8500 4802 0080 0000 0000 0001 0000 0000     ...H............
 80060fc:	0009 0000                                   ....

08006100 <BUTTON1>:
 8006100:	8f00 4802 0010 0000 0000 0000 0000 0000     ...H............
 8006110:	000d 0000 0230 0101 0000 0001 0000 0000     ....0...........
 8006120:	0000 0001 0102 0101                         ........

08006128 <DigiCertGlobalRootG2>:
 8006128:	2d2d 2d2d 422d 4745 4e49 4320 5245 4954     -----BEGIN CERTI
 8006138:	4946 4143 4554 2d2d 2d2d 0a2d 494d 4449     FICATE-----.MIID
 8006148:	6a6a 4343 6e41 6761 7741 4249 6741 5149     jjCCAnagAwIBAgIQ
 8006158:	7a41 7872 7135 5263 6171 3743 474b 7853     Azrx5qcRqaC7KGSx
 8006168:	5148 366e 5435 4e41 6742 716b 6b68 4769     HQn65TANBgkqhkiG
 8006178:	7739 4230 5141 4673 4441 6842 4d0a 7351     9w0BAQsFADBh.MQs
 8006188:	4377 5951 5644 5151 4547 4a77 5556 457a     wCQYDVQQGEwJVUzE
 8006198:	4d56 4d42 4147 5531 4345 4d68 524d 6c47     VMBMGA1UEChMMRGl
 80061a8:	616e 4e55 636c 516e 5367 3557 4d6a 6b52     naUNlcnQgSW5jMRk
 80061b8:	4677 5977 5644 5151 454c 4278 0a33 3364     wFwYDVQQLExB3.d3
 80061c8:	7563 475a 6e6c 5761 6c4e 6e63 7551 3259     cuZGlnaWNlcnQuY2
 80061d8:	7439 534d 7741 6748 4459 5156 4451 7845     9tMSAwHgYDVQQDEx
 80061e8:	4564 5761 7064 3251 7956 4364 4842 4762     dEaWdpQ2VydCBHbG
 80061f8:	6939 5759 6777 6d55 7639 4364 4842 4d0a     9iYWwgUm9vdCBH.M
 8006208:	416a 4665 3077 4d78 417a 4d34 4544 4d78     jAeFw0xMzA4MDExM
 8006218:	416a 4d77 4244 4661 3077 4f7a 4144 4d78     jAwMDBaFw0zODAxM
 8006228:	5554 4d78 416a 4d77 4244 4d61 4547 4378     TUxMjAwMDBaMGExC
 8006238:	417a 424a 4e67 4256 5941 4154 566c 0a54     zAJBgNVBAYTAlVT.
 8006248:	524d 7755 7745 4459 5156 4b51 7745 4578     MRUwEwYDVQQKEwxE
 8006258:	5761 7064 3251 7956 4364 4a42 6d62 784d     aWdpQ2VydCBJbmMx
 8006268:	5447 5841 6742 564e 4142 5473 4845 3364     GTAXBgNVBAsTEHd3
 8006278:	7964 6b35 5761 7064 3259 7956 4364 6a35     dy5kaWdpY2VydC5j
 8006288:	620a 3032 4978 4144 4265 4e67 4256 4d41     .b20xIDAeBgNVBAM
 8006298:	4654 5230 5a70 6c32 5a44 4a58 4930 6445     TF0RpZ2lDZXJ0IEd
 80062a8:	6273 4a32 6268 4243 6253 3932 4930 6345     sb2JhbCBSb290IEc
 80062b8:	4d79 4949 4942 416a 424e 6b67 6871 696b     yMIIBIjANBgkqhki
 80062c8:	0a47 7739 4230 5141 4645 4141 434f 5141     G.9w0BAQEFAAOCAQ
 80062d8:	4138 494d 4249 6743 434b 5141 4145 7a75     8AMIIBCgKCAQEAuz
 80062e8:	4e66 4e4e 3778 3861 796d 4a61 7443 6e53     fNNNx7a8myaJCtSn
 80062f8:	2f58 7252 686f 6743 4e69 5239 556c 6679     X/RrohCgiN9RlUyf
 8006308:	4975 320a 4f2f 3875 716a 6b4a 7854 3536     uI.2/Ou8jqJkTx65
 8006318:	7371 4747 766d 7250 3343 586f 6b67 526b     qsGGmvPrC3oXgkkR
 8006328:	704c 6d69 376e 6f57 6836 342b 5246 4931     Lpimn7Wo6h+4FR1I
 8006338:	5741 5573 654c 5963 7078 4d73 7a4e 4861     AWsULecYxpsMNzaH
 8006348:	6d78 0a78 7831 6537 642f 6766 3579 4453     xmx.1x7e/dfgy5SD
 8006358:	364e 7337 3048 4f4e 5833 7373 7230 7530     N67sH0NO3Xss0r0u
 8006368:	5370 6b2f 6271 7469 744f 5a53 4c70 6c59     pS/kqbitOtSZpLYl
 8006378:	5a36 7274 4741 5343 5059 5039 5549 596b     6ZtrAGCSYP9PIUkY
 8006388:	3239 5165 710a 4532 6e47 2f49 7579 6d75     92eQ.q2EGnI/yuum
 8006398:	3630 495a 6179 5837 567a 682b 4764 3238     06ZIya7XzV+hdG82
 80063a8:	484d 7561 4256 564a 384a 557a 6c74 4e75     MHauVBJVJ8zUtluN
 80063b8:	624a 3164 3433 742f 534a 5337 5673 6551     Jbd134/tJS7SsVQe
 80063c8:	6a70 5735 0a7a 4374 374f 4754 4631 5038     pj5Wz.tCO7TG1F8P
 80063d8:	7061 7073 7755 5074 4d31 5956 6e77 6c53     apspUwtP1MVYwnSl
 80063e8:	5563 4966 644b 587a 534f 7830 4b5a 6742     cUfIKdzXOS0xZKBg
 80063f8:	4d79 4e55 5047 6748 2b6d 3646 6d48 6349     yMUNGPHgm+F6HmIc
 8006408:	3972 2b67 5155 760a 4f49 436c 5273 4b6e     r9g+UQ.vIOlCsRnK
 8006418:	5a50 467a 5142 5239 626e 6844 5378 494a     PZzFBQ9RnbDhxSJI
 8006428:	5254 724e 3977 4446 5a4b 6f4a 7162 6e37     TRNrw9FDKZJobq7n
 8006438:	574d 4d78 4d34 6870 4951 4144 4151 6f42     MWxM4MphQIDAQABo
 8006448:	4930 5177 4144 0a50 6742 564e 5248 424d     0IwQDAP.BgNVHRMB
 8006458:	6641 4538 5442 4441 5141 2f48 414d 4734     Af8EBTADAQH/MA4G
 8006468:	3141 6455 7744 4245 772f 4551 7741 4249     A1UdDwEB/wQEAwIB
 8006478:	6a68 6441 6742 564e 5148 4534 6746 5551     hjAdBgNVHQ4EFgQU
 8006488:	6954 554a 4249 5669 350a 4e75 3575 2f67     TiJUIBiV.5uNu5g/
 8006498:	2b36 6b72 3753 5951 6a58 6b7a 4477 5951     6+rkS7QYXjzkwDQY
 80064a8:	4b4a 5a6f 6849 6376 414e 4551 424c 4151     JKoZIhvcNAQELBQA
 80064b8:	6744 4567 4142 4247 4b6e 524a 4476 686b     DggEBAGBnKJRvDkh
 80064c8:	366a 487a 3664 636d 0a59 5931 396c 4d50     j6zHd6mcY.1Yl9PM
 80064d8:	4c57 6e53 702f 7476 7273 3946 772b 3358     WLSn/pvtsrF9+wX3
 80064e8:	334e 6a4b 5449 594f 6e46 6f51 6a51 6b38     N3KjITOYFnQoQj8k
 80064f8:	6e56 654e 4979 2f76 5069 4773 4d45 4b4e     VnNeyIv/iPsGEMNK
 8006508:	7553 4549 4579 7478 3476 4e0a 4665 3232     SuIEyExtv4.NeF22
 8006518:	2b64 516d 7672 5248 6941 6647 5a7a 4a30     d+mQrvHRAiGfzZ0J
 8006528:	7246 6261 3041 5755 5754 3839 6e6b 7464     FrabA0UWTW98kndt
 8006538:	2f68 734a 3177 4b48 326a 4c5a 7437 7563     h/Jsw1HKj2ZL7tcu
 8006548:	5837 4955 474f 585a 4e31 0a47 6446 6f74     7XUIOGZX1NG.Fdto
 8006558:	2f6d 7a44 4e4d 2b55 654d 4e4b 4a68 6a37     m/DzMNU+MeKNhJ7j
 8006568:	7469 6172 6a6c 3134 3645 6656 5038 776c     itralj41E6Vf8Plw
 8006578:	4855 4842 5251 5846 5547 4137 366a 4734     UHBHQRFXGU7Aj64G
 8006588:	4a78 5455 7946 6238 5a4a 3139 380a 4772     xJUTFy8bJZ91.8rG
 8006598:	6d4f 4661 4576 4637 6342 3666 4b49 6873     OmaFvE7FBcf6IKsh
 80065a8:	4550 4243 3156 4d2f 5255 5865 5267 5450     PECBV1/MUReXgRPT
 80065b8:	6871 5535 6b79 3777 552b 6230 4c36 334a     qh5Uykw7+U0b6LJ3
 80065c8:	692f 4b79 5335 6b39 524a 5461 0a65 4c70     /iyK5S9kJRaTe.pL
 80065d8:	6169 4e57 6230 5666 664b 6c6a 446c 4969     iaWN0bfVKfjllDiI
 80065e8:	6b47 696e 5662 3662 6433 6344 3359 6566     GknibVb63dDcY3fe
 80065f8:	4430 686b 6c76 3164 3239 6a37 4e79 4678     0Dkhvld1927jyNxF
 8006608:	5731 3657 5a4c 6d5a 7a36 544e 6c66 4d0a     1WW6LZZm6zNTfl.M
 8006618:	5972 0a3d 2d2d 2d2d 452d 444e 4320 5245     rY=.-----END CER
 8006628:	4954 4946 4143 4554 2d2d 2d2d 0a2d 0000     TIFICATE-----...

08006638 <ok_res>:
 8006638:	4b4f 0a0d 003e 0000 5441 4d2b 5451 5054     OK..>...AT+MQTTP
 8006648:	4255 303d 302c 302c 222c 6564 6976 6563     UB=0,0,0,"device
 8006658:	2f73 7325 6d2f 7365 6173 6567 2f73 7665     s/%s/messages/ev
 8006668:	6e65 7374 222f 222c 5c7b 7422 6d65 6570     ents/","{\"tempe
 8006678:	6172 7574 6572 225c 253a 2e32 6632 227d     rature\":%2.2f}"
 8006688:	0a0d 0000 5c7b 7022 7961 6f6c 6461 225c     ....{\"payload\"
 8006698:	3a20 7b20 225c 6f6d 6564 496c 5c64 2022      : {\"modelId\" 
 80066a8:	203a 225c 7325 225c 7d7d 0000 7464 696d     : \"%s\"}}..dtmi
 80066b8:	633a 7375 6f74 316d 3467 3331 7730 7177     :custom1g4130wwq
 80066c8:	7778 583a 434d 3734 3030 6552 616c 4b78     xw:XMC4700RelaxK
 80066d8:	7469 345f 6e61 313b 0000 0000 5441 2545     it_4an;1....ATE%
 80066e8:	0d64 000a 5441 522b 5453 0a0d 0000 0000     d...AT+RST......
 80066f8:	5441 4c2b 414f 4344 5245 3d54 6425 222c     AT+LOADCERT=%d,"
 8006708:	6944 6967 6543 7472 6c47 626f 6c61 6f52     DigiCertGlobalRo
 8006718:	746f 3247 0d22 000a 5441 572b 5453 4341     otG2"...AT+WSTAC
 8006728:	253d 2c64 2522 2273 0a0d 0000 5069 6f68     =%d,"%s"....iPho
 8006738:	656e 0000 5441 572b 5453 4341 253d 2c64     ne..AT+WSTAC=%d,
 8006748:	6425 0a0d 0000 0000 6465 7964 656d 6873     %d......eddymesh
 8006758:	6361 006b 6f70 6c6f 6e2e 7074 6f2e 6772     ack.pool.ntp.org
 8006768:	0000 0000 5441 572b 5453 3d41 6425 0a0d     ....AT+WSTA=%d..
 8006778:	0000 0000 5441 572b 5453 0d41 000a 0000     ....AT+WSTA.....
 8006788:	572b 5453 4c41 0d44 000a 0000 5441 4d2b     +WSTALD.....AT+M
 8006798:	5451 4354 253d 2c64 2522 2273 0a0d 0000     QTTC=%d,"%s"....
 80067a8:	6c67 626f 6c61 612e 757a 6572 642d 7665     global.azure-dev
 80067b8:	6369 7365 702d 6f72 6976 6973 6e6f 6e69     ices-provisionin
 80067c8:	2e67 656e 0074 0000 5441 4d2b 5451 4354     g.net...AT+MQTTC
 80067d8:	253d 2c64 6425 0a0d 0000 0000 6e73 3130     =%d,%d......sn01
 80067e8:	3332 4337 3133 3636 3641 3944 3434 3130     237C3166A6D94401
 80067f8:	0000 0000 6e30 3065 4230 3834 3038 2f46     ....0ne00B4880F/
 8006808:	6572 6967 7473 6172 6974 6e6f 2f73 6e73     registrations/sn
 8006818:	3130 3332 4337 3133 3636 3641 3944 3434     01237C3166A6D944
 8006828:	3130 612f 6970 762d 7265 6973 6e6f 323d     01/api-version=2
 8006838:	3130 2d39 3330 332d 0031 0000 5441 4d2b     019-03-31...AT+M
 8006848:	5451 4354 4e4f 3d4e 6425 0a0d 0000 0000     QTTCONN=%d......
 8006858:	5441 4d2b 5451 5354 4255 223d 7325 2c22     AT+MQTTSUB="%s",
 8006868:	6425 0a0d 0000 0000 6424 7370 722f 6765     %d......$dps/reg
 8006878:	7369 7274 7461 6f69 736e 722f 7365 232f     istrations/res/#
 8006888:	0000 0000 5441 4d2b 5451 5054 4255 253d     ....AT+MQTTPUB=%
 8006898:	2c64 6425 252c 2c64 2522 2273 222c 7325     d,%d,%d,"%s","%s
 80068a8:	0d22 000a 6424 7370 722f 6765 7369 7274     "...$dps/registr
 80068b8:	7461 6f69 736e 502f 5455 692f 746f 7064     ations/PUT/iotdp
 80068c8:	2d73 6572 6967 7473 7265 3f2f 6972 3d64     s-register/?rid=
 80068d8:	0000 0000 4d2b 5451 5054 4255 003a 0000     ....+MQTTPUB:...
 80068e8:	6f22 6570 6172 6974 6e6f 6449 3a22 0022     "operationId":".
 80068f8:	5441 4d2b 5451 5054 4255 303d 302c 302c     AT+MQTTPUB=0,0,0
 8006908:	222c 6424 7370 722f 6765 7369 7274 7461     ,"$dps/registrat
 8006918:	6f69 736e 472f 5445 692f 746f 7064 2d73     ions/GET/iotdps-
 8006928:	6567 2d74 706f 7265 7461 6f69 736e 6174     get-operationsta
 8006938:	7574 2f73 723f 6469 323d 6f26 6570 6172     tus/?rid=2&opera
 8006948:	6974 6e6f 6449 253d 2273 222c 0d22 000a     tionId=%s",""...
 8006958:	6572 7274 2d79 6661 6574 3d72 0000 0000     retry-after=....
 8006968:	6122 7373 6769 656e 4864 6275 3a22 0022     "assignedHub":".
 8006978:	7325 252f 2f73 613f 6970 762d 7265 6973     %s/%s/?api-versi
 8006988:	6e6f 323d 3230 2d31 3430 312d 0032 0000     on=2021-04-12...
 8006998:	5441 4d2b 5451 4454 5349 4f43 4e4e 0a0d     AT+MQTTDISCONN..
 80069a8:	0000 0000 6924 746f 7568 2f62 656d 6874     ....$iothub/meth
 80069b8:	646f 2f73 4f50 5453 232f 0000 6924 746f     ods/POST/#..$iot
 80069c8:	7568 2f62 7774 6e69 502f 5441 4843 702f     hub/twin/PATCH/p
 80069d8:	6f72 6570 7472 6569 2f73 6564 6973 6572     roperties/desire
 80069e8:	2f64 0023 6924 746f 7568 2f62 7774 6e69     d/#.$iothub/twin
 80069f8:	722f 7365 232f 0000 0043 4e49 0046 6e69     /res/#..C.INF.in
 8006a08:	0066 414e 004e 616e 006e 0030 3130 3332     f.NAN.nan.0.0123
 8006a18:	3534 3736 3938 4241 4443 4645 3000 3231     456789ABCDEF.012
 8006a28:	3433 3635 3837 6139 6362 6564 0066 6e49     3456789abcdef.In
 8006a38:	6966 696e 7974 4e00 4e61 5000 534f 5849     finity.NaN.POSIX
 8006a48:	2e00 0000 0000 0000                         ........

08006a50 <__mprec_tens>:
 8006a50:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8006a60:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8006a70:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8006a80:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8006a90:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8006aa0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8006ab0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8006ac0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8006ad0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8006ae0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8006af0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8006b00:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8006b10:	9db4 79d9 7843 44ea                         ...yCx.D

08006b18 <__mprec_bigtens>:
 8006b18:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8006b28:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8006b38:	bf3c 7f73 4fdd 7515                         <.s..O.u

08006b40 <p05.5277>:
 8006b40:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
 8006b50:	0020 6c68 004c 6665 4567 4746 0000 0000      .hlL.efgEFG....
